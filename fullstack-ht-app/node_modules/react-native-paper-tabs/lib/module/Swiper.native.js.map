{"version":3,"sources":["Swiper.native.tsx"],"names":["React","View","Animated","Keyboard","StyleSheet","ViewPager","TabsContext","TabsHeader","styles","create","viewPager","flex","SwiperNative","props","theme","dark","style","defaultIndex","iconPosition","showTextLabel","uppercase","mode","onChangeIndex","showLeadingSpace","indexRef","useRef","index","setIndex","useState","children","offset","Value","position","isScrolling","undefined","useEffect","current","requestAnimationFrame","setPage","onPageScrollStateChanged","useCallback","event","dismiss","nativeEvent","pageScrollState","onPageSelected","e","i","goTo","ind","renderProps","useNativeDriver","Children","map","tab","tabIndex","label"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, Animated, Keyboard, StyleSheet } from 'react-native';\nimport ViewPager from 'react-native-pager-view';\nimport type { SwiperProps } from './utils';\nimport type { TabScreenProps } from './TabScreen';\nimport { TabsContext } from './context';\nimport TabsHeader from './TabsHeader';\n\nconst styles = StyleSheet.create({\n  viewPager: {\n    flex: 1,\n  },\n});\n\nfunction SwiperNative(props: SwiperProps) {\n  const {\n    theme,\n    dark,\n    style,\n    defaultIndex,\n    iconPosition,\n    showTextLabel,\n    uppercase,\n    mode,\n    onChangeIndex,\n    showLeadingSpace,\n  } = props;\n  const indexRef = React.useRef<number>(defaultIndex || 0);\n  const [index, setIndex] = React.useState<number>(defaultIndex || 0);\n\n  let children: React.Component<TabScreenProps>[] = props.children;\n\n  const offset = React.useRef<Animated.Value>(new Animated.Value(0));\n  const position = React.useRef<Animated.Value>(\n    new Animated.Value(defaultIndex || 0)\n  );\n  const isScrolling = React.useRef<boolean>(false);\n  const viewPager = React.useRef<ViewPager | undefined>(undefined);\n\n  React.useEffect(() => {\n    if (index !== indexRef.current) {\n      isScrolling.current = true;\n      requestAnimationFrame(\n        () => viewPager.current && viewPager.current.setPage(index)\n      );\n    }\n\n    indexRef.current = index;\n    return undefined;\n  }, [isScrolling, viewPager, index]);\n\n  const onPageScrollStateChanged = React.useCallback(\n    (event) => {\n      Keyboard.dismiss();\n      isScrolling.current = event.nativeEvent.pageScrollState !== 'idle';\n    },\n    [isScrolling]\n  );\n\n  const onPageSelected = React.useCallback(\n    (e) => {\n      isScrolling.current = false;\n      const i = e.nativeEvent.position;\n\n      setIndex(i);\n      onChangeIndex(i);\n    },\n    [isScrolling, setIndex, onChangeIndex]\n  );\n\n  const goTo = React.useCallback(\n    (ind: number) => {\n      if (!isScrolling.current) {\n        setIndex(ind);\n      }\n    },\n    [setIndex, isScrolling]\n  );\n\n  const renderProps = {\n    index,\n    goTo,\n    children,\n    theme,\n    dark,\n    style,\n    position: position.current,\n    offset: offset.current,\n    iconPosition,\n    showTextLabel,\n    showLeadingSpace,\n    uppercase,\n    mode,\n  };\n  return (\n    <>\n      <TabsHeader {...renderProps} />\n      <TabsContext.Provider value={{ goTo, index }}>\n        <ViewPager\n          style={styles.viewPager}\n          initialPage={index}\n          onPageSelected={onPageSelected}\n          ref={viewPager as any}\n          onPageScrollStateChanged={onPageScrollStateChanged}\n          onPageScroll={Animated.event(\n            [\n              {\n                nativeEvent: {\n                  position: position.current,\n                  offset: offset.current,\n                },\n              },\n            ],\n            {\n              useNativeDriver: false,\n            }\n          )}\n        >\n          {React.Children.map(children, (tab, tabIndex) => (\n            <View style={styles.viewPager} key={tab.props.label || tabIndex}>\n              {tab}\n            </View>\n          ))}\n        </ViewPager>\n      </TabsContext.Provider>\n    </>\n  );\n}\n\nexport default SwiperNative;\n"]}