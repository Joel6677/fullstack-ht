{"version":3,"sources":["Swiper.native.tsx"],"names":["styles","StyleSheet","create","viewPager","flex","SwiperNative","props","theme","dark","style","defaultIndex","iconPosition","showTextLabel","uppercase","mode","onChangeIndex","showLeadingSpace","indexRef","React","useRef","index","setIndex","useState","children","offset","Animated","Value","position","isScrolling","undefined","useEffect","current","requestAnimationFrame","setPage","onPageScrollStateChanged","useCallback","event","Keyboard","dismiss","nativeEvent","pageScrollState","onPageSelected","e","i","goTo","ind","renderProps","useNativeDriver","Children","map","tab","tabIndex","label"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, Animated, Keyboard, StyleSheet } from 'react-native';\nimport ViewPager from 'react-native-pager-view';\nimport type { SwiperProps } from './utils';\nimport type { TabScreenProps } from './TabScreen';\nimport { TabsContext } from './context';\nimport TabsHeader from './TabsHeader';\n\nconst styles = StyleSheet.create({\n  viewPager: {\n    flex: 1,\n  },\n});\n\nfunction SwiperNative(props: SwiperProps) {\n  const {\n    theme,\n    dark,\n    style,\n    defaultIndex,\n    iconPosition,\n    showTextLabel,\n    uppercase,\n    mode,\n    onChangeIndex,\n    showLeadingSpace,\n  } = props;\n  const indexRef = React.useRef<number>(defaultIndex || 0);\n  const [index, setIndex] = React.useState<number>(defaultIndex || 0);\n\n  let children: React.Component<TabScreenProps>[] = props.children;\n\n  const offset = React.useRef<Animated.Value>(new Animated.Value(0));\n  const position = React.useRef<Animated.Value>(\n    new Animated.Value(defaultIndex || 0)\n  );\n  const isScrolling = React.useRef<boolean>(false);\n  const viewPager = React.useRef<ViewPager | undefined>(undefined);\n\n  React.useEffect(() => {\n    if (index !== indexRef.current) {\n      isScrolling.current = true;\n      requestAnimationFrame(\n        () => viewPager.current && viewPager.current.setPage(index)\n      );\n    }\n\n    indexRef.current = index;\n    return undefined;\n  }, [isScrolling, viewPager, index]);\n\n  const onPageScrollStateChanged = React.useCallback(\n    (event) => {\n      Keyboard.dismiss();\n      isScrolling.current = event.nativeEvent.pageScrollState !== 'idle';\n    },\n    [isScrolling]\n  );\n\n  const onPageSelected = React.useCallback(\n    (e) => {\n      isScrolling.current = false;\n      const i = e.nativeEvent.position;\n\n      setIndex(i);\n      onChangeIndex(i);\n    },\n    [isScrolling, setIndex, onChangeIndex]\n  );\n\n  const goTo = React.useCallback(\n    (ind: number) => {\n      if (!isScrolling.current) {\n        setIndex(ind);\n      }\n    },\n    [setIndex, isScrolling]\n  );\n\n  const renderProps = {\n    index,\n    goTo,\n    children,\n    theme,\n    dark,\n    style,\n    position: position.current,\n    offset: offset.current,\n    iconPosition,\n    showTextLabel,\n    showLeadingSpace,\n    uppercase,\n    mode,\n  };\n  return (\n    <>\n      <TabsHeader {...renderProps} />\n      <TabsContext.Provider value={{ goTo, index }}>\n        <ViewPager\n          style={styles.viewPager}\n          initialPage={index}\n          onPageSelected={onPageSelected}\n          ref={viewPager as any}\n          onPageScrollStateChanged={onPageScrollStateChanged}\n          onPageScroll={Animated.event(\n            [\n              {\n                nativeEvent: {\n                  position: position.current,\n                  offset: offset.current,\n                },\n              },\n            ],\n            {\n              useNativeDriver: false,\n            }\n          )}\n        >\n          {React.Children.map(children, (tab, tabIndex) => (\n            <View style={styles.viewPager} key={tab.props.label || tabIndex}>\n              {tab}\n            </View>\n          ))}\n        </ViewPager>\n      </TabsContext.Provider>\n    </>\n  );\n}\n\nexport default SwiperNative;\n"]}