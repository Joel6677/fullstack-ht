{"ast":null,"code":"import _regeneratorRuntime from\"@babel/runtime/regenerator\";import React,{useState}from'react';import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import View from\"react-native-web/dist/exports/View\";import{Formik}from'formik';import*as yup from'yup';import{useHistory}from'react-router-native';import{useMutation}from'@apollo/react-hooks';import{SignInWithGoogle,SignUpWithEmail}from\"../firebase/firebaseFunctions\";import Button from\"./Button\";import FormikTextInput from\"./FormikTextInput\";import useSignIn from\"../hooks/useSignIn\";import{CREATE_USER}from\"../graphql/mutations\";import Text from\"./Text\";var styles=StyleSheet.create({container:{backgroundColor:'white',padding:15},fieldContainer:{marginBottom:15}});var initialValues={username:'',password:'',passwordConfirmation:''};var validationSchema=yup.object().shape({username:yup.string().min(1,'Username must be at least 1 character long').max(30,'Username must be at most 30 characters long').required('Username is required'),email:yup.string().required('Email is required'),password:yup.string().min(5,'Password must be at least 6 characters long').max(50,'Password must be at most 50 characters long').required('Password is required'),passwordConfirmation:yup.string().oneOf([yup.ref('password'),null],'Password confirmation must match the password').required('Password confirmation is required')});var SignUpForm=function SignUpForm(_ref){var onSubmit=_ref.onSubmit;return React.createElement(View,{style:styles.container},React.createElement(View,{style:styles.fieldContainer},React.createElement(FormikTextInput,{name:\"username\",placeholder:\"Username\"})),React.createElement(View,{style:styles.fieldContainer},React.createElement(FormikTextInput,{name:\"email\",placeholder:\"Email\"})),React.createElement(View,{style:styles.fieldContainer},React.createElement(FormikTextInput,{name:\"password\",placeholder:\"Password\",secureTextEntry:true})),React.createElement(View,{style:styles.fieldContainer},React.createElement(FormikTextInput,{name:\"passwordConfirmation\",placeholder:\"Password confirmation\",secureTextEntry:true})),React.createElement(Button,{onPress:onSubmit,testID:\"submitButton\"},\"Sign up\"));};var SignUp=function SignUp(){var history=useHistory();var onSubmit=function onSubmit(values){var email,username,password;return _regeneratorRuntime.async(function onSubmit$(_context){while(1){switch(_context.prev=_context.next){case 0:email=values.email,username=values.username,password=values.password;SignInWithGoogle();history.push('/');case 3:case\"end\":return _context.stop();}}},null,null,null,Promise);};return React.createElement(Formik,{initialValues:initialValues,onSubmit:onSubmit},function(_ref2){var handleSubmit=_ref2.handleSubmit;return React.createElement(SignUpForm,{onSubmit:handleSubmit});});};export default SignUp;","map":{"version":3,"sources":["/home/hejoel/fullstack/fullstack-ht/fullstack-ht/fullstack-ht-app/src/components/SignUpWithEmail.jsx"],"names":["React","useState","Formik","yup","useHistory","useMutation","SignInWithGoogle","SignUpWithEmail","Button","FormikTextInput","useSignIn","CREATE_USER","Text","styles","StyleSheet","create","container","backgroundColor","padding","fieldContainer","marginBottom","initialValues","username","password","passwordConfirmation","validationSchema","object","shape","string","min","max","required","email","oneOf","ref","SignUpForm","onSubmit","SignUp","history","values","push","handleSubmit"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport { useHistory } from 'react-router-native';\nimport { useMutation } from '@apollo/react-hooks';\nimport { SignInWithGoogle, SignUpWithEmail } from '../firebase/firebaseFunctions';\n\nimport Button from './Button';\nimport FormikTextInput from './FormikTextInput';\nimport useSignIn from '../hooks/useSignIn';\nimport { CREATE_USER } from '../graphql/mutations';\n\nimport Text from './Text';\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'white',\n    padding: 15,\n  },\n  fieldContainer: {\n    marginBottom: 15,\n  },\n});\n\nconst initialValues = {\n  username: '',\n  password: '',\n  passwordConfirmation: '',\n};\n\nconst validationSchema = yup.object().shape({\n  username: yup\n    .string()\n    .min(1, 'Username must be at least 1 character long')\n    .max(30, 'Username must be at most 30 characters long')\n    .required('Username is required'),\n  email: yup\n    .string()\n    .required('Email is required'),\n  password: yup\n    .string()\n    .min(5, 'Password must be at least 6 characters long')\n    .max(50, 'Password must be at most 50 characters long')\n    .required('Password is required'),\n  passwordConfirmation: yup\n    .string()\n    .oneOf(\n      [yup.ref('password'), null],\n      'Password confirmation must match the password',\n    )\n    .required('Password confirmation is required'),\n});\n\nconst SignUpForm = ({ onSubmit }) => {\n  return (\n    <View style={styles.container}>\n\n\n      <View style={styles.fieldContainer}>\n        <FormikTextInput name=\"username\" placeholder=\"Username\" />\n      </View>\n\n\n      <View style={styles.fieldContainer}>\n        <FormikTextInput name=\"email\" placeholder=\"Email\" />\n      </View>\n\n      <View style={styles.fieldContainer}>\n        <FormikTextInput\n          name=\"password\"\n          placeholder=\"Password\"\n          secureTextEntry\n        />\n      </View>\n\n      <View style={styles.fieldContainer}>\n        <FormikTextInput\n          name=\"passwordConfirmation\"\n          placeholder=\"Password confirmation\"\n          secureTextEntry\n        />\n      </View>\n\n      <Button onPress={onSubmit} testID=\"submitButton\">\n        Sign up\n      </Button>\n    </View>\n  );\n};\n\nconst SignUp = () => {\n  const history = useHistory();\n\n  const onSubmit = async (values) => {\n    const { email, username, password } = values;\n\n    // SignUpWithEmail(email, username, password);\n    SignInWithGoogle();\n\n    history.push('/');\n  };\n\n  return (\n\n    <Formik\n      initialValues={initialValues}\n      onSubmit={onSubmit}\n      // validationSchema={validationSchema}\n    >\n      {({ handleSubmit }) => <SignUpForm onSubmit={handleSubmit} />}\n    </Formik>\n  );\n};\n\nexport default SignUp;"]},"metadata":{},"sourceType":"module"}