{"ast":null,"code":"import _regeneratorRuntime from\"@babel/runtime/regenerator\";import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import{useContext}from'react';import{useApolloClient,useMutation}from'@apollo/react-hooks';import{AUTHORIZE}from\"../graphql/mutations\";import AuthStorageContext from\"../contexts/AuthStorageContext\";var useSignIn=function useSignIn(){var _useMutation=useMutation(AUTHORIZE),_useMutation2=_slicedToArray(_useMutation,2),mutate=_useMutation2[0],result=_useMutation2[1];var apolloClient=useApolloClient();var authStorage=useContext(AuthStorageContext);var signIn=function signIn(_ref){var username,password,credentials,payload,data;return _regeneratorRuntime.async(function signIn$(_context){while(1){switch(_context.prev=_context.next){case 0:username=_ref.username,password=_ref.password;credentials={username:username,password:password};_context.next=4;return _regeneratorRuntime.awrap(mutate({variables:{credentials:credentials}}));case 4:payload=_context.sent;data=payload.data;if(!(data&&data.authorize)){_context.next=10;break;}_context.next=9;return _regeneratorRuntime.awrap(authStorage.setAccessToken(data.authorize.accessToken));case 9:apolloClient.resetStore();case 10:return _context.abrupt(\"return\",payload);case 11:case\"end\":return _context.stop();}}},null,null,null,Promise);};return[signIn,result];};export default useSignIn;","map":{"version":3,"sources":["/home/hejoel/fullstack/fullstack-ht/fullstack-ht/fullstack-ht-app/src/hooks/useSignIn.js"],"names":["useContext","useApolloClient","useMutation","AUTHORIZE","AuthStorageContext","useSignIn","mutate","result","apolloClient","authStorage","signIn","username","password","credentials","variables","payload","data","authorize","setAccessToken","accessToken","resetStore"],"mappings":"6HAAA,OAASA,UAAT,KAA2B,OAA3B,CACA,OAASC,eAAT,CAA0BC,WAA1B,KAA6C,qBAA7C,CAEA,OAASC,SAAT,4BACA,MAAOC,CAAAA,kBAAP,sCAEA,GAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,EAAM,kBACGH,WAAW,CAACC,SAAD,CADd,8CACfG,MADe,kBACPC,MADO,kBAEtB,GAAMC,CAAAA,YAAY,CAAGP,eAAe,EAApC,CACA,GAAMQ,CAAAA,WAAW,CAAGT,UAAU,CAACI,kBAAD,CAA9B,CAEA,GAAMM,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,sKAASC,QAAT,MAASA,QAAT,CAAmBC,QAAnB,MAAmBA,QAAnB,CACPC,WADO,CACO,CAAEF,QAAQ,CAARA,QAAF,CAAYC,QAAQ,CAARA,QAAZ,CADP,kDAGSN,MAAM,CAAC,CAAEQ,SAAS,CAAE,CAAED,WAAW,CAAXA,WAAF,CAAb,CAAD,CAHf,SAGPE,OAHO,eAILC,IAJK,CAIID,OAJJ,CAILC,IAJK,MAMTA,IAAI,EAAIA,IAAI,CAACC,SANJ,4EAOLR,WAAW,CAACS,cAAZ,CAA2BF,IAAI,CAACC,SAAL,CAAeE,WAA1C,CAPK,SAQXX,YAAY,CAACY,UAAb,GARW,wCAWNL,OAXM,wEAAf,CAcA,MAAO,CAACL,MAAD,CAASH,MAAT,CAAP,CACD,CApBD,CAsBA,cAAeF,CAAAA,SAAf","sourcesContent":["import { useContext } from 'react';\nimport { useApolloClient, useMutation } from '@apollo/react-hooks';\n\nimport { AUTHORIZE } from '../graphql/mutations';\nimport AuthStorageContext from '../contexts/AuthStorageContext';\n\nconst useSignIn = () => {\n  const [mutate, result] = useMutation(AUTHORIZE);\n  const apolloClient = useApolloClient();\n  const authStorage = useContext(AuthStorageContext);\n\n  const signIn = async ({ username, password }) => {\n    const credentials = { username, password };\n\n    const payload = await mutate({ variables: { credentials } });\n    const { data } = payload;\n\n    if (data && data.authorize) {\n      await authStorage.setAccessToken(data.authorize.accessToken);\n      apolloClient.resetStore();\n    }\n\n    return payload;\n  };\n\n  return [signIn, result];\n};\n\nexport default useSignIn;"]},"metadata":{},"sourceType":"module"}