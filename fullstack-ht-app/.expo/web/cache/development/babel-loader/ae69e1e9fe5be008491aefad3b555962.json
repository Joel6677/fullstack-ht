{"ast":null,"code":"var _jsxFileName = \"/home/hejoel/fullstack/fullstack-ht/fullstack-ht/fullstack-ht-app/src/components/CreateReview.jsx\";\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Button } from 'react-native-paper';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport { useHistory } from 'react-router-native';\nimport { useMutation } from '@apollo/react-hooks';\nimport * as firebase from 'firebase';\nimport FormikTextInput from \"./FormikTextInput\";\nimport { CREATE_REVIEW } from \"../graphql/mutations\";\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'white',\n    padding: 15\n  },\n  fieldContainer: {\n    marginBottom: 15\n  }\n});\nvar initialValues = {\n  nosing: '',\n  taste: '',\n  finish: '',\n  rating: '',\n  comment: ''\n};\nvar validationSchema = yup.object().shape({\n  nosing: yup.string().required('Nosing is required'),\n  taste: yup.string().required('Taste is required'),\n  finish: yup.string().required('Finish is required'),\n  rating: yup.number('Rating must be a number').min(0, 'Rating must be greater or equal to 0').max(100, 'Rating must be less or equal to 100').required('Rating is required'),\n  comment: yup.string()\n});\n\nvar CreateReviewForm = function CreateReviewForm(_ref) {\n  var onSubmit = _ref.onSubmit;\n  return React.createElement(View, {\n    style: styles.container\n  }, React.createElement(View, {\n    style: styles.fieldContainer\n  }, React.createElement(FormikTextInput, {\n    placeholder: \"Nosing\",\n    name: \"nosing\"\n  })), React.createElement(View, {\n    style: styles.fieldContainer\n  }, React.createElement(FormikTextInput, {\n    placeholder: \"Taste\",\n    name: \"taste\"\n  })), React.createElement(View, {\n    style: styles.fieldContainer\n  }, React.createElement(FormikTextInput, {\n    placeholder: \"Finish\",\n    name: \"finish\"\n  })), React.createElement(View, {\n    style: styles.fieldContainer\n  }, React.createElement(FormikTextInput, {\n    placeholder: \"Rating between 0 and 100\",\n    keyboardType: \"numeric\",\n    name: \"rating\"\n  })), React.createElement(View, {\n    style: styles.fieldContainer\n  }, React.createElement(FormikTextInput, {\n    placeholder: \"Comment\",\n    name: \"comment\",\n    multiline: true\n  })), React.createElement(Button, {\n    onPress: onSubmit\n  }, \"Create a review\"));\n};\n\nvar CreateReview = function CreateReview() {\n  var history = useHistory();\n  return React.createElement(React.Fragment, null);\n};\n\nexport default CreateReview;","map":{"version":3,"sources":["/home/hejoel/fullstack/fullstack-ht/fullstack-ht/fullstack-ht-app/src/components/CreateReview.jsx"],"names":["React","Button","Formik","yup","useHistory","useMutation","firebase","FormikTextInput","CREATE_REVIEW","styles","StyleSheet","create","container","backgroundColor","padding","fieldContainer","marginBottom","initialValues","nosing","taste","finish","rating","comment","validationSchema","object","shape","string","required","number","min","max","CreateReviewForm","onSubmit","CreateReview","history"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport {Button} from 'react-native-paper';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport { useHistory } from 'react-router-native';\nimport { useMutation } from '@apollo/react-hooks';\nimport * as firebase from 'firebase';\nimport FormikTextInput from './FormikTextInput';\nimport { CREATE_REVIEW } from '../graphql/mutations';\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'white',\n    padding: 15,\n  },\n  fieldContainer: {\n    marginBottom: 15,\n  },\n});\n\nconst initialValues = {\n  nosing: '',\n  taste: '',\n  finish: '',\n  rating: '',\n  comment: ''\n};\n\nconst validationSchema = yup.object().shape({\n  nosing: yup.string().required('Nosing is required'),\n  taste: yup.string().required('Taste is required'),\n  finish: yup.string().required('Finish is required'), \n  rating: yup\n  .number('Rating must be a number')\n  .min(0, 'Rating must be greater or equal to 0')\n  .max(100, 'Rating must be less or equal to 100')\n  .required('Rating is required'),\n  comment: yup.string(),\n});\n\nconst CreateReviewForm = ({ onSubmit }) => {\n  return (\n    <View style={styles.container}>\n      <View style={styles.fieldContainer}>\n        <FormikTextInput placeholder=\"Nosing\" name=\"nosing\" />\n      </View>\n      <View style={styles.fieldContainer}>\n        <FormikTextInput placeholder=\"Taste\" name=\"taste\" />\n      </View>\n      <View style={styles.fieldContainer}>\n        <FormikTextInput placeholder=\"Finish\" name=\"finish\" />\n      </View>\n      <View style={styles.fieldContainer}>\n        <FormikTextInput\n          placeholder=\"Rating between 0 and 100\"\n          keyboardType=\"numeric\"\n          name=\"rating\"\n        />\n      </View>\n      <View style={styles.fieldContainer}>\n        <FormikTextInput placeholder=\"Comment\" name=\"comment\" multiline />\n      </View>\n\n      <Button onPress={onSubmit}>Create a review</Button>\n    </View>\n  );\n};\n\nconst CreateReview = () => {\n  \n  const history = useHistory();\n\n  // const onSubmit = async (values) => {\n\n  //   // useCollection hook \n  //   // firebase.firestore().collection('whiskies').getClicked whisky id\n\n  //   }\n  //   const review = {\n  //     ...values,\n  //     rating: parseInt(values.rating),\n  //   };\n\n  //   const { data } = await createReview({ variables: { review } });\n\n  //   if (data && data.createReview) {\n  //     history.push(`/repositories/${data.createReview.repositoryId}`);\n  //   }\n  // };\n\n  return (\n    <></>\n    // <Formik\n    //   initialValues={initialValues}\n    //   onSubmit={onSubmit}\n    //   validationSchema={validationSchema}\n    // >\n    //   {({ handleSubmit }) => <CreateReviewForm onSubmit={handleSubmit} />}\n    // </Formik>\n  );\n};\n\nexport default CreateReview;"]},"metadata":{},"sourceType":"module"}