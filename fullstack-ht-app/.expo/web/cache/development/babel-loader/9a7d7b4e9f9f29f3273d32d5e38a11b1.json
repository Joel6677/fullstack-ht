{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_REPOSITORIES } from \"../graphql/queries\";\n\nvar useRepositories = function useRepositories(variables) {\n  var _useQuery = useQuery(GET_REPOSITORIES, {\n    variables: variables,\n    fetchPolicy: 'cache-and-network'\n  }),\n      data = _useQuery.data,\n      loading = _useQuery.loading,\n      fetchMore = _useQuery.fetchMore,\n      result = _objectWithoutProperties(_useQuery, [\"data\", \"loading\", \"fetchMore\"]);\n\n  var handleFetchMore = function handleFetchMore() {\n    var canFetchMore = !loading && data && data.repositories.pageInfo.hasNextPage;\n\n    if (!canFetchMore) {\n      return;\n    }\n\n    fetchMore({\n      query: GET_REPOSITORIES,\n      variables: _objectSpread({\n        after: data.repositories.pageInfo.endCursor\n      }, variables),\n      updateQuery: function updateQuery(previousResult, _ref) {\n        var fetchMoreResult = _ref.fetchMoreResult;\n        var nextResult = {\n          repositories: _objectSpread(_objectSpread({}, fetchMoreResult.repositories), {}, {\n            edges: [].concat(_toConsumableArray(previousResult.repositories.edges), _toConsumableArray(fetchMoreResult.repositories.edges))\n          })\n        };\n        return nextResult;\n      }\n    });\n  };\n\n  return _objectSpread({\n    repositories: data ? data.repositories : undefined,\n    fetchMore: handleFetchMore,\n    loading: loading\n  }, result);\n};\n\nexport default useRepositories;","map":{"version":3,"sources":["/home/hejoel/fullstack/fullstack-ht/fullstack-ht/fullstack-ht-app/src/hooks/useRepositories.js"],"names":["useQuery","GET_REPOSITORIES","useRepositories","variables","fetchPolicy","data","loading","fetchMore","result","handleFetchMore","canFetchMore","repositories","pageInfo","hasNextPage","query","after","endCursor","updateQuery","previousResult","fetchMoreResult","nextResult","edges","undefined"],"mappings":";;;;;;;;AAAA,SAASA,QAAT,QAAyB,qBAAzB;AAEA,SAASC,gBAAT;;AAEA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,SAAD,EAAe;AAAA,kBACWH,QAAQ,CAACC,gBAAD,EAAmB;AACzEE,IAAAA,SAAS,EAATA,SADyE;AAEzEC,IAAAA,WAAW,EAAE;AAF4D,GAAnB,CADnB;AAAA,MAC7BC,IAD6B,aAC7BA,IAD6B;AAAA,MACvBC,OADuB,aACvBA,OADuB;AAAA,MACdC,SADc,aACdA,SADc;AAAA,MACAC,MADA;;AAMrC,MAAMC,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AAC5B,QAAMC,YAAY,GAChB,CAACJ,OAAD,IAAYD,IAAZ,IAAoBA,IAAI,CAACM,YAAL,CAAkBC,QAAlB,CAA2BC,WADjD;;AAGA,QAAI,CAACH,YAAL,EAAmB;AACjB;AACD;;AAEDH,IAAAA,SAAS,CAAC;AACRO,MAAAA,KAAK,EAAEb,gBADC;AAERE,MAAAA,SAAS;AACPY,QAAAA,KAAK,EAAEV,IAAI,CAACM,YAAL,CAAkBC,QAAlB,CAA2BI;AAD3B,SAEJb,SAFI,CAFD;AAMRc,MAAAA,WAAW,EAAE,qBAACC,cAAD,QAAyC;AAAA,YAAtBC,eAAsB,QAAtBA,eAAsB;AACpD,YAAMC,UAAU,GAAG;AACjBT,UAAAA,YAAY,kCACPQ,eAAe,CAACR,YADT;AAEVU,YAAAA,KAAK,+BACAH,cAAc,CAACP,YAAf,CAA4BU,KAD5B,sBAEAF,eAAe,CAACR,YAAhB,CAA6BU,KAF7B;AAFK;AADK,SAAnB;AAUA,eAAOD,UAAP;AACD;AAlBO,KAAD,CAAT;AAoBD,GA5BD;;AA8BA;AACET,IAAAA,YAAY,EAAEN,IAAI,GAAGA,IAAI,CAACM,YAAR,GAAuBW,SAD3C;AAEEf,IAAAA,SAAS,EAAEE,eAFb;AAGEH,IAAAA,OAAO,EAAPA;AAHF,KAIKE,MAJL;AAMD,CA1CD;;AA4CA,eAAeN,eAAf","sourcesContent":["import { useQuery } from '@apollo/react-hooks';\n\nimport { GET_REPOSITORIES } from '../graphql/queries';\n\nconst useRepositories = (variables) => {\n  const { data, loading, fetchMore, ...result } = useQuery(GET_REPOSITORIES, {\n    variables,\n    fetchPolicy: 'cache-and-network',\n  });\n\n  const handleFetchMore = () => {\n    const canFetchMore =\n      !loading && data && data.repositories.pageInfo.hasNextPage;\n\n    if (!canFetchMore) {\n      return;\n    }\n\n    fetchMore({\n      query: GET_REPOSITORIES,\n      variables: {\n        after: data.repositories.pageInfo.endCursor,\n        ...variables,\n      },\n      updateQuery: (previousResult, { fetchMoreResult }) => {\n        const nextResult = {\n          repositories: {\n            ...fetchMoreResult.repositories,\n            edges: [\n              ...previousResult.repositories.edges,\n              ...fetchMoreResult.repositories.edges,\n            ],\n          },\n        };\n\n        return nextResult;\n      },\n    });\n  };\n\n  return {\n    repositories: data ? data.repositories : undefined,\n    fetchMore: handleFetchMore,\n    loading,\n    ...result,\n  };\n};\n\nexport default useRepositories;"]},"metadata":{},"sourceType":"module"}