{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/home/hejoel/fullstack/fullstack-ht/fullstack-ht/fullstack-ht-app/src/components/CreateReview.jsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport { useHistory } from 'react-router-native';\nimport { useMutation } from '@apollo/react-hooks';\nimport Button from \"./Button\";\nimport FormikTextInput from \"./FormikTextInput\";\nimport { CREATE_REVIEW } from \"../graphql/mutations\";\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'white',\n    padding: 15\n  },\n  fieldContainer: {\n    marginBottom: 15\n  }\n});\nvar initialValues = {\n  repositoryName: '',\n  ownerName: '',\n  rating: '',\n  text: ''\n};\nvar validationSchema = yup.object().shape({\n  repositoryName: yup.string().required('Repository name is required'),\n  ownerName: yup.string().required('Repository owner name is required'),\n  rating: yup.number('Rating must be a number').min(0, 'Rating must be greater or equal to 0').max(100, 'Rating must be less or equal to 100').required('Rating is required'),\n  text: yup.string()\n});\n\nvar CreateReviewForm = function CreateReviewForm(_ref) {\n  var onSubmit = _ref.onSubmit;\n  return React.createElement(View, {\n    style: styles.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: styles.fieldContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }, React.createElement(FormikTextInput, {\n    placeholder: \"Repository owner name\",\n    name: \"ownerName\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  })), React.createElement(View, {\n    style: styles.fieldContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }, React.createElement(FormikTextInput, {\n    placeholder: \"Repository name\",\n    name: \"repositoryName\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  })), React.createElement(View, {\n    style: styles.fieldContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }, React.createElement(FormikTextInput, {\n    placeholder: \"Rating between 0 and 100\",\n    keyboardType: \"numeric\",\n    name: \"rating\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  })), React.createElement(View, {\n    style: styles.fieldContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }, React.createElement(FormikTextInput, {\n    placeholder: \"Review\",\n    name: \"text\",\n    multiline: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  })), React.createElement(Button, {\n    onPress: onSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }, \"Create a review\"));\n};\n\nvar CreateReview = function CreateReview() {\n  var _useMutation = useMutation(CREATE_REVIEW),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      createReview = _useMutation2[0];\n\n  var history = useHistory();\n\n  var onSubmit = function onSubmit(values) {\n    var review, _await$createReview, data;\n\n    return _regeneratorRuntime.async(function onSubmit$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            review = _objectSpread(_objectSpread({}, values), {}, {\n              rating: parseInt(values.rating)\n            });\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(createReview({\n              variables: {\n                review: review\n              }\n            }));\n\n          case 3:\n            _await$createReview = _context.sent;\n            data = _await$createReview.data;\n\n            if (data && data.createReview) {\n              history.push(\"/repositories/\" + data.createReview.repositoryId);\n            }\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(Formik, {\n    initialValues: initialValues,\n    onSubmit: onSubmit,\n    validationSchema: validationSchema,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 5\n    }\n  }, function (_ref2) {\n    var handleSubmit = _ref2.handleSubmit;\n    return React.createElement(CreateReviewForm, {\n      onSubmit: handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 30\n      }\n    });\n  });\n};\n\nexport default CreateReview;","map":{"version":3,"sources":["/home/hejoel/fullstack/fullstack-ht/fullstack-ht/fullstack-ht-app/src/components/CreateReview.jsx"],"names":["React","Formik","yup","useHistory","useMutation","Button","FormikTextInput","CREATE_REVIEW","styles","StyleSheet","create","container","backgroundColor","padding","fieldContainer","marginBottom","initialValues","repositoryName","ownerName","rating","text","validationSchema","object","shape","string","required","number","min","max","CreateReviewForm","onSubmit","CreateReview","createReview","history","values","review","parseInt","variables","data","push","repositoryId","handleSubmit"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport { useHistory } from 'react-router-native';\nimport { useMutation } from '@apollo/react-hooks';\n\nimport Button from './Button';\nimport FormikTextInput from './FormikTextInput';\nimport { CREATE_REVIEW } from '../graphql/mutations';\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'white',\n    padding: 15,\n  },\n  fieldContainer: {\n    marginBottom: 15,\n  },\n});\n\nconst initialValues = {\n  repositoryName: '',\n  ownerName: '',\n  rating: '',\n  text: '',\n};\n\nconst validationSchema = yup.object().shape({\n  repositoryName: yup.string().required('Repository name is required'),\n  ownerName: yup.string().required('Repository owner name is required'),\n  rating: yup\n    .number('Rating must be a number')\n    .min(0, 'Rating must be greater or equal to 0')\n    .max(100, 'Rating must be less or equal to 100')\n    .required('Rating is required'),\n  text: yup.string(),\n});\n\nconst CreateReviewForm = ({ onSubmit }) => {\n  return (\n    <View style={styles.container}>\n      <View style={styles.fieldContainer}>\n        <FormikTextInput placeholder=\"Repository owner name\" name=\"ownerName\" />\n      </View>\n\n      <View style={styles.fieldContainer}>\n        <FormikTextInput placeholder=\"Repository name\" name=\"repositoryName\" />\n      </View>\n\n      <View style={styles.fieldContainer}>\n        <FormikTextInput\n          placeholder=\"Rating between 0 and 100\"\n          keyboardType=\"numeric\"\n          name=\"rating\"\n        />\n      </View>\n\n      <View style={styles.fieldContainer}>\n        <FormikTextInput placeholder=\"Review\" name=\"text\" multiline />\n      </View>\n\n      <Button onPress={onSubmit}>Create a review</Button>\n    </View>\n  );\n};\n\nconst CreateReview = () => {\n  const [createReview] = useMutation(CREATE_REVIEW);\n  const history = useHistory();\n\n  const onSubmit = async (values) => {\n    const review = {\n      ...values,\n      rating: parseInt(values.rating),\n    };\n\n    const { data } = await createReview({ variables: { review } });\n\n    if (data && data.createReview) {\n      history.push(`/repositories/${data.createReview.repositoryId}`);\n    }\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={onSubmit}\n      validationSchema={validationSchema}\n    >\n      {({ handleSubmit }) => <CreateReviewForm onSubmit={handleSubmit} />}\n    </Formik>\n  );\n};\n\nexport default CreateReview;"]},"metadata":{},"sourceType":"module"}