{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport TextInputWithMask from \"../TextInputMask\";\nimport { useTheme } from 'react-native-paper';\n\nfunction CalendarEdit(_ref) {\n  var mode = _ref.mode,\n      state = _ref.state,\n      _ref$label = _ref.label,\n      label = _ref$label === void 0 ? '' : _ref$label,\n      _ref$startLabel = _ref.startLabel,\n      startLabel = _ref$startLabel === void 0 ? 'Start' : _ref$startLabel,\n      _ref$endLabel = _ref.endLabel,\n      endLabel = _ref$endLabel === void 0 ? 'End' : _ref$endLabel,\n      collapsed = _ref.collapsed,\n      _onChange = _ref.onChange;\n  var dateInput = React.useRef(null);\n  var startInput = React.useRef(null);\n  var endInput = React.useRef(null);\n  React.useEffect(function () {\n    if (collapsed) {\n      Keyboard.dismiss();\n    }\n\n    var inputsToFocus = [dateInput.current, startInput.current].filter(function (n) {\n      return n;\n    });\n    var inputsToBlur = [dateInput.current, startInput.current, endInput.current].filter(function (n) {\n      return n;\n    });\n\n    if (collapsed) {\n      inputsToBlur.forEach(function (ip) {\n        return ip.blur();\n      });\n    } else {\n      inputsToFocus.forEach(function (ip) {\n        return ip.focus();\n      });\n    }\n  }, [mode, startInput, endInput, dateInput, collapsed]);\n  var onSubmitStartInput = React.useCallback(function () {\n    if (endInput.current) {\n      endInput.current.focus();\n    }\n  }, [endInput]);\n  var onSubmitEndInput = React.useCallback(function () {}, []);\n  var onSubmitInput = React.useCallback(function () {}, []);\n  return React.createElement(View, {\n    style: styles.root\n  }, React.createElement(View, {\n    style: styles.inner\n  }, mode === 'single' ? React.createElement(CalendarInput, {\n    ref: dateInput,\n    label: label,\n    value: state.date,\n    onChange: function onChange(date) {\n      return _onChange(_objectSpread(_objectSpread({}, state), {}, {\n        date: date\n      }));\n    },\n    onSubmitEditing: onSubmitInput\n  }) : null, mode === 'range' ? React.createElement(React.Fragment, null, React.createElement(CalendarInput, {\n    ref: startInput,\n    label: startLabel,\n    value: state.startDate,\n    onChange: function onChange(startDate) {\n      return _onChange(_objectSpread(_objectSpread({}, state), {}, {\n        startDate: startDate\n      }));\n    },\n    returnKeyType: 'next',\n    onSubmitEditing: onSubmitStartInput\n  }), React.createElement(View, {\n    style: styles.separator\n  }), React.createElement(CalendarInput, {\n    ref: endInput,\n    label: endLabel,\n    value: state.endDate,\n    onChange: function onChange(endDate) {\n      return _onChange(_objectSpread(_objectSpread({}, state), {}, {\n        endDate: endDate\n      }));\n    },\n    isEndDate: true,\n    onSubmitEditing: onSubmitEndInput\n  })) : null));\n}\n\nfunction CalendarInputPure(_ref2, ref) {\n  var label = _ref2.label,\n      value = _ref2.value,\n      onChange = _ref2.onChange,\n      isEndDate = _ref2.isEndDate,\n      returnKeyType = _ref2.returnKeyType,\n      onSubmitEditing = _ref2.onSubmitEditing,\n      locale = _ref2.locale;\n  var theme = useTheme();\n  var formatter = React.useMemo(function () {\n    return new Intl.DateTimeFormat(locale, {\n      month: '2-digit',\n      day: '2-digit',\n      year: 'numeric'\n    });\n  }, [locale]);\n  var inputFormat = React.useMemo(function () {\n    var inputDate = formatter.format(new Date(Date.UTC(2020, 10 - 1, 1)));\n    return inputDate.replace('2020', 'YYYY').replace('10', 'MM').replace('01', 'DD');\n  }, [formatter]);\n  var formattedValue = formatter.format(value);\n\n  var onChangeText = function onChangeText(date) {\n    var dayIndex = inputFormat.indexOf('DD');\n    var monthIndex = inputFormat.indexOf('MM');\n    var yearIndex = inputFormat.indexOf('YYYY');\n    var day = Number(date.slice(dayIndex, dayIndex + 2));\n    var year = Number(date.slice(yearIndex, yearIndex + 4));\n    var month = Number(date.slice(monthIndex, monthIndex + 2));\n\n    if (isEndDate) {\n      onChange(new Date(year, month - 1, day, 23, 59, 59));\n    } else {\n      onChange(new Date(year, month - 1, day));\n    }\n  };\n\n  return React.createElement(TextInputWithMask, {\n    ref: ref,\n    value: formattedValue,\n    style: styles.input,\n    label: \"\".concat(label, \" (\").concat(inputFormat, \")\"),\n    keyboardType: 'number-pad',\n    placeholder: inputFormat,\n    mask: inputFormat,\n    onChangeText: onChangeText,\n    returnKeyType: returnKeyType,\n    onSubmitEditing: onSubmitEditing,\n    keyboardAppearance: theme.dark ? 'dark' : 'default'\n  });\n}\n\nvar CalendarInput = React.forwardRef(CalendarInputPure);\nvar styles = StyleSheet.create({\n  root: {\n    padding: 12\n  },\n  inner: {\n    flexDirection: 'row'\n  },\n  input: {\n    flex: 1\n  },\n  separator: {\n    width: 12\n  }\n});\nexport default React.memo(CalendarEdit);","map":{"version":3,"sources":["CalendarEdit.tsx"],"names":["label","startLabel","endLabel","onChange","dateInput","React","startInput","endInput","Keyboard","inputsToFocus","n","inputsToBlur","ip","onSubmitStartInput","onSubmitEndInput","onSubmitInput","styles","root","inner","state","date","startDate","separator","endDate","locale","theme","useTheme","formatter","Intl","month","day","year","inputFormat","inputDate","Date","formattedValue","onChangeText","dayIndex","monthIndex","yearIndex","Number","CalendarInput","padding","flexDirection","input","flex","width"],"mappings":"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","sourcesContent":["import * as React from 'react'\nimport {\n  View,\n  StyleSheet,\n  TextInput as TextInputNative,\n  Keyboard,\n} from 'react-native'\n\nimport { CalendarDate, ModeType } from './Calendar'\nimport { LocalState } from './DatePickerModalContent'\nimport TextInputWithMask from '../TextInputMask'\nimport { useTheme } from 'react-native-paper'\n\nfunction CalendarEdit({\n  mode,\n  state,\n  label = '',\n  startLabel = 'Start',\n  endLabel = 'End',\n  collapsed,\n  onChange,\n}: {\n  mode: ModeType\n  label?: string\n  startLabel?: string\n  endLabel?: string\n  state: LocalState\n  collapsed: boolean\n  onChange: (s: LocalState) => any\n}) {\n  const dateInput = React.useRef<TextInputNative | null>(null)\n  const startInput = React.useRef<TextInputNative | null>(null)\n  const endInput = React.useRef<TextInputNative | null>(null)\n\n  // when switching views focus, or un-focus text input\n  React.useEffect(() => {\n    // hide open keyboard\n    if (collapsed) {\n      Keyboard.dismiss()\n    }\n\n    const inputsToFocus = [dateInput.current, startInput.current].filter(\n      (n) => n\n    ) as TextInputNative[]\n\n    const inputsToBlur = [\n      dateInput.current,\n      startInput.current,\n      endInput.current,\n    ].filter((n) => n) as TextInputNative[]\n\n    if (collapsed) {\n      inputsToBlur.forEach((ip) => ip.blur())\n    } else {\n      inputsToFocus.forEach((ip) => ip.focus())\n    }\n  }, [mode, startInput, endInput, dateInput, collapsed])\n\n  const onSubmitStartInput = React.useCallback(() => {\n    if (endInput.current) {\n      endInput.current.focus()\n    }\n  }, [endInput])\n\n  const onSubmitEndInput = React.useCallback(() => {\n    // TODO: close modal and persist range\n  }, [])\n\n  const onSubmitInput = React.useCallback(() => {\n    // TODO: close modal and persist range\n  }, [])\n\n  return (\n    <View style={styles.root}>\n      <View style={styles.inner}>\n        {mode === 'single' ? (\n          <CalendarInput\n            ref={dateInput}\n            label={label}\n            value={state.date}\n            onChange={(date) => onChange({ ...state, date })}\n            onSubmitEditing={onSubmitInput}\n          />\n        ) : null}\n        {mode === 'range' ? (\n          <>\n            <CalendarInput\n              ref={startInput}\n              label={startLabel}\n              value={state.startDate}\n              onChange={(startDate) => onChange({ ...state, startDate })}\n              returnKeyType={'next'}\n              onSubmitEditing={onSubmitStartInput}\n            />\n            <View style={styles.separator} />\n            <CalendarInput\n              ref={endInput}\n              label={endLabel}\n              value={state.endDate}\n              onChange={(endDate) => onChange({ ...state, endDate })}\n              isEndDate\n              onSubmitEditing={onSubmitEndInput}\n            />\n          </>\n        ) : null}\n      </View>\n    </View>\n  )\n}\n\nfunction CalendarInputPure(\n  {\n    label,\n    value,\n    onChange,\n    isEndDate,\n    returnKeyType,\n    onSubmitEditing,\n    locale,\n  }: {\n    locale?: undefined | string\n    label: string\n    value: CalendarDate\n    onChange: (d: Date | undefined) => any\n    isEndDate?: boolean\n    returnKeyType?: string\n    onSubmitEditing?: () => any\n  },\n  ref: any\n) {\n  const theme = useTheme()\n  const formatter = React.useMemo(() => {\n    return new Intl.DateTimeFormat(locale, {\n      month: '2-digit',\n      day: '2-digit',\n      year: 'numeric',\n    })\n  }, [locale])\n\n  const inputFormat = React.useMemo(() => {\n    // TODO: something cleaner and more universal?\n    const inputDate = formatter.format(new Date(Date.UTC(2020, 10 - 1, 1)))\n    return inputDate\n      .replace('2020', 'YYYY')\n      .replace('10', 'MM')\n      .replace('01', 'DD')\n  }, [formatter])\n\n  const formattedValue = formatter.format(value)\n  const onChangeText = (date: string) => {\n    const dayIndex = inputFormat.indexOf('DD')\n    const monthIndex = inputFormat.indexOf('MM')\n    const yearIndex = inputFormat.indexOf('YYYY')\n\n    const day = Number(date.slice(dayIndex, dayIndex + 2))\n    const year = Number(date.slice(yearIndex, yearIndex + 4))\n    const month = Number(date.slice(monthIndex, monthIndex + 2))\n    if (isEndDate) {\n      onChange(new Date(year, month - 1, day, 23, 59, 59))\n    } else {\n      onChange(new Date(year, month - 1, day))\n    }\n  }\n  return (\n    <TextInputWithMask\n      ref={ref}\n      value={formattedValue}\n      style={styles.input}\n      label={`${label} (${inputFormat})`}\n      keyboardType={'number-pad'}\n      placeholder={inputFormat}\n      mask={inputFormat}\n      onChangeText={onChangeText}\n      returnKeyType={returnKeyType}\n      onSubmitEditing={onSubmitEditing}\n      keyboardAppearance={theme.dark ? 'dark' : 'default'}\n    />\n  )\n}\n\nconst CalendarInput = React.forwardRef(CalendarInputPure)\n\nconst styles = StyleSheet.create({\n  root: { padding: 12 },\n  inner: { flexDirection: 'row' },\n  input: { flex: 1 },\n  separator: { width: 12 },\n})\n\nexport default React.memo(CalendarEdit)\n"]},"metadata":{},"sourceType":"module"}