{"ast":null,"code":"import * as React from 'react';\n\nfunction getIndicatorStyle(_ref) {\n  var left = _ref.left,\n      width = _ref.width;\n  return {\n    transform: [{\n      scaleX: width\n    }, {\n      translateX: roundToTwo(left / width) || 0\n    }]\n  };\n}\n\nfunction roundToTwo(num) {\n  return Math.round(num * 100 + Number.EPSILON) / 100;\n}\n\nexport function useIndicator(_ref2) {\n  var index = _ref2.index,\n      layouts = _ref2.layouts;\n  var indicatorRef = React.useRef(null);\n  var updateIndicator = React.useCallback(function () {\n    if (!indicatorRef.current || !layouts.current) {\n      return;\n    }\n\n    var cl = layouts.current[index];\n\n    if (cl) {\n      indicatorRef.current.setNativeProps({\n        style: getIndicatorStyle({\n          left: cl.x,\n          width: cl.width\n        })\n      });\n    }\n  }, [index, indicatorRef, layouts]);\n  return [indicatorRef, updateIndicator, null];\n}\nexport function useOffsetScroller(_) {}\nexport function useAnimatedText(_ref3) {\n  var activeColor = _ref3.activeColor,\n      active = _ref3.active,\n      textColor = _ref3.textColor;\n  return React.useMemo(function () {\n    return {\n      color: active ? activeColor : textColor,\n      opacity: active ? 1 : 0.6\n    };\n  }, [active, activeColor, textColor]);\n}","map":{"version":3,"sources":["internal.ts"],"names":["width","transform","scaleX","translateX","roundToTwo","left","Math","num","Number","layouts","indicatorRef","React","updateIndicator","cl","style","getIndicatorStyle","textColor","color","active","opacity"],"mappings":"AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;;AASA,SAAA,iBAAA,OAMc;AAAA,MANa,IAMb,QANa,IAMb;AAAA,MAJZA,KAIY,QAJZA,KAIY;AACZ,SAAO;AACLC,IAAAA,SAAS,EAAE,CACT;AAAEC,MAAAA,MAAM,EAAEF;AAAV,KADS,EAET;AAAEG,MAAAA,UAAU,EAAEC,UAAU,CAACC,IAAI,GAAfD,KAAU,CAAVA,IAA4B;AAA1C,KAFS;AADN,GAAP;AAMD;;AAED,SAAA,UAAA,CAAA,GAAA,EAAiC;AAC/B,SAAOE,IAAI,CAAJA,KAAAA,CAAWC,GAAG,GAAHA,GAAAA,GAAYC,MAAM,CAA7BF,OAAAA,IAAP,GAAA;AACD;;AAED,OAAO,SAAA,YAAA,QAG6B;AAAA,MAHP,KAGO,SAHP,KAGO;AAAA,MADlCG,OACkC,SADlCA,OACkC;AAClC,MAAMC,YAAY,GAAGC,KAAK,CAALA,MAAAA,CAArB,IAAqBA,CAArB;AACA,MAAMC,eAAe,GAAG,KAAK,CAAL,WAAA,CAAkB,YAAM;AAC9C,QAAI,CAACF,YAAY,CAAb,OAAA,IAAyB,CAACD,OAAO,CAArC,OAAA,EAA+C;AAC7C;AACD;;AACD,QAAMI,EAAE,GAAGJ,OAAO,CAAPA,OAAAA,CAAX,KAAWA,CAAX;;AACA,QAAA,EAAA,EAAQ;AACNC,MAAAA,YAAY,CAAZA,OAAAA,CAAAA,cAAAA,CAAoC;AAClCI,QAAAA,KAAK,EAAEC,iBAAiB,CAAC;AAAEV,UAAAA,IAAI,EAAEQ,EAAE,CAAV,CAAA;AAAcb,UAAAA,KAAK,EAAEa,EAAE,CAACb;AAAxB,SAAD;AADU,OAApCU;AAGD;AATqB,GAAA,EAUrB,CAAA,KAAA,EAAA,YAAA,EAVH,OAUG,CAVqB,CAAxB;AAYA,SAAO,CAAA,YAAA,EAAA,eAAA,EAAP,IAAO,CAAP;AACD;AAED,OAAO,SAAA,iBAAA,CAAA,CAAA,EAAgD,CAAE;AACzD,OAAO,SAAA,eAAA,QAI0B;AAAA,MAJD,WAIC,SAJD,WAIC;AAAA,MAJD,MAIC,SAJD,MAIC;AAAA,MAD/BM,SAC+B,SAD/BA,SAC+B;AAC/B,SAAO,KAAK,CAAL,OAAA,CACL;AAAA,WAAO;AACLC,MAAAA,KAAK,EAAEC,MAAM,GAAA,WAAA,GADR,SAAA;AAELC,MAAAA,OAAO,EAAED,MAAM,GAAA,CAAA,GAAO;AAFjB,KAAP;AAAA,GADK,EAKL,CAAA,MAAA,EAAA,WAAA,EALF,SAKE,CALK,CAAP;AAOD","sourcesContent":["import * as React from 'react';\nimport type { TextStyle, View, ViewStyle } from 'react-native';\nimport type {\n  AnimatedColorArgs,\n  IndicatorArgs,\n  IndicatorReturns,\n  OffsetScrollArgs,\n} from './utils';\n\nfunction getIndicatorStyle({\n  left,\n  width,\n}: {\n  left: number;\n  width: number;\n}): ViewStyle {\n  return {\n    transform: [\n      { scaleX: width },\n      { translateX: roundToTwo(left / width) || 0 },\n    ],\n  };\n}\n\nfunction roundToTwo(num: number) {\n  return Math.round(num * 100 + Number.EPSILON) / 100;\n}\n\nexport function useIndicator({\n  index,\n  layouts,\n}: IndicatorArgs): IndicatorReturns {\n  const indicatorRef = React.useRef<View>(null);\n  const updateIndicator = React.useCallback(() => {\n    if (!indicatorRef.current || !layouts.current) {\n      return;\n    }\n    const cl = layouts.current[index];\n    if (cl) {\n      indicatorRef.current.setNativeProps({\n        style: getIndicatorStyle({ left: cl.x, width: cl.width }),\n      });\n    }\n  }, [index, indicatorRef, layouts]);\n\n  return [indicatorRef, updateIndicator, null];\n}\n\nexport function useOffsetScroller(_: OffsetScrollArgs) {}\nexport function useAnimatedText({\n  activeColor,\n  active,\n  textColor,\n}: AnimatedColorArgs): TextStyle {\n  return React.useMemo(\n    () => ({\n      color: active ? activeColor : textColor,\n      opacity: active ? 1 : 0.6,\n    }),\n    [active, activeColor, textColor]\n  );\n}\n"]},"metadata":{},"sourceType":"module"}