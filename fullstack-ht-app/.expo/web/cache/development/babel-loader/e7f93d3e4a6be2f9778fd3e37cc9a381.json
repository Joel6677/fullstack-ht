{"ast":null,"code":"import * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { useWindowDimensions } from \"react-native-web/dist/index\";\nimport { inputTypes, toHourInputFormat, toHourOutputFormat } from \"./timeUtils\";\nimport AnalogClock, { circleSize } from \"./AnalogClock\";\nimport TimeInputs from \"./TimeInputs\";\n\nfunction TimePicker(_ref) {\n  var hours = _ref.hours,\n      minutes = _ref.minutes,\n      onFocusInput = _ref.onFocusInput,\n      focused = _ref.focused,\n      inputType = _ref.inputType,\n      onChange = _ref.onChange,\n      locale = _ref.locale;\n  var dimensions = useWindowDimensions();\n  var isLandscape = dimensions.width > dimensions.height;\n  var is24Hour = React.useMemo(function () {\n    var formatter = new Intl.DateTimeFormat(locale, {\n      hour: '2-digit',\n      minute: '2-digit',\n      timeZone: 'UTC'\n    });\n    var formatted = formatter.format(new Date(Date.UTC(2020, 1, 1, 23)));\n    return formatted.includes('23');\n  }, [locale]);\n  var onInnerChange = React.useCallback(function (params) {\n    params.hours = toHourOutputFormat(params.hours, hours, is24Hour);\n    onChange(params);\n  }, [onChange, hours, is24Hour]);\n  return React.createElement(View, {\n    style: isLandscape ? styles.rootLandscape : styles.rootPortrait\n  }, React.createElement(TimeInputs, {\n    inputType: inputType,\n    hours: hours,\n    minutes: minutes,\n    is24Hour: is24Hour,\n    onChange: onChange,\n    onFocusInput: onFocusInput,\n    focused: focused\n  }), inputType === inputTypes.picker ? React.createElement(View, {\n    style: styles.clockContainer\n  }, React.createElement(AnalogClock, {\n    hours: toHourInputFormat(hours, is24Hour),\n    minutes: minutes,\n    focused: focused,\n    is24Hour: is24Hour,\n    onChange: onInnerChange\n  })) : null);\n}\n\nvar styles = StyleSheet.create({\n  rootLandscape: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    width: 24 * 3 + 96 * 2 + 52 + circleSize\n  },\n  rootPortrait: {},\n  clockContainer: {\n    paddingTop: 36,\n    paddingLeft: 12,\n    paddingRight: 12\n  }\n});\nexport default React.memo(TimePicker);","map":{"version":3,"sources":["TimePicker.tsx"],"names":["locale","dimensions","useWindowDimensions","isLandscape","is24Hour","formatter","Intl","hour","minute","timeZone","formatted","Date","onInnerChange","params","toHourOutputFormat","onChange","styles","rootPortrait","focused","inputTypes","clockContainer","toHourInputFormat","rootLandscape","flexDirection","alignItems","justifyContent","width","circleSize","paddingTop","paddingLeft","paddingRight","React"],"mappings":"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","sourcesContent":["import * as React from 'react'\nimport { View, StyleSheet, useWindowDimensions } from 'react-native'\n\nimport {\n  inputTypes,\n  PossibleClockTypes,\n  PossibleInputTypes,\n  toHourInputFormat,\n  toHourOutputFormat,\n} from './timeUtils'\n\nimport AnalogClock, { circleSize } from './AnalogClock'\nimport TimeInputs from './TimeInputs'\n\ntype onChangeFunc = ({\n  hours,\n  minutes,\n  focused,\n}: {\n  hours: number\n  minutes: number\n  focused?: undefined | PossibleClockTypes\n}) => any\n\nfunction TimePicker({\n  hours,\n  minutes,\n  onFocusInput,\n  focused,\n  inputType,\n  onChange,\n  locale,\n}: {\n  locale?: undefined | string\n  inputType: PossibleInputTypes\n  focused: PossibleClockTypes\n  hours: number\n  minutes: number\n  onFocusInput: (type: PossibleClockTypes) => any\n  onChange: onChangeFunc\n}) {\n  const dimensions = useWindowDimensions()\n  const isLandscape = dimensions.width > dimensions.height\n\n  // method to check whether we have 24 hours in clock or 12\n  const is24Hour = React.useMemo(() => {\n    const formatter = new Intl.DateTimeFormat(locale, {\n      hour: '2-digit',\n      minute: '2-digit',\n      timeZone: 'UTC',\n    })\n    const formatted = formatter.format(new Date(Date.UTC(2020, 1, 1, 23)))\n    return formatted.includes('23')\n  }, [locale])\n\n  const onInnerChange = React.useCallback<onChangeFunc>(\n    (params) => {\n      params.hours = toHourOutputFormat(params.hours, hours, is24Hour)\n      onChange(params)\n    },\n    [onChange, hours, is24Hour]\n  )\n\n  return (\n    <View style={isLandscape ? styles.rootLandscape : styles.rootPortrait}>\n      <TimeInputs\n        inputType={inputType}\n        hours={hours}\n        minutes={minutes}\n        is24Hour={is24Hour}\n        onChange={onChange}\n        onFocusInput={onFocusInput}\n        focused={focused}\n      />\n      {inputType === inputTypes.picker ? (\n        <View style={styles.clockContainer}>\n          <AnalogClock\n            hours={toHourInputFormat(hours, is24Hour)}\n            minutes={minutes}\n            focused={focused}\n            is24Hour={is24Hour}\n            onChange={onInnerChange}\n          />\n        </View>\n      ) : null}\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  rootLandscape: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    width: 24 * 3 + 96 * 2 + 52 + circleSize,\n  },\n  rootPortrait: {},\n  clockContainer: { paddingTop: 36, paddingLeft: 12, paddingRight: 12 },\n})\n\nexport default React.memo(TimePicker)\n"]},"metadata":{},"sourceType":"module"}