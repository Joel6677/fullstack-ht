{"ast":null,"code":"import * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { IconButton, Text, useTheme, TouchableRipple } from 'react-native-paper';\nimport Day, { EmptyDay } from \"./Day\";\nimport { addMonths, areDatesOnSameDay, daySize, getDaysInMonth, getFirstDayOfMonth, getRealIndex, getGridCount, isDateBetween, gridCounts, showWeekDay, startAtIndex, beginOffset, estimatedMonthHeight } from \"./dateUtils\";\nimport { getCalendarHeaderHeight } from \"./CalendarHeader\";\nimport { dayNamesHeight } from \"./DayNames\";\nimport { useTextColorOnPrimary } from \"../utils\";\n\nfunction Month(_ref) {\n  var index = _ref.index,\n      mode = _ref.mode,\n      date = _ref.date,\n      startDate = _ref.startDate,\n      endDate = _ref.endDate,\n      onPressYear = _ref.onPressYear,\n      selectingYear = _ref.selectingYear,\n      onPressDate = _ref.onPressDate,\n      scrollMode = _ref.scrollMode,\n      primaryColor = _ref.primaryColor,\n      selectColor = _ref.selectColor,\n      roundness = _ref.roundness,\n      disableWeekDays = _ref.disableWeekDays,\n      excludedDates = _ref.excludedDates,\n      locale = _ref.locale,\n      dates = _ref.dates;\n  var theme = useTheme();\n  var textColorOnPrimary = useTextColorOnPrimary();\n  var realIndex = getRealIndex(index);\n  var isHorizontal = scrollMode === 'horizontal';\n\n  var _React$useMemo = React.useMemo(function () {\n    var md = addMonths(new Date(), realIndex);\n    var y = md.getFullYear();\n    var m = md.getMonth();\n    var formatter = new Intl.DateTimeFormat(locale, {\n      month: 'long'\n    });\n    return {\n      monthName: formatter.format(md),\n      month: m,\n      year: y\n    };\n  }, [realIndex, locale]),\n      monthName = _React$useMemo.monthName,\n      month = _React$useMemo.month,\n      year = _React$useMemo.year;\n\n  var grid = React.useMemo(function () {\n    var today = new Date();\n    var daysInMonth = getDaysInMonth({\n      year: year,\n      month: month\n    });\n    var dayOfWeek = getFirstDayOfMonth({\n      year: year,\n      month: month\n    });\n    var emptyDays = dayOfWeek;\n    return monthGrid(index).map(function (_ref2) {\n      var days = _ref2.days,\n          weekGrid = _ref2.weekGrid;\n      return {\n        weekIndex: weekGrid,\n        generatedDays: days.map(function (_, dayIndex) {\n          var isFirstWeek = weekGrid === 0;\n          var realDayIndex = emptyDays - dayIndex;\n          var beforeWeekDay = isFirstWeek && realDayIndex > 0;\n          var dayOfMonth = weekGrid * 7 + dayIndex - emptyDays + 1;\n          var afterWeekDay = dayOfMonth > daysInMonth;\n          var day = new Date(year, month, dayOfMonth);\n          var isToday = areDatesOnSameDay(day, today);\n          var selectedStartDay = areDatesOnSameDay(day, startDate);\n          var selectedEndDay = areDatesOnSameDay(day, endDate);\n          var selectedDay = areDatesOnSameDay(day, date);\n          var multiDates = dates;\n          var selectedMultiDay = !!(multiDates !== null && multiDates !== void 0 && multiDates.some(function (d) {\n            return areDatesOnSameDay(day, d);\n          }));\n          var disabled = mode === 'excludeInRange';\n          var selected = mode === 'range' || mode === 'excludeInRange' ? selectedStartDay || selectedEndDay : selectedDay;\n\n          if (mode === 'multiple') {\n            selected = selectedMultiDay;\n          }\n\n          var inRange = mode === 'range' || mode === 'excludeInRange' ? isDateBetween(day, {\n            startDate: startDate,\n            endDate: endDate\n          }) : false;\n\n          if (inRange) {\n            disabled = false;\n          }\n\n          var leftCrop = selectedStartDay || dayOfMonth === 1;\n          var rightCrop = selectedEndDay || dayOfMonth === daysInMonth;\n          var excluded = false;\n\n          if (excludedDates) {\n            if (excludedDates.some(function (ed) {\n              return areDatesOnSameDay(day, ed);\n            })) {\n              excluded = true;\n              inRange = false;\n              selected = false;\n            } else {\n              var yesterday = new Date(year, month, dayOfMonth - 1);\n              var tomorrow = new Date(year, month, dayOfMonth + 1);\n\n              if (excludedDates.some(function (ed) {\n                return areDatesOnSameDay(yesterday, ed);\n              })) {\n                leftCrop = true;\n              }\n\n              if (excludedDates.some(function (ed) {\n                return areDatesOnSameDay(tomorrow, ed);\n              })) {\n                rightCrop = true;\n              }\n            }\n          }\n\n          if (dayIndex === 0 && !selectedStartDay) {\n            leftCrop = false;\n          }\n\n          if (dayIndex === 6 && !selectedEndDay) {\n            rightCrop = false;\n          }\n\n          if (dayOfMonth === 1 && selectedEndDay || dayOfMonth === daysInMonth && selectedStartDay) {\n            inRange = false;\n          }\n\n          return {\n            beforeWeekDay: beforeWeekDay,\n            afterWeekDay: afterWeekDay,\n            year: year,\n            month: month,\n            dayOfMonth: dayOfMonth,\n            dayIndex: dayIndex,\n            mode: mode,\n            selected: selected,\n            inRange: inRange,\n            leftCrop: leftCrop,\n            rightCrop: rightCrop,\n            isToday: isToday,\n            disabled: disabled,\n            excluded: excluded\n          };\n        })\n      };\n    });\n  }, [year, month, index, startDate, endDate, date, dates, mode, excludedDates]);\n  return React.createElement(View, {\n    style: [styles.month, {\n      height: getMonthHeight(scrollMode, index)\n    }]\n  }, React.createElement(View, {\n    style: [styles.monthHeader, isHorizontal ? {\n      marginTop: monthHeaderSingleMarginTop,\n      marginBottom: monthHeaderSingleMarginBottom\n    } : null]\n  }, React.createElement(TouchableRipple, {\n    disabled: !isHorizontal,\n    onPress: isHorizontal ? function () {\n      return onPressYear(year);\n    } : undefined,\n    style: [styles.yearButton, {\n      borderRadius: roundness\n    }]\n  }, React.createElement(View, {\n    style: [styles.yearButtonInner, {\n      borderRadius: roundness\n    }]\n  }, React.createElement(Text, {\n    style: [styles.monthLabel, theme.fonts.medium],\n    selectable: false\n  }, monthName, \" \", year), React.createElement(View, {\n    style: isHorizontal ? styles.opacity1 : styles.opacity0\n  }, React.createElement(IconButton, {\n    onPress: isHorizontal ? function () {\n      return onPressYear(year);\n    } : undefined,\n    icon: selectingYear ? 'chevron-up' : 'chevron-down'\n  }))))), grid.map(function (_ref3) {\n    var weekIndex = _ref3.weekIndex,\n        generatedDays = _ref3.generatedDays;\n    return React.createElement(View, {\n      style: styles.week,\n      key: weekIndex\n    }, generatedDays.filter(function (gd) {\n      return showWeekDay(gd.dayIndex, disableWeekDays);\n    }).map(function (gd) {\n      return gd.beforeWeekDay || gd.afterWeekDay ? React.createElement(EmptyDay, {\n        key: gd.dayIndex\n      }) : React.createElement(Day, {\n        key: gd.dayIndex,\n        day: gd.dayOfMonth,\n        month: gd.month,\n        year: gd.year,\n        selected: gd.selected,\n        inRange: gd.inRange,\n        leftCrop: gd.leftCrop,\n        rightCrop: gd.rightCrop,\n        onPressDate: onPressDate,\n        isToday: gd.isToday,\n        selectColor: selectColor,\n        primaryColor: primaryColor,\n        disabled: gd.disabled,\n        excluded: gd.excluded,\n        textColorOnPrimary: textColorOnPrimary\n      });\n    }));\n  }));\n}\n\nexport var weekMargin = 6;\nexport var weekSize = daySize + weekMargin;\nexport var montHeaderHeight = 56;\nexport var monthHeaderSingleMarginTop = 4;\nexport var monthHeaderSingleMarginBottom = 8 + 44 + 12;\nexport var monthHeaderSingleHeight = monthHeaderSingleMarginTop + monthHeaderSingleMarginBottom;\nvar styles = StyleSheet.create({\n  week: {\n    flexDirection: 'row',\n    marginBottom: weekMargin,\n    height: daySize\n  },\n  month: {},\n  monthHeader: {\n    height: montHeaderHeight,\n    justifyContent: 'center',\n    overflow: 'hidden'\n  },\n  monthLabel: {\n    fontSize: 14,\n    opacity: 0.7\n  },\n  yearButton: {\n    alignSelf: 'flex-start',\n    marginLeft: 6\n  },\n  yearButtonInner: {\n    paddingLeft: 16,\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  opacity0: {\n    opacity: 0\n  },\n  opacity1: {\n    opacity: 1\n  }\n});\n\nvar monthGrid = function monthGrid(index) {\n  return Array(getGridCount(index)).fill(null).map(function (_, weekGrid) {\n    var days = Array(7).fill(null);\n    return {\n      weekGrid: weekGrid,\n      days: days\n    };\n  });\n};\n\nfunction getIndexCount(index) {\n  if (index > startAtIndex) {\n    return index - startAtIndex;\n  }\n\n  return -(startAtIndex - index);\n}\n\nfunction weeksOffset(index) {\n  if (index === startAtIndex) {\n    return 0;\n  }\n\n  var off = 0;\n\n  if (index > startAtIndex) {\n    for (var i = 0; i < index - startAtIndex; i++) {\n      var cIndex = startAtIndex + i;\n      off += gridCounts[cIndex] || getGridCount(cIndex);\n    }\n  } else {\n    for (var _i = 0; _i < startAtIndex - index; _i++) {\n      var _cIndex = startAtIndex - _i;\n\n      off -= gridCounts[_cIndex] || getGridCount(_cIndex);\n    }\n  }\n\n  return off;\n}\n\nexport function getIndexFromHorizontalOffset(offset, width) {\n  return startAtIndex + Math.floor(offset / width);\n}\nexport function getIndexFromVerticalOffset(offset) {\n  var estimatedIndex = startAtIndex + Math.ceil(offset / estimatedMonthHeight);\n  var realOffset = getVerticalMonthsOffset(estimatedIndex);\n  var difference = (realOffset - beginOffset - offset) / estimatedMonthHeight;\n\n  if (difference >= 1 || difference <= -1) {\n    estimatedIndex -= Math.floor(difference);\n  }\n\n  return estimatedIndex;\n}\nexport function getHorizontalMonthOffset(index, width) {\n  if (index < 0) {\n    return 0;\n  }\n\n  return width * index;\n}\nexport function getVerticalMonthsOffset(index) {\n  var count = getIndexCount(index);\n  var ob = weeksOffset(index);\n  var monthsHeight = weekSize * ob;\n  var c = monthsHeight + count * (dayNamesHeight + montHeaderHeight);\n  return (c || 0) + beginOffset;\n}\nexport function getMonthHeight(scrollMode, index) {\n  var calendarHeight = getCalendarHeaderHeight(scrollMode);\n  var gc = getGridCount(index);\n  var currentMonthHeight = weekSize * gc;\n  var extraHeight = scrollMode === 'horizontal' ? monthHeaderSingleHeight : montHeaderHeight;\n  var c = calendarHeight + currentMonthHeight + extraHeight;\n  return c || 0;\n}\nexport default React.memo(Month);","map":{"version":3,"sources":["Month.tsx"],"names":["dates","theme","useTheme","textColorOnPrimary","useTextColorOnPrimary","realIndex","getRealIndex","isHorizontal","scrollMode","year","md","addMonths","y","m","formatter","Intl","month","monthName","grid","today","daysInMonth","getDaysInMonth","dayOfWeek","getFirstDayOfMonth","emptyDays","weekGrid","weekIndex","generatedDays","isFirstWeek","realDayIndex","beforeWeekDay","dayOfMonth","afterWeekDay","day","isToday","areDatesOnSameDay","selectedStartDay","selectedEndDay","selectedDay","multiDates","selectedMultiDay","d","disabled","mode","selected","inRange","isDateBetween","startDate","endDate","leftCrop","rightCrop","excluded","excludedDates","ed","yesterday","tomorrow","dayIndex","styles","height","getMonthHeight","marginTop","marginBottom","monthHeaderSingleMarginBottom","onPressYear","borderRadius","roundness","opacity0","selectingYear","gd","showWeekDay","weekMargin","weekSize","daySize","montHeaderHeight","monthHeaderSingleMarginTop","monthHeaderSingleHeight","week","flexDirection","monthHeader","justifyContent","overflow","monthLabel","fontSize","opacity","yearButton","alignSelf","marginLeft","yearButtonInner","paddingLeft","alignItems","opacity1","monthGrid","index","getGridCount","days","Array","startAtIndex","off","i","cIndex","gridCounts","Math","offset","estimatedIndex","realOffset","getVerticalMonthsOffset","difference","width","count","getIndexCount","ob","weeksOffset","monthsHeight","c","dayNamesHeight","calendarHeight","getCalendarHeaderHeight","gc","currentMonthHeight","extraHeight","React"],"mappings":"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","sourcesContent":["import * as React from 'react'\nimport { StyleSheet, View } from 'react-native'\nimport { IconButton, Text, useTheme, TouchableRipple } from 'react-native-paper'\nimport Day, { EmptyDay } from './Day'\n\nimport {\n  addMonths,\n  areDatesOnSameDay,\n  daySize,\n  DisableWeekDaysType,\n  getDaysInMonth,\n  getFirstDayOfMonth,\n  getRealIndex,\n  getGridCount,\n  isDateBetween,\n  gridCounts,\n  showWeekDay,\n  startAtIndex,\n  beginOffset,\n  estimatedMonthHeight,\n} from './dateUtils'\nimport { getCalendarHeaderHeight } from './CalendarHeader'\nimport { ModeType } from './Calendar'\nimport { dayNamesHeight } from './DayNames'\nimport { useTextColorOnPrimary } from '../utils'\n\ninterface BaseMonthProps {\n  locale: undefined | string\n  scrollMode: 'horizontal' | 'vertical'\n  disableWeekDays?: DisableWeekDaysType\n  mode: ModeType\n  date?: Date | null | undefined\n  startDate?: Date | null | undefined\n  endDate?: Date | null | undefined\n  excludedDates?: Date[]\n  index: number\n  onPressYear: (year: number) => any\n  selectingYear: boolean\n  onPressDate: (date: Date) => any\n  primaryColor: string\n  selectColor: string\n  roundness: number\n}\n\ninterface MonthRangeProps extends BaseMonthProps {\n  mode: 'range'\n  startDate: Date | null | undefined\n  endDate: Date | null | undefined\n}\n\ninterface MonthSingleProps extends BaseMonthProps {\n  mode: 'single'\n  date?: Date | null | undefined\n}\n\ninterface MonthMultiProps extends BaseMonthProps {\n  mode: 'multiple'\n  dates?: Date[] | null | undefined\n}\n\ninterface MonthExcludeInRangeProps extends BaseMonthProps {\n  mode: 'excludeInRange'\n  startDate: Date\n  endDate: Date\n}\n\nfunction Month({\n  index,\n  mode,\n  date,\n  startDate,\n  endDate,\n  onPressYear,\n  selectingYear,\n  onPressDate,\n  scrollMode,\n  primaryColor,\n  selectColor,\n  roundness,\n  disableWeekDays,\n  excludedDates,\n  locale,\n  // @ts-ignore\n  dates,\n}:\n  | MonthSingleProps\n  | MonthRangeProps\n  | MonthExcludeInRangeProps\n  | MonthMultiProps) {\n  const theme = useTheme()\n  const textColorOnPrimary = useTextColorOnPrimary()\n  const realIndex = getRealIndex(index)\n  const isHorizontal = scrollMode === 'horizontal'\n\n  const { monthName, month, year } = React.useMemo(() => {\n    const md = addMonths(new Date(), realIndex)\n    const y = md.getFullYear()\n    const m = md.getMonth()\n    const formatter = new Intl.DateTimeFormat(locale, {\n      month: 'long',\n    })\n    return { monthName: formatter.format(md), month: m, year: y }\n  }, [realIndex, locale])\n\n  const grid = React.useMemo(() => {\n    const today = new Date()\n\n    const daysInMonth = getDaysInMonth({ year, month })\n    const dayOfWeek = getFirstDayOfMonth({ year, month })\n    const emptyDays = dayOfWeek\n\n    return monthGrid(index).map(({ days, weekGrid }) => {\n      return {\n        weekIndex: weekGrid,\n        generatedDays: days.map((_, dayIndex) => {\n          const isFirstWeek = weekGrid === 0\n          const realDayIndex = emptyDays - dayIndex\n          const beforeWeekDay = isFirstWeek && realDayIndex > 0\n          const dayOfMonth = weekGrid * 7 + dayIndex - emptyDays + 1\n          const afterWeekDay = dayOfMonth > daysInMonth\n\n          const day = new Date(year, month, dayOfMonth)\n          const isToday = areDatesOnSameDay(day, today)\n          const selectedStartDay = areDatesOnSameDay(day, startDate)\n          const selectedEndDay = areDatesOnSameDay(day, endDate)\n          const selectedDay = areDatesOnSameDay(day, date)\n\n          const multiDates = dates as Date[] | undefined\n\n          const selectedMultiDay = !!multiDates?.some((d) =>\n            areDatesOnSameDay(day, d)\n          )\n\n          let disabled = mode === 'excludeInRange'\n          let selected =\n            mode === 'range' || mode === 'excludeInRange'\n              ? selectedStartDay || selectedEndDay\n              : selectedDay\n          if (mode === 'multiple') {\n            selected = selectedMultiDay\n          }\n          let inRange =\n            mode === 'range' || mode === 'excludeInRange'\n              ? isDateBetween(day, {\n                  startDate,\n                  endDate,\n                })\n              : false\n\n          if (inRange) {\n            disabled = false\n          }\n\n          let leftCrop: boolean = selectedStartDay || dayOfMonth === 1\n          let rightCrop: boolean = selectedEndDay || dayOfMonth === daysInMonth\n\n          let excluded = false\n          if (excludedDates) {\n            if (excludedDates.some((ed) => areDatesOnSameDay(day, ed))) {\n              excluded = true\n              inRange = false\n              selected = false\n            } else {\n              const yesterday = new Date(year, month, dayOfMonth - 1)\n              const tomorrow = new Date(year, month, dayOfMonth + 1)\n              if (\n                excludedDates.some((ed) => areDatesOnSameDay(yesterday, ed))\n              ) {\n                leftCrop = true\n              }\n              if (excludedDates.some((ed) => areDatesOnSameDay(tomorrow, ed))) {\n                rightCrop = true\n              }\n            }\n          }\n\n          if (dayIndex === 0 && !selectedStartDay) {\n            leftCrop = false\n          }\n\n          if (dayIndex === 6 && !selectedEndDay) {\n            rightCrop = false\n          }\n\n          if (\n            (dayOfMonth === 1 && selectedEndDay) ||\n            (dayOfMonth === daysInMonth && selectedStartDay)\n          ) {\n            inRange = false\n          }\n\n          return {\n            beforeWeekDay,\n            afterWeekDay,\n            year,\n            month,\n            dayOfMonth,\n            dayIndex,\n            mode,\n            selected,\n            inRange,\n            leftCrop,\n            rightCrop,\n            isToday,\n            disabled,\n            excluded,\n          }\n        }),\n      }\n    })\n  }, [year, month, index, startDate, endDate, date, dates, mode, excludedDates])\n\n  return (\n    <View style={[styles.month, { height: getMonthHeight(scrollMode, index) }]}>\n      <View\n        style={[\n          styles.monthHeader,\n          isHorizontal\n            ? {\n                marginTop: monthHeaderSingleMarginTop,\n                marginBottom: monthHeaderSingleMarginBottom,\n              }\n            : null,\n        ]}\n      >\n        <TouchableRipple\n          disabled={!isHorizontal}\n          onPress={isHorizontal ? () => onPressYear(year) : undefined}\n          style={[\n            styles.yearButton,\n            {\n              borderRadius: roundness,\n            },\n          ]}\n        >\n          <View\n            style={[\n              styles.yearButtonInner,\n              {\n                borderRadius: roundness,\n              },\n            ]}\n          >\n            <Text\n              style={[styles.monthLabel, theme.fonts.medium]}\n              selectable={false}\n            >\n              {monthName} {year}\n            </Text>\n            <View style={isHorizontal ? styles.opacity1 : styles.opacity0}>\n              <IconButton\n                onPress={isHorizontal ? () => onPressYear(year) : undefined}\n                icon={selectingYear ? 'chevron-up' : 'chevron-down'}\n              />\n            </View>\n          </View>\n        </TouchableRipple>\n      </View>\n\n      {grid.map(({ weekIndex, generatedDays }) => (\n        <View style={styles.week} key={weekIndex}>\n          {generatedDays\n            .filter((gd) => showWeekDay(gd.dayIndex, disableWeekDays))\n            .map((gd) =>\n              gd.beforeWeekDay || gd.afterWeekDay ? (\n                <EmptyDay key={gd.dayIndex} />\n              ) : (\n                <Day\n                  key={gd.dayIndex}\n                  day={gd.dayOfMonth}\n                  month={gd.month}\n                  year={gd.year}\n                  selected={gd.selected}\n                  inRange={gd.inRange}\n                  leftCrop={gd.leftCrop}\n                  rightCrop={gd.rightCrop}\n                  onPressDate={onPressDate}\n                  isToday={gd.isToday}\n                  selectColor={selectColor}\n                  primaryColor={primaryColor}\n                  disabled={gd.disabled}\n                  excluded={gd.excluded}\n                  textColorOnPrimary={textColorOnPrimary}\n                />\n              )\n            )}\n        </View>\n      ))}\n    </View>\n  )\n}\n\nexport const weekMargin = 6\nexport const weekSize = daySize + weekMargin\nexport const montHeaderHeight = 56\nexport const monthHeaderSingleMarginTop = 4\nexport const monthHeaderSingleMarginBottom = 8 + 44 + 12\nexport const monthHeaderSingleHeight =\n  monthHeaderSingleMarginTop + monthHeaderSingleMarginBottom\n\nconst styles = StyleSheet.create({\n  week: {\n    flexDirection: 'row',\n    marginBottom: weekMargin,\n    height: daySize,\n  },\n\n  month: {},\n\n  monthHeader: {\n    height: montHeaderHeight,\n    justifyContent: 'center',\n    overflow: 'hidden',\n  },\n  monthLabel: { fontSize: 14, opacity: 0.7 },\n  yearButton: { alignSelf: 'flex-start', marginLeft: 6 },\n  yearButtonInner: {\n    paddingLeft: 16,\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  opacity0: { opacity: 0 },\n  opacity1: { opacity: 1 },\n})\n\nconst monthGrid = (index: number) => {\n  return Array(getGridCount(index))\n    .fill(null)\n    .map((_, weekGrid) => {\n      const days = Array(7).fill(null)\n      return { weekGrid, days }\n    })\n}\n\nfunction getIndexCount(index: number): number {\n  if (index > startAtIndex) {\n    return index - startAtIndex\n  }\n\n  return -(startAtIndex - index)\n}\n\nfunction weeksOffset(index: number): number {\n  if (index === startAtIndex) {\n    return 0\n  }\n  let off = 0\n  if (index > startAtIndex) {\n    for (let i = 0; i < index - startAtIndex; i++) {\n      const cIndex = startAtIndex + i\n      off += gridCounts[cIndex] || getGridCount(cIndex)\n    }\n  } else {\n    for (let i = 0; i < startAtIndex - index; i++) {\n      const cIndex = startAtIndex - i\n      off -= gridCounts[cIndex] || getGridCount(cIndex)\n    }\n  }\n  return off\n}\n\nexport function getIndexFromHorizontalOffset(\n  offset: number,\n  width: number\n): number {\n  return startAtIndex + Math.floor(offset / width)\n}\n\nexport function getIndexFromVerticalOffset(offset: number): number {\n  let estimatedIndex = startAtIndex + Math.ceil(offset / estimatedMonthHeight)\n\n  const realOffset = getVerticalMonthsOffset(estimatedIndex)\n  const difference = (realOffset - beginOffset - offset) / estimatedMonthHeight\n  if (difference >= 1 || difference <= -1) {\n    estimatedIndex -= Math.floor(difference)\n  }\n  return estimatedIndex\n}\n\nexport function getHorizontalMonthOffset(index: number, width: number) {\n  if (index < 0) {\n    return 0\n  }\n  return width * index\n}\n\nexport function getVerticalMonthsOffset(index: number) {\n  const count = getIndexCount(index)\n  const ob = weeksOffset(index)\n  const monthsHeight = weekSize * ob\n  const c = monthsHeight + count * (dayNamesHeight + montHeaderHeight)\n  return (c || 0) + beginOffset\n}\n\nexport function getMonthHeight(\n  scrollMode: 'horizontal' | 'vertical',\n  index: number\n): number {\n  const calendarHeight = getCalendarHeaderHeight(scrollMode)\n  const gc = getGridCount(index)\n\n  const currentMonthHeight = weekSize * gc\n  const extraHeight =\n    scrollMode === 'horizontal' ? monthHeaderSingleHeight : montHeaderHeight\n  const c = calendarHeight + currentMonthHeight + extraHeight\n  return c || 0\n}\n\nexport default React.memo(Month)\n"]},"metadata":{},"sourceType":"module"}