{"ast":null,"code":"var _jsxFileName = \"/home/hejoel/fullstack/fullstack-ht/fullstack-ht/fullstack-ht-app/src/components/SideMenu.jsx\";\nimport React, { useContext, useEffect, useRef } from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { ToggleButton } from 'react-native-paper';\nimport { IconButton } from 'react-native-paper';\nimport { StateContext } from \"../state\";\nimport Button from \"./Button\";\nimport theme from \"../theme\";\nimport Constants from 'expo-constants';\nvar styles = StyleSheet.create({\n  sidebar: {\n    width: 200,\n    height: '100%',\n    backgroundColor: \"blue\",\n    position: 'fixed',\n    top: 56\n  },\n  button: {\n    padding: 10\n  },\n  scrollView: {\n    flexDirection: 'row'\n  }\n});\nexport var MMenu = function MMenu() {};\n\nvar SideMenu = function SideMenu() {\n  var toggleAnim = useRef(new Animated.Value(0)).current;\n\n  var _useContext = useContext(StateContext),\n      state = _useContext.state,\n      dispatch = _useContext.dispatch;\n\n  var moveMenu = function moveMenu() {\n    Animated.spring(toggleAnim, {\n      toValue: state.open ? 0 : -200\n    }).start();\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(Animated.View, {\n    style: [styles.sidebar, {\n      transform: [{\n        translateX: toggleAnim\n      }]\n    }]\n  }, React.createElement(View, {\n    style: styles.button\n  }, React.createElement(Button, {\n    color: \"error\",\n    onPress: function onPress() {\n      return moveMenu();\n    }\n  }, \"Button1\"))));\n};\n\nexport default SideMenu;","map":{"version":3,"sources":["/home/hejoel/fullstack/fullstack-ht/fullstack-ht/fullstack-ht-app/src/components/SideMenu.jsx"],"names":["React","useContext","useEffect","useRef","ToggleButton","IconButton","StateContext","Button","theme","Constants","styles","StyleSheet","create","sidebar","width","height","backgroundColor","position","top","button","padding","scrollView","flexDirection","MMenu","SideMenu","toggleAnim","Animated","Value","current","state","dispatch","moveMenu","spring","toValue","open","start","transform","translateX"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,EAAuCC,MAAvC,QAAqD,OAArD;;;;;AAEA,SAASC,YAAT,QAA6B,oBAA7B;AACA,SAASC,UAAT,QAA2B,oBAA3B;AAEA,SAASC,YAAT;AACA,OAAOC,MAAP;AACA,OAAOC,KAAP;AACA,OAAOC,SAAP,MAAsB,gBAAtB;AAEA,IAAMC,MAAM,GAAGC,UAAU,CAACC,MAAX,CAAkB;AAC/BC,EAAAA,OAAO,EAAE;AACPC,IAAAA,KAAK,EAAE,GADA;AAEPC,IAAAA,MAAM,EAAE,MAFD;AAGPC,IAAAA,eAAe,EAAE,MAHV;AAIPC,IAAAA,QAAQ,EAAE,OAJH;AAMPC,IAAAA,GAAG,EAAE;AANE,GADsB;AAS/BC,EAAAA,MAAM,EAAE;AACNC,IAAAA,OAAO,EAAE;AADH,GATuB;AAY/BC,EAAAA,UAAU,EAAE;AACVC,IAAAA,aAAa,EAAE;AADL;AAZmB,CAAlB,CAAf;AAmBA,OAAO,IAAMC,KAAK,GAAG,SAARA,KAAQ,GAAM,CAG1B,CAHM;;AAMP,IAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACrB,MAAMC,UAAU,GAAGtB,MAAM,CAAC,IAAIuB,QAAQ,CAACC,KAAb,CAAmB,CAAnB,CAAD,CAAN,CAA8BC,OAAjD;;AADqB,oBAEO3B,UAAU,CAACK,YAAD,CAFjB;AAAA,MAEbuB,KAFa,eAEbA,KAFa;AAAA,MAENC,QAFM,eAENA,QAFM;;AAIrB,MAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM;AAErBL,IAAAA,QAAQ,CAACM,MAAT,CACEP,UADF,EAEE;AACEQ,MAAAA,OAAO,EAAEJ,KAAK,CAACK,IAAN,GAAa,CAAb,GAAiB,CAAC;AAD7B,KAFF,EAKEC,KALF;AAOD,GATD;;AAWA,SACE,0CAKE,oBAAC,QAAD,CAAU,IAAV;AAAe,IAAA,KAAK,EAAE,CAACzB,MAAM,CAACG,OAAR,EAAiB;AACrCuB,MAAAA,SAAS,EAAE,CAAC;AACVC,QAAAA,UAAU,EAAEZ;AADF,OAAD;AAD0B,KAAjB;AAAtB,KAKE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEf,MAAM,CAACS;AAApB,KACE,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAC,OAAd;AAAsB,IAAA,OAAO,EAAE;AAAA,aAAMY,QAAQ,EAAd;AAAA;AAA/B,eADF,CALF,CALF,CADF;AAwBD,CAvCD;;AAyCA,eAAeP,QAAf","sourcesContent":["import React, { useContext, useEffect, useRef } from 'react';\nimport { Animated, StyleSheet, View,  ScrollView } from 'react-native';\nimport { ToggleButton } from 'react-native-paper';\nimport { IconButton } from 'react-native-paper';\n\nimport { StateContext } from '../state';\nimport Button from './Button';\nimport theme from '../theme';\nimport Constants from 'expo-constants';\n\nconst styles = StyleSheet.create({ \n  sidebar: {\n    width: 200,\n    height: '100%', \n    backgroundColor: \"blue\",\n    position: 'fixed',\n    // top: Constants.statusBarHeight\n    top: 56\n  },\n  button: {\n    padding: 10,\n  },\n  scrollView: {\n    flexDirection: 'row',\n  }\n});\n\n\n\nexport const MMenu = () => {\n\n\n};\n\n\nconst SideMenu = () => {\n  const toggleAnim = useRef(new Animated.Value(0)).current; \n  const { state, dispatch } = useContext(StateContext);\n\n  const moveMenu = () => {\n\n    Animated.spring(\n      toggleAnim,\n      {\n        toValue: state.open ? 0 : -200\n      }\n    ).start();\n  \n  };\n\n  return (\n    <>\n      {/* <ScrollView style={styles.scrollView} horizontal>\n      <IconButton icon=\"menu\" color={theme.colors.primary} size={40} onPress={() => dispatch({type: \"SET_OPEN\", payload: !state.open}, moveMenu())} \n        ></IconButton>\n      </ScrollView> */}\n      <Animated.View style={[styles.sidebar, {\n        transform: [{\n          translateX: toggleAnim\n        }]\n      }]}>\n        <View style={styles.button}>\n          <Button color='error' onPress={() => moveMenu()} >Button1</Button>\n        </View>\n      </Animated.View>\n\n      {/* < SlideMenu toggleAnim={toggleAnim} state={state}/> */}\n      {/* <SlidingMenu\n        state={state.open}\n        toggleAnim={toggleAnim}\n      /> */}\n    </>\n\n  );\n};\n\nexport default SideMenu;"]},"metadata":{},"sourceType":"module"}