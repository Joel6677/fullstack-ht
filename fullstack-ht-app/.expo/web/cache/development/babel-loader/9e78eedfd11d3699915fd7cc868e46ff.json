{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nvar _this = this,\n    _jsxFileName = \"/home/hejoel/fullstack/fullstack-ht/fullstack-ht/fullstack-ht-app/src/components/MyMessages.jsx\";\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from 'react';\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { useHistory } from 'react-router-native';\nimport firebase from 'firebase/app';\nimport MessageItem from \"./MessageItem\";\nimport 'firebase/auth';\nimport 'firebase/firestore';\nvar styles = StyleSheet.create({\n  container: {\n    padding: 5,\n    height: '100%',\n    width: '100%',\n    position: 'absolute',\n    zIndex: 1,\n    paddingTop: 80,\n    paddingBottom: 60\n  },\n  separator: {\n    marginVertical: 5\n  },\n  headerContainer: {\n    padding: 10\n  },\n  searchContainer: {\n    marginBottom: 15\n  }\n});\n\nvar ItemSeparator = function ItemSeparator() {\n  return React.createElement(View, {\n    style: styles.separator,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 3\n    }\n  });\n};\n\nvar getMessages = function getMessages() {\n  var _firebase$auth, currentUser, chatIDs, ids, messages, posts;\n\n  return _regeneratorRuntime.async(function getMessages$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _firebase$auth = firebase.auth(), currentUser = _firebase$auth.currentUser;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(firebase.firestore().collection('users').where('email', '!=', currentUser.email).get());\n\n        case 3:\n          chatIDs = _context.sent;\n          ids = chatIDs.docs.map(function (doc) {\n            var id = doc.id;\n            var chatIDpre = [];\n            chatIDpre.push(currentUser.uid);\n            chatIDpre.push(id);\n            chatIDpre.sort();\n            return chatIDpre.join('_');\n          });\n          _context.next = 7;\n          return _regeneratorRuntime.awrap(firebase.firestore().collection('messages').where('chatID', 'in', ids).get());\n\n        case 7:\n          messages = _context.sent;\n          posts = messages.docs.map(function (doc) {\n            var data = doc.data();\n            var userIDs = doc.id.split('_');\n            console.log('userIDs: ', userIDs);\n            var id = userIDs.find(function (userID) {\n              return userID !== currentUser.uid;\n            });\n            return _objectSpread({\n              id: id\n            }, data);\n          });\n          return _context.abrupt(\"return\", posts);\n\n        case 10:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nvar MyMessages = function MyMessages() {\n  var history = useHistory();\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      messages = _useState2[0],\n      setMessages = _useState2[1];\n\n  useEffect(function () {\n    getMessages().then(function (messages) {\n      setMessages(messages);\n    });\n  }, []);\n  return React.createElement(View, {\n    style: styles.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 5\n    }\n  }, React.createElement(FlatList, {\n    data: messages,\n    keyExtractor: function keyExtractor(_ref) {\n      var id = _ref.id;\n      return id;\n    },\n    renderItem: function renderItem(_ref2) {\n      var item = _ref2.item;\n      return React.createElement(TouchableOpacity, {\n        key: item,\n        onPress: function onPress() {\n          return history.push(\"/messenger/\" + item.id);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }\n      }, React.createElement(MessageItem, {\n        message: item,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 13\n        }\n      }));\n    },\n    ItemSeparatorComponent: ItemSeparator,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default MyMessages;","map":{"version":3,"sources":["/home/hejoel/fullstack/fullstack-ht/fullstack-ht/fullstack-ht-app/src/components/MyMessages.jsx"],"names":["React","useState","useEffect","useHistory","firebase","MessageItem","styles","StyleSheet","create","container","padding","height","width","position","zIndex","paddingTop","paddingBottom","separator","marginVertical","headerContainer","searchContainer","marginBottom","ItemSeparator","getMessages","auth","currentUser","firestore","collection","where","email","get","chatIDs","ids","docs","map","doc","id","chatIDpre","push","uid","sort","join","messages","posts","data","userIDs","split","console","log","find","userID","MyMessages","history","setMessages","then","item"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  FlatList, View, StyleSheet, TouchableOpacity,\n} from 'react-native';\nimport { useHistory } from 'react-router-native';\nimport firebase from 'firebase/app';\nimport MessageItem from './MessageItem';\nimport 'firebase/auth';\nimport 'firebase/firestore';\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 5,\n    height: '100%',\n    width: '100%',\n    position: 'absolute',\n    zIndex: 1,\n    paddingTop: 80,\n    paddingBottom: 60,\n  },\n  separator: {\n    marginVertical: 5,\n  },\n  headerContainer: {\n    padding: 10,\n  },\n  searchContainer: {\n    marginBottom: 15,\n  },\n});\n\nconst ItemSeparator = () => (\n  <View style={styles.separator} />\n);\n\nconst getMessages = async () => {\n  const { currentUser } = firebase.auth();\n\n  const chatIDs = await firebase.firestore()\n    .collection('users')\n    .where('email', '!=', currentUser.email)\n    .get()\n  \n  const ids = chatIDs.docs.map((doc) => {\n    const { id } = doc;\n    const chatIDpre = [];\n    chatIDpre.push(currentUser.uid);\n    chatIDpre.push(id);\n    chatIDpre.sort();\n    return chatIDpre.join('_');\n  });\n\n  const messages = await firebase.firestore()\n    .collection('messages').where('chatID', 'in', ids)\n    .get()\n\n\n  const posts = messages.docs.map((doc) => {\n    const data = doc.data();\n    const userIDs = doc.id.split('_');\n    console.log('userIDs: ', userIDs);\n    const id = userIDs.find(userID => userID !== currentUser.uid)\n    return { id, ...data };\n  })\n\n  return posts\n  \n    // .then((querySnapshot) => {\n    //   const ids = querySnapshot.docs.map((doc) => {\n    //     const { id } = doc;\n    //     const chatIDpre = [];\n    //     chatIDpre.push(currentUser.uid);\n    //     chatIDpre.push(id);\n    //     chatIDpre.sort();\n    //     return chatIDpre.join('_');\n    //   });\n    //   return ids;\n    // })\n    // .catch((error) => {\n    //   console.log('Error getting documents: ', error);\n    // });\n\n  // const messages = await firebase.firestore()\n  //   .collection('messages').where('chatID', 'in', chatIDs)\n  //   .get()\n  //   .then((querySnapshot) => {\n  //     const posts = querySnapshot.docs.map((doc) => {\n  //       const data = doc.data();\n  //       const userIDs = doc.id.split('_');\n  //       console.log('userIDs: ', userIDs);\n  //       const id = userIDs.find(userID => userID !== currentUser.uid)\n  //       return { id, ...data };\n  //     });\n  //     return posts;\n  //   })\n  //   .catch((error) => {\n  //     console.log('Error getting documents: ', error);\n  //   });\n\n  // console.log('chatIDs: ', chatIDs);\n  // console.log('messages: ', messages);\n\n};\n\nconst MyMessages = () => {\n  const history = useHistory();\n  const [messages, setMessages] = useState([]);\n\n  useEffect(() => {\n    getMessages().then((messages) => { setMessages(messages); });\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <FlatList\n        data={messages}\n        keyExtractor={({ id }) => id}\n        renderItem={({ item }) => (\n          <TouchableOpacity\n            key={item}\n            onPress={() => history.push(`/messenger/${item.id}`)}\n          >\n            <MessageItem message={item} />\n          </TouchableOpacity>\n        )}\n        ItemSeparatorComponent={ItemSeparator}\n      />\n    </View>\n  );\n};\n\nexport default MyMessages;\n"]},"metadata":{},"sourceType":"module"}