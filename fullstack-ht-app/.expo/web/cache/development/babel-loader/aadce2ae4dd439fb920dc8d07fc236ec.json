{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/home/hejoel/fullstack/fullstack-ht/fullstack-ht/fullstack-ht-app/src/components/SideMenu.jsx\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { useContext, useRef } from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { ToggleButton } from 'react-native-paper';\nimport { StateContext } from \"../state\";\nimport Button from \"./Button\";\nvar styles = StyleSheet.create({\n  sidebar: {\n    width: 200,\n    height: '100%',\n    backgroundColor: \"blue\"\n  },\n  button: {\n    padding: 10\n  }\n});\n\nvar SlideMenu = function SlideMenu(_ref) {\n  var toggleAnim = _ref.toggleAnim,\n      state = _ref.state;\n  console.log('slideMenu');\n  console.log('stateSlideMenu ', state);\n  console.log('toggleAnim: ', toggleAnim);\n  Animated.spring(toggleAnim, {\n    toValue: state ? 0 : -200\n  }).start();\n  return React.createElement(Animated.View, {\n    style: [styles.sidebar, {\n      transform: [{\n        translateX: toggleAnim\n      }]\n    }]\n  }, React.createElement(View, {\n    style: styles.button\n  }, React.createElement(Button, {\n    color: \"error\",\n    onPress: function onPress() {\n      return console.log('Button pressed');\n    }\n  }, \"Button1\")), React.createElement(View, {\n    style: styles.button\n  }, React.createElement(Button, {\n    color: \"error\",\n    onPress: function onPress() {\n      return console.log('Button pressed');\n    }\n  }, \"Button2\")));\n};\n\nexport var SlidingMenu = function (_React$Component) {\n  _inherits(SlidingMenu, _React$Component);\n\n  var _super = _createSuper(SlidingMenu);\n\n  function SlidingMenu() {\n    _classCallCheck(this, SlidingMenu);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(SlidingMenu, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          state = _this$props.state,\n          toggleAnim = _this$props.toggleAnim;\n      Animated.spring(toggleAnim, {\n        toValue: state ? 0 : -200\n      }).start();\n      return React.createElement(Animated.View, {\n        style: [styles.sidebar, {\n          transform: [{\n            translateX: toggleAnim\n          }]\n        }]\n      }, React.createElement(View, {\n        style: styles.button\n      }, React.createElement(Button, {\n        color: \"error\",\n        onPress: function onPress() {\n          return console.log('Button pressed');\n        }\n      }, \"Button1\")), React.createElement(View, {\n        style: styles.button\n      }, React.createElement(Button, {\n        color: \"error\",\n        onPress: function onPress() {\n          return console.log('Button pressed');\n        }\n      }, \"Button2\")));\n    }\n  }]);\n\n  return SlidingMenu;\n}(React.Component);\n\nvar SideMenu = function SideMenu() {\n  var _useContext = useContext(StateContext),\n      state = _useContext.state;\n\n  var toggleAnim = useRef(new Animated.Value(0)).current;\n  return React.createElement(React.Fragment, null, React.createElement(SlideMenu, {\n    toggleAnim: toggleAnim,\n    state: state\n  }));\n};\n\nexport default SideMenu;","map":{"version":3,"sources":["/home/hejoel/fullstack/fullstack-ht/fullstack-ht/fullstack-ht-app/src/components/SideMenu.jsx"],"names":["React","useContext","useRef","ToggleButton","StateContext","Button","styles","StyleSheet","create","sidebar","width","height","backgroundColor","button","padding","SlideMenu","toggleAnim","state","console","log","Animated","spring","toValue","start","transform","translateX","SlidingMenu","props","Component","SideMenu","Value","current"],"mappings":"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","sourcesContent":["import React, { useContext, useRef } from 'react';\nimport { Animated, StyleSheet, View } from 'react-native';\nimport { ToggleButton } from 'react-native-paper';\n\nimport { StateContext } from '../state';\nimport Button from './Button';\n\nconst styles = StyleSheet.create({\n  sidebar: {\n    width: 200,\n    height: '100%', \n    backgroundColor: \"blue\",\n    // position: 'fixed',\n  },\n  button: {\n    padding: 10,\n  }\n});\n\nconst SlideMenu = ({toggleAnim, state}) => {\n  console.log('slideMenu');\n  console.log('stateSlideMenu ', state);\n  console.log('toggleAnim: ', toggleAnim);\n  Animated.spring(\n    toggleAnim,\n    {\n      toValue: state ? 0 : -200,\n    }\n  ).start();\n  return (\n    <Animated.View style={[styles.sidebar, {\n      transform: [{\n        translateX: toggleAnim\n      }]\n    }]}>\n      <View style={styles.button}>\n        <Button color='error' onPress={() => console.log('Button pressed')} >Button1</Button>\n      </View>\n      <View style={styles.button}>\n        <Button color='error' onPress={() => console.log('Button pressed')} >Button2</Button>\n      </View>\n    </Animated.View>\n\n  );\n};\n\n\nexport class SlidingMenu extends React.Component {\n\n\n  render() {\n\n    const { state, toggleAnim } = this.props;\n\n    Animated.spring(\n      toggleAnim,\n      {\n        toValue: state ? 0 : -200,\n      }\n    ).start();\n\n    return (\n      <Animated.View style={[styles.sidebar, {\n        transform: [{\n          translateX: toggleAnim\n        }]\n      }]}>\n        <View style={styles.button}>\n          <Button color='error' onPress={() => console.log('Button pressed')} >Button1</Button>\n        </View>\n        <View style={styles.button}>\n          <Button color='error' onPress={() => console.log('Button pressed')} >Button2</Button>\n        </View>\n      </Animated.View>\n\n    );\n  }\n}\n\n\nconst SideMenu = () => {\n  const { state } = useContext(StateContext);\n  const toggleAnim = useRef(new Animated.Value(0)).current;\n\n  return (\n    <>\n      < SlideMenu toggleAnim={toggleAnim} state={state}/>\n      {/* <SlidingMenu\n        state={state.open}\n        toggleAnim={toggleAnim}\n      /> */}\n    </>\n\n  );\n};\n\nexport default SideMenu;"]},"metadata":{},"sourceType":"module"}