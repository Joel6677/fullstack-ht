{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nexport var sendChatMessage = function sendChatMessage(chatID, text, otherUserUid) {\n  firebase.firestore().collection('messages').doc(chatID).collection('chats').add({\n    text: text,\n    createdAt: new Date().getTime(),\n    user: {\n      _id: firebase.auth().currentUser.uid\n    }\n  });\n  firebase.firestore().collection('messages').add({\n    text: text,\n    createdAt: new Date().getTime(),\n    sendFrom: firebase.auth().currentUser.uid,\n    sendTo: otherUserUid\n  });\n};\nexport var getMyMessages = function getMyMessages() {\n  var messagesRef, currentUser, sendFrom, sendTo, _await$Promise$all, _await$Promise$all2, sendFromQuerySnapshot, sendToQuerySnapshot, sendFromArray, sendToArray, myMessagesArray;\n\n  return _regeneratorRuntime.async(function getMyMessages$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          messagesRef = firebase.firestore().collection('messages');\n          currentUser = firebase.auth().currentUser;\n          sendFrom = messagesRef.where('sendFrom', '==', currentUser.uid).get();\n          sendTo = messagesRef.where('sendTo', '==', currentUser.uid).get();\n          _context.next = 6;\n          return _regeneratorRuntime.awrap(Promise.all([sendFrom, sendTo]));\n\n        case 6:\n          _await$Promise$all = _context.sent;\n          _await$Promise$all2 = _slicedToArray(_await$Promise$all, 2);\n          sendFromQuerySnapshot = _await$Promise$all2[0];\n          sendToQuerySnapshot = _await$Promise$all2[1];\n          sendFromArray = sendFromQuerySnapshot.docs;\n          sendToArray = sendToQuerySnapshot.docs;\n          myMessagesArray = sendFromArray.concat(sendToArray);\n          return _context.abrupt(\"return\", myMessagesArray);\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};","map":{"version":3,"sources":["/home/hejoel/fullstack/fullstack-ht/fullstack-ht/fullstack-ht-app/src/firebase/chat.js"],"names":["firebase","sendChatMessage","chatID","text","otherUserUid","firestore","collection","doc","add","createdAt","Date","getTime","user","_id","auth","currentUser","uid","sendFrom","sendTo","getMyMessages","messagesRef","where","get","Promise","all","sendFromQuerySnapshot","sendToQuerySnapshot","sendFromArray","docs","sendToArray","myMessagesArray","concat"],"mappings":";;AACA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,eAAP;AACA,OAAO,oBAAP;AAGA,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,MAAD,EAASC,IAAT,EAAeC,YAAf,EAAgC;AAE7DJ,EAAAA,QAAQ,CAACK,SAAT,GACGC,UADH,CACc,UADd,EAEGC,GAFH,CAEOL,MAFP,EAGGI,UAHH,CAGc,OAHd,EAIGE,GAJH,CAIO;AACHL,IAAAA,IAAI,EAAEA,IADH;AAEHM,IAAAA,SAAS,EAAE,IAAIC,IAAJ,GAAWC,OAAX,EAFR;AAGHC,IAAAA,IAAI,EAAE;AACJC,MAAAA,GAAG,EAAEb,QAAQ,CAACc,IAAT,GAAgBC,WAAhB,CAA4BC;AAD7B;AAHH,GAJP;AAYEhB,EAAAA,QAAQ,CAACK,SAAT,GACCC,UADD,CACY,UADZ,EAECE,GAFD,CAEK;AACHL,IAAAA,IAAI,EAAEA,IADH;AAEHM,IAAAA,SAAS,EAAE,IAAIC,IAAJ,GAAWC,OAAX,EAFR;AAGHM,IAAAA,QAAQ,EAAEjB,QAAQ,CAACc,IAAT,GAAgBC,WAAhB,CAA4BC,GAHnC;AAIHE,IAAAA,MAAM,EAAEd;AAJL,GAFL;AAQH,CAtBM;AA0BP,OAAO,IAAMe,aAAa,GAAG,SAAhBA,aAAgB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAErBC,UAAAA,WAFqB,GAEPpB,QAAQ,CAACK,SAAT,GAAqBC,UAArB,CAAgC,UAAhC,CAFO;AAGrBS,UAAAA,WAHqB,GAGPf,QAAQ,CAACc,IAAT,GAAgBC,WAHT;AAMrBE,UAAAA,QANqB,GAMVG,WAAW,CAACC,KAAZ,CAAkB,UAAlB,EAA8B,IAA9B,EAAoCN,WAAW,CAACC,GAAhD,EAAqDM,GAArD,EANU;AAOrBJ,UAAAA,MAPqB,GAOZE,WAAW,CAACC,KAAZ,CAAkB,QAAlB,EAA4B,IAA5B,EAAkCN,WAAW,CAACC,GAA9C,EAAmDM,GAAnD,EAPY;AAAA;AAAA,2CASgCC,OAAO,CAACC,GAAR,CAAY,CACrEP,QADqE,EAErEC,MAFqE,CAAZ,CAThC;;AAAA;AAAA;AAAA;AASpBO,UAAAA,qBAToB;AASGC,UAAAA,mBATH;AAcrBC,UAAAA,aAdqB,GAcLF,qBAAqB,CAACG,IAdjB;AAerBC,UAAAA,WAfqB,GAePH,mBAAmB,CAACE,IAfb;AAiBrBE,UAAAA,eAjBqB,GAiBHH,aAAa,CAACI,MAAd,CAAqBF,WAArB,CAjBG;AAAA,2CAmBpBC,eAnBoB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAtB","sourcesContent":["// import * as firebase from 'firebase';\nimport firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\n\n\nexport const sendChatMessage = (chatID, text, otherUserUid) => {\n\n  firebase.firestore()\n    .collection('messages')\n    .doc(chatID)\n    .collection('chats')\n    .add({\n      text: text,\n      createdAt: new Date().getTime(),\n      user: {\n        _id: firebase.auth().currentUser.uid\n      }\n    });\n\n    firebase.firestore()\n    .collection('messages')\n    .add({\n      text: text,\n      createdAt: new Date().getTime(),\n      sendFrom: firebase.auth().currentUser.uid,\n      sendTo: otherUserUid\n    });    \n};\n\n\n\nexport const getMyMessages = async () => {\n\n  const messagesRef = firebase.firestore().collection('messages');\n  const currentUser = firebase.auth().currentUser;\n\n\n  const sendFrom = messagesRef.where('sendFrom', '==', currentUser.uid).get();\n  const sendTo = messagesRef.where('sendTo', '==', currentUser.uid).get();\n\n  const [sendFromQuerySnapshot, sendToQuerySnapshot] = await Promise.all([\n    sendFrom,\n    sendTo\n  ]);\n\n  const sendFromArray = sendFromQuerySnapshot.docs;\n  const sendToArray = sendToQuerySnapshot.docs;\n\n  const myMessagesArray = sendFromArray.concat(sendToArray);\n\n  return myMessagesArray;\n};\n"]},"metadata":{},"sourceType":"module"}