{"ast":null,"code":"import * as React from 'react';\nimport { Text, TouchableRipple, useTheme } from 'react-native-paper';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport DayRange from \"./DayRange\";\nimport { daySize } from \"./dateUtils\";\n\nfunction EmptyDayPure() {\n  return React.createElement(View, {\n    style: styles.empty\n  });\n}\n\nexport var EmptyDay = React.memo(EmptyDayPure);\n\nfunction Day(props) {\n  var day = props.day,\n      month = props.month,\n      year = props.year,\n      selected = props.selected,\n      inRange = props.inRange,\n      leftCrop = props.leftCrop,\n      rightCrop = props.rightCrop,\n      onPressDate = props.onPressDate,\n      primaryColor = props.primaryColor,\n      selectColor = props.selectColor,\n      isToday = props.isToday,\n      disabled = props.disabled,\n      excluded = props.excluded,\n      textColorOnPrimary = props.textColorOnPrimary;\n  var theme = useTheme();\n  var onPress = React.useCallback(function () {\n    onPressDate(new Date(year, month, day));\n  }, [onPressDate, year, month, day]);\n  var borderColor = selected || inRange && theme.dark ? textColorOnPrimary : theme.dark ? '#fff' : '#000';\n  var textColor = selected || inRange && theme.dark ? textColorOnPrimary : undefined;\n  return React.createElement(View, {\n    style: [styles.root, disabled && styles.disabled]\n  }, React.createElement(DayRange, {\n    inRange: inRange,\n    leftCrop: leftCrop,\n    rightCrop: rightCrop,\n    selectColor: selectColor\n  }), React.createElement(TouchableRipple, {\n    disabled: disabled,\n    borderless: true,\n    onPress: onPress,\n    style: [styles.button, {\n      backgroundColor: inRange ? selectColor : undefined\n    }]\n  }, React.createElement(View, {\n    style: [styles.day, isToday ? {\n      borderColor: borderColor\n    } : null, selected ? {\n      backgroundColor: primaryColor\n    } : null]\n  }, React.createElement(Text, {\n    style: [excluded && styles.excludedText, textColor && {\n      color: textColor\n    }],\n    selectable: false\n  }, day))));\n}\n\nvar styles = StyleSheet.create({\n  empty: {\n    flex: 1,\n    flexBasis: 0\n  },\n  disabled: {\n    opacity: 0.3\n  },\n  root: {\n    flexBasis: 0,\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    position: 'relative'\n  },\n  button: {\n    width: daySize,\n    height: daySize,\n    overflow: 'hidden',\n    borderRadius: daySize / 2\n  },\n  day: {\n    flexBasis: 0,\n    flex: 1,\n    borderRadius: daySize / 2,\n    width: daySize,\n    height: daySize,\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderWidth: 1,\n    borderColor: 'transparent'\n  },\n  flex1: {\n    flex: 1\n  },\n  excludedText: {\n    textDecorationLine: 'line-through'\n  }\n});\nexport default React.memo(Day);","map":{"version":3,"sources":["Day.tsx"],"names":["styles","empty","EmptyDay","React","textColorOnPrimary","theme","useTheme","onPress","onPressDate","borderColor","selected","inRange","textColor","disabled","selectColor","backgroundColor","undefined","isToday","primaryColor","excluded","color","flex","flexBasis","opacity","root","justifyContent","alignItems","position","button","width","height","overflow","borderRadius","daySize","day","borderWidth","flex1","excludedText","textDecorationLine"],"mappings":"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","sourcesContent":["import * as React from 'react'\nimport { Text, TouchableRipple, useTheme } from 'react-native-paper'\nimport { StyleSheet, View } from 'react-native'\nimport DayRange from './DayRange'\nimport { daySize } from './dateUtils'\n\nfunction EmptyDayPure() {\n  return <View style={styles.empty} />\n}\nexport const EmptyDay = React.memo(EmptyDayPure)\n\nfunction Day(props: {\n  textColorOnPrimary: string\n  day: number\n  month: number\n  year: number\n  selected: boolean\n  inRange: boolean\n  leftCrop: boolean\n  rightCrop: boolean\n  primaryColor: string\n  selectColor: string\n  isToday: boolean\n  disabled: boolean\n  excluded: boolean\n  onPressDate: (date: Date) => any\n}) {\n  const {\n    day,\n    month,\n    year,\n    selected,\n    inRange,\n    leftCrop,\n    rightCrop,\n    onPressDate,\n    primaryColor,\n    selectColor,\n    isToday,\n    disabled,\n    excluded,\n    textColorOnPrimary,\n  } = props\n  const theme = useTheme()\n  const onPress = React.useCallback(() => {\n    onPressDate(new Date(year, month, day))\n  }, [onPressDate, year, month, day])\n\n  const borderColor =\n    selected || (inRange && theme.dark)\n      ? textColorOnPrimary\n      : theme.dark\n      ? '#fff'\n      : '#000'\n  const textColor =\n    selected || (inRange && theme.dark) ? textColorOnPrimary : undefined\n\n  return (\n    <View style={[styles.root, disabled && styles.disabled]}>\n      <DayRange\n        inRange={inRange}\n        leftCrop={leftCrop}\n        rightCrop={rightCrop}\n        selectColor={selectColor}\n      />\n\n      <TouchableRipple\n        disabled={disabled}\n        borderless={true}\n        onPress={onPress}\n        style={[\n          styles.button,\n          { backgroundColor: inRange ? selectColor : undefined },\n        ]}\n      >\n        <View\n          style={[\n            styles.day,\n            isToday ? { borderColor: borderColor } : null,\n            selected ? { backgroundColor: primaryColor } : null,\n          ]}\n        >\n          <Text\n            style={[\n              excluded && styles.excludedText,\n              // @ts-ignore\n              textColor && { color: textColor },\n            ]}\n            selectable={false}\n          >\n            {day}\n          </Text>\n        </View>\n      </TouchableRipple>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  empty: {\n    flex: 1,\n    flexBasis: 0,\n  },\n  disabled: {\n    opacity: 0.3,\n  },\n  root: {\n    flexBasis: 0,\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    position: 'relative',\n  },\n  button: {\n    width: daySize,\n    height: daySize,\n    overflow: 'hidden',\n    borderRadius: daySize / 2,\n  },\n  day: {\n    flexBasis: 0,\n    flex: 1,\n    borderRadius: daySize / 2,\n    width: daySize,\n    height: daySize,\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderWidth: 1,\n    borderColor: 'transparent',\n  },\n  flex1: {\n    flex: 1,\n  },\n  excludedText: {\n    textDecorationLine: 'line-through',\n  },\n})\n\nexport default React.memo(Day)\n"]},"metadata":{},"sourceType":"module"}