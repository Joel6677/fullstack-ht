{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/home/hejoel/fullstack/fullstack-ht/fullstack-ht/fullstack-ht-app/src/components/Messenger.jsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useContext, useRef, useEffect, useCallback } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport { Button, IconButton, TextInput } from 'react-native-paper';\nimport * as firebase from 'firebase';\nimport { sendChatMessage, handleSend } from \"../firebase/chat\";\nimport { GiftedChat } from 'react-native-gifted-chat';\nimport { useParams } from 'react-router-native';\nimport Text from \"./Text\";\nvar styles = StyleSheet.create({\n  container: {\n    zIndex: 1,\n    padding: 100,\n    height: '100%',\n    width: '100%',\n    position: 'absolute',\n    flexDirection: 'column',\n    backgroundColor: 'yellow'\n  },\n  messageContainer: {\n    padding: 50,\n    backgroundColor: 'purple'\n  },\n  separator: {\n    height: 10\n  },\n  messageContainerSent: {\n    alignSelf: 'flex-end'\n  },\n  messageContainerReceived: {\n    alignSelf: 'flex-start'\n  },\n  sendMessageContainer: {\n    flexDirection: 'row'\n  }\n});\n\nvar ItemSeparator = function ItemSeparator() {\n  return React.createElement(View, {\n    style: styles.separator\n  });\n};\n\nvar MessageItem = function MessageItem(_ref) {\n  var message = _ref.message;\n  var messageSent = message.user._id === firebase.auth().currentUser.uid;\n  console.log('message: ', message.chat);\n  return React.createElement(View, {\n    style: styles.messageContainer\n  }, messageSent && React.createElement(View, {\n    style: styles.messageContainerSent\n  }, React.createElement(Text, null)), !messageSent && React.createElement(View, {\n    style: styles.messageContainerReceived\n  }, React.createElement(Text, null)));\n};\n\nvar Messenger = function Messenger() {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      messages = _useState2[0],\n      setMessages = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      text = _useState4[0],\n      setText = _useState4[1];\n\n  var currentUser = firebase.auth().currentUser;\n\n  var _useParams = useParams(),\n      id = _useParams.id;\n\n  var chatID = function chatID() {\n    var chatterID = currentUser.uid;\n    var chateeID = id;\n    var chatIDpre = [];\n    chatIDpre.push(chatterID);\n    chatIDpre.push(chateeID);\n    chatIDpre.sort();\n    return chatIDpre.join('_');\n  };\n\n  useEffect(function () {\n    var messagesListener = firebase.firestore().collection('messages').doc(chatID()).collection('chats').orderBy('createdAt', 'desc').onSnapshot(function (querySnapshot) {\n      var messages = querySnapshot.docs.map(function (doc) {\n        var firebaseData = doc.data();\n        console.log('firebaseData: ', firebaseData);\n\n        var data = _objectSpread({\n          _id: doc.id,\n          text: '',\n          createdAt: new Date().getTime()\n        }, firebaseData);\n\n        if (!firebaseData.system) {\n          data.user = _objectSpread(_objectSpread({}, firebaseData.user), {}, {\n            name: firebaseData.user.email\n          });\n        }\n\n        return data;\n      });\n      setMessages(messages);\n    });\n    return function () {\n      return messagesListener();\n    };\n  }, []);\n  return React.createElement(View, {\n    style: styles.container\n  }, React.createElement(FlatList, {\n    data: messages,\n    inverted: true,\n    renderItem: function renderItem(_ref2) {\n      var item = _ref2.item;\n      return React.createElement(MessageItem, {\n        message: item\n      });\n    },\n    keyExtractor: function keyExtractor(_ref3) {\n      var id = _ref3.id;\n      return id;\n    },\n    ItemSeparatorComponent: ItemSeparator\n  }), React.createElement(View, {\n    style: styles.sendMessageContainer\n  }, React.createElement(TextInput, {\n    label: \"\",\n    value: text,\n    onChangeText: function onChangeText(text) {\n      return setText(text);\n    }\n  }), React.createElement(IconButton, {\n    icon: \"send\",\n    size: 25,\n    onPress: function onPress() {\n      sendChatMessage(chatID(), text);\n    }\n  })));\n};\n\nexport default Messenger;","map":{"version":3,"sources":["/home/hejoel/fullstack/fullstack-ht/fullstack-ht/fullstack-ht-app/src/components/Messenger.jsx"],"names":["React","useState","useContext","useRef","useEffect","useCallback","Button","IconButton","TextInput","firebase","sendChatMessage","handleSend","GiftedChat","useParams","Text","styles","StyleSheet","create","container","zIndex","padding","height","width","position","flexDirection","backgroundColor","messageContainer","separator","messageContainerSent","alignSelf","messageContainerReceived","sendMessageContainer","ItemSeparator","MessageItem","message","messageSent","user","_id","auth","currentUser","uid","console","log","chat","Messenger","messages","setMessages","text","setText","id","chatID","chatterID","chateeID","chatIDpre","push","sort","join","messagesListener","firestore","collection","doc","orderBy","onSnapshot","querySnapshot","docs","map","firebaseData","data","createdAt","Date","getTime","system","name","email","item"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useRef, useEffect, useCallback } from 'react';\nimport {View, StyleSheet, FlatList} from 'react-native';\nimport {Button, IconButton, TextInput} from 'react-native-paper';\nimport * as firebase from 'firebase';\nimport { sendChatMessage, handleSend } from '../firebase/chat';\nimport { GiftedChat } from 'react-native-gifted-chat';\nimport { useParams } from 'react-router-native';\nimport Text from './Text';\n\n\nconst styles = StyleSheet.create({\n    container: {\n        zIndex: 1,\n        padding: 100,\n        height: '100%',\n        width: '100%',\n        position: 'absolute',\n        flexDirection: 'column',\n        backgroundColor: 'yellow'\n    },\n    messageContainer: {\n        padding: 50,\n        backgroundColor: 'purple'\n    },\n    separator: {\n        height: 10,\n    },\n    messageContainerSent: {\n        alignSelf: 'flex-end',\n        \n    },\n    messageContainerReceived: {\n        alignSelf: 'flex-start'\n    },\n    sendMessageContainer: {\n        flexDirection: 'row'\n    }\n});\n\nconst ItemSeparator = () => <View style={styles.separator} />;\n\nconst MessageItem = ({message}) => {\n    const messageSent = message.user._id===firebase.auth().currentUser.uid;\n    console.log('message: ', message.chat);\n    return (\n        <View style={styles.messageContainer}>\n            {messageSent&&<View style={styles.messageContainerSent}>\n                <Text>\n                    {/* {message} */}\n                </Text>\n            </View>}\n            {!messageSent&&<View style={styles.messageContainerReceived}>\n                <Text>\n                    {/* {message} */}\n                </Text>\n            </View>}\n      \n        </View>\n    );\n};\n\nconst Messenger = () => {\n\n    const [messages, setMessages] = useState([]);\n\n    const [text, setText] = useState('');\n    const currentUser = firebase.auth().currentUser;\n    const { id } = useParams();\n\n\n    const chatID = () => {\n        const chatterID = currentUser.uid;\n        const chateeID = id;\n        const chatIDpre = [];\n        chatIDpre.push(chatterID);\n        chatIDpre.push(chateeID);\n        chatIDpre.sort();\n        return chatIDpre.join('_');\n      };\n\n    useEffect(() => {\n        const messagesListener = firebase.firestore()\n            .collection('messages')\n            .doc(chatID())\n            .collection('chats')\n            .orderBy('createdAt', 'desc')\n            .onSnapshot(querySnapshot => {\n                const messages = querySnapshot.docs.map(doc => {\n                    const firebaseData = doc.data();\n                    console.log('firebaseData: ', firebaseData);\n\n                    const data = {\n                        _id: doc.id,\n                        text: '',\n                        createdAt: new Date().getTime(),\n                        ...firebaseData\n                    };\n\n                    if (!firebaseData.system) {\n                        data.user = {\n                            ...firebaseData.user,\n                            name: firebaseData.user.email\n                        };\n                    }\n\n                    return data;\n                });\n\n                setMessages(messages);\n            });\n\n        return () => messagesListener();\n    }, []);\n\n\n\n    // handle send callback systeemi\n    return(\n        <View style={styles.container}>\n            <FlatList\n                data={messages}\n                inverted\n                renderItem={({ item }) => (\n                    <MessageItem\n                        message={item}\n                    />\n                )}\n                keyExtractor={({ id }) => id}\n                ItemSeparatorComponent={ItemSeparator}\n            />\n\n            <View style={styles.sendMessageContainer}>\n                <TextInput\n                    label=\"\"\n                    value={text}\n                    onChangeText={text => setText(text)}\n                />\n                <IconButton icon=\"send\" size={25} onPress={()=>{sendChatMessage(chatID(),text);}} />\n            </View>\n                    \n        </View>\n    );\n};\n\nexport default Messenger;"]},"metadata":{},"sourceType":"module"}