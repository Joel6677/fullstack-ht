{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar _jsxFileName = \"/home/hejoel/fullstack/fullstack-ht/fullstack-ht/fullstack-ht-app/src/components/CreateReview.jsx\";\nimport React, { useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Button } from 'react-native-paper';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport { useHistory } from 'react-router-native';\nimport * as firebase from 'firebase';\nimport FormikTextInput from \"./FormikTextInput\";\nimport { useParams } from 'react-router-native';\nimport Moment from 'moment';\nvar styles = StyleSheet.create({\n  container: {\n    justifyContent: 'center',\n    width: '100%',\n    height: '100%',\n    position: 'absolute',\n    zIndex: 1\n  },\n  fieldContainer: {\n    marginBottom: 15\n  }\n});\nvar initialValues = {\n  nosing: '',\n  taste: '',\n  finish: '',\n  rating: '',\n  comment: ''\n};\nvar validationSchema = yup.object().shape({\n  nosing: yup.string().required('Nosing is required'),\n  taste: yup.string().required('Taste is required'),\n  finish: yup.string().required('Finish is required'),\n  rating: yup.number('Rating must be a number').min(0, 'Rating must be greater or equal to 0').max(100, 'Rating must be less or equal to 100').required('Rating is required'),\n  comment: yup.string()\n});\n\nvar CreateReviewForm = function CreateReviewForm(_ref) {\n  var onSubmit = _ref.onSubmit;\n  return React.createElement(View, null, React.createElement(View, {\n    style: styles.fieldContainer\n  }, React.createElement(FormikTextInput, {\n    placeholder: \"Nosing\",\n    name: \"nosing\"\n  })), React.createElement(View, {\n    style: styles.fieldContainer\n  }, React.createElement(FormikTextInput, {\n    placeholder: \"Taste\",\n    name: \"taste\"\n  })), React.createElement(View, {\n    style: styles.fieldContainer\n  }, React.createElement(FormikTextInput, {\n    placeholder: \"Finish\",\n    name: \"finish\"\n  })), React.createElement(View, {\n    style: styles.fieldContainer\n  }, React.createElement(FormikTextInput, {\n    placeholder: \"Rating between 0 and 100\",\n    keyboardType: \"numeric\",\n    name: \"rating\"\n  })), React.createElement(View, {\n    style: styles.fieldContainer\n  }, React.createElement(FormikTextInput, {\n    placeholder: \"Comment\",\n    name: \"comment\",\n    multiline: true\n  })), React.createElement(Button, {\n    onPress: onSubmit\n  }, \"Create a review\"));\n};\n\nvar CreateReview = function CreateReview() {\n  var history = useHistory();\n\n  var _useParams = useParams(),\n      id = _useParams.id;\n\n  var onSubmit = function onSubmit(values) {\n    var nosing, taste, finish, rating, comment;\n    return _regeneratorRuntime.async(function onSubmit$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            nosing = values.nosing, taste = values.taste, finish = values.finish, rating = values.rating, comment = values.comment;\n            firebase.firestore().collection('whiskies').doc(id).collection('reviews').add({\n              nosing: nosing,\n              taste: taste,\n              finish: finish,\n              rating: rating,\n              comment: comment,\n              time: Moment(new Date()).calendar()\n            });\n            firebase.firestore().collection('whiskies').doc(id).get().then(function (doc) {\n              firebase.firestore.collection('whiskies').doc(id).update({\n                reviewCount: doc.reviewCount + 1,\n                ratingAverage: (doc.ratingAverage + rating) / doc.reviewCount + 1\n              });\n            }).catch(function (error) {\n              console.log(\"Error: \", error);\n            });\n            history.push('/');\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(View, {\n    style: styles.container\n  }, React.createElement(Formik, {\n    initialValues: initialValues,\n    onSubmit: onSubmit,\n    validationSchema: validationSchema\n  }, function (_ref2) {\n    var handleSubmit = _ref2.handleSubmit;\n    return React.createElement(CreateReviewForm, {\n      onSubmit: handleSubmit\n    });\n  }));\n};\n\nexport default CreateReview;","map":{"version":3,"sources":["/home/hejoel/fullstack/fullstack-ht/fullstack-ht/fullstack-ht-app/src/components/CreateReview.jsx"],"names":["React","useState","Button","Formik","yup","useHistory","firebase","FormikTextInput","useParams","Moment","styles","StyleSheet","create","container","justifyContent","width","height","position","zIndex","fieldContainer","marginBottom","initialValues","nosing","taste","finish","rating","comment","validationSchema","object","shape","string","required","number","min","max","CreateReviewForm","onSubmit","CreateReview","history","id","values","firestore","collection","doc","add","time","Date","calendar","get","then","update","reviewCount","ratingAverage","catch","error","console","log","push","handleSubmit"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport {Button} from 'react-native-paper';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport { useHistory } from 'react-router-native';\nimport * as firebase from 'firebase';\nimport FormikTextInput from './FormikTextInput';\nimport { useParams } from 'react-router-native';\nimport Moment from 'moment';\n\nconst styles = StyleSheet.create({\n  container: {\n    justifyContent: 'center',\n    width: '100%',\n    height: '100%',\n    position: 'absolute',\n    zIndex: 1,\n  },\n  fieldContainer: {\n    marginBottom: 15,\n  },\n});\n\nconst initialValues = {\n  nosing: '',\n  taste: '',\n  finish: '',\n  rating: '',\n  comment: ''\n};\n\nconst validationSchema = yup.object().shape({\n  nosing: yup.string().required('Nosing is required'),\n  taste: yup.string().required('Taste is required'),\n  finish: yup.string().required('Finish is required'), \n  rating: yup\n  .number('Rating must be a number')\n  .min(0, 'Rating must be greater or equal to 0')\n  .max(100, 'Rating must be less or equal to 100')\n  .required('Rating is required'),\n  comment: yup.string(),\n});\n\nconst CreateReviewForm = ({ onSubmit }) => {\n  return (\n    <View >\n      <View style={styles.fieldContainer}>\n        <FormikTextInput placeholder=\"Nosing\" name=\"nosing\" />\n      </View>\n      <View style={styles.fieldContainer}>\n        <FormikTextInput placeholder=\"Taste\" name=\"taste\" />\n      </View>\n      <View style={styles.fieldContainer}>\n        <FormikTextInput placeholder=\"Finish\" name=\"finish\" />\n      </View>\n      <View style={styles.fieldContainer}>\n        <FormikTextInput\n          placeholder=\"Rating between 0 and 100\"\n          keyboardType=\"numeric\"\n          name=\"rating\"\n        />\n      </View>\n      <View style={styles.fieldContainer}>\n        <FormikTextInput placeholder=\"Comment\" name=\"comment\" multiline />\n      </View>\n\n      <Button onPress={onSubmit}>Create a review</Button>\n    </View>\n  );\n};\n\nconst CreateReview = () => {\n\n  const history = useHistory();\n  const { id } = useParams();\n\n  const onSubmit = async (values) => {\n\n    const { nosing, taste, finish, rating, comment } = values;\n\n    // add user first & last names\n\n\n    firebase.firestore().collection('whiskies').doc(id).collection('reviews')\n      .add({\n        nosing: nosing,\n        taste: taste,\n        finish: finish,\n        rating: rating,\n        comment: comment,\n        time: Moment(new Date()).calendar()\n      });\n\n    firebase.firestore().collection('whiskies').doc(id).get().\n      then((doc) => {\n        firebase.firestore.collection('whiskies').doc(id).update({\n          reviewCount: doc.reviewCount + 1,\n          ratingAverage: (doc.ratingAverage + rating) / doc.reviewCount + 1\n        });\n      }).catch((error) => {\n        console.log(\"Error: \", error);\n      });\n\n\n    history.push('/');\n\n  };\n\n\n  return (\n    <View style={styles.container}>\n      <Formik\n        initialValues={initialValues}\n        onSubmit={onSubmit}\n        validationSchema={validationSchema}\n      >\n        {({ handleSubmit }) => <CreateReviewForm onSubmit={handleSubmit} />}\n      </Formik>\n    </View>\n  );\n};\n\nexport default CreateReview;"]},"metadata":{},"sourceType":"module"}