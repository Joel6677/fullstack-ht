{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/hejoel/fullstack/fullstack-ht/fullstack-ht/fullstack-ht-app/src/components/Messenger.jsx\";\n\nimport React, { useState, useContext, useRef, useEffect, useCallback } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { Button, IconButton, TextInput } from 'react-native-paper';\nimport * as firebase from 'firebase';\nimport { sendChatMessage, handleSend } from \"../firebase/chat\";\nimport { GiftedChat } from 'react-native-gifted-chat';\nimport { useParams } from 'react-router-native';\nimport Text from \"./Text\";\nimport Moment from 'moment';\nvar styles = StyleSheet.create({\n  container: {\n    zIndex: 1,\n    paddingHorizontal: 5,\n    paddingVertical: 60,\n    height: '100%',\n    width: '100%',\n    position: 'absolute',\n    flexDirection: 'column',\n    backgroundColor: 'white'\n  },\n  sendIcon: {\n    backgroundColor: 'orange',\n    borderRadius: 50,\n    right: 5\n  },\n  messageText: {\n    margin: 5\n  },\n  dateText: {\n    margin: 5\n  },\n  separator: {\n    height: 10\n  },\n  messageContainerSent: {\n    width: 200,\n    marginRight: 5,\n    alignSelf: 'flex-end',\n    backgroundColor: 'orange',\n    borderRadius: 5\n  },\n  textInput: {\n    margin: 10,\n    backgroundColor: 'white',\n    width: '90%'\n  },\n  messageContainerReceived: {\n    width: 200,\n    marginLeft: 5,\n    alignSelf: 'flex-start',\n    backgroundColor: '#3449BC',\n    borderRadius: 5\n  },\n  sendMessageContainer: {\n    borderRadius: 5,\n    marginTop: 10,\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: 'gray'\n  }\n});\n\nvar ItemSeparator = function ItemSeparator() {\n  return React.createElement(View, {\n    style: styles.separator\n  });\n};\n\nvar MessageItem = function MessageItem(_ref) {\n  var message = _ref.message;\n  var messageSent = message.user._id === firebase.auth().currentUser.uid;\n  var messageStyle = messageSent ? styles.messageContainerSent : styles.messageContainerReceived;\n  return React.createElement(View, {\n    style: messageStyle\n  }, React.createElement(View, null, React.createElement(Text, {\n    numberOfLines: 10,\n    style: styles.messageText\n  }, message.text), React.createElement(Text, {\n    style: styles.dateText\n  }, Moment(message.createdAt).format('DD-MM-YYYYTHH:mm'))));\n};\n\nvar Messenger = function Messenger() {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      messages = _useState2[0],\n      setMessages = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      text = _useState4[0],\n      setText = _useState4[1];\n\n  var currentUser = firebase.auth().currentUser;\n\n  var _useParams = useParams(),\n      id = _useParams.id;\n\n  useEffect(function () {}, []);\n  return React.createElement(View, {\n    style: styles.container\n  }, React.createElement(FlatList, {\n    data: messages,\n    inverted: true,\n    renderItem: function renderItem(_ref2) {\n      var item = _ref2.item;\n      return React.createElement(MessageItem, {\n        message: item\n      });\n    },\n    keyExtractor: function keyExtractor(_ref3) {\n      var id = _ref3.id;\n      return id;\n    },\n    ItemSeparatorComponent: ItemSeparator\n  }), React.createElement(View, {\n    style: styles.sendMessageContainer\n  }, React.createElement(TextInput, {\n    label: \"\",\n    value: text,\n    onChangeText: function onChangeText(text) {\n      return setText(text);\n    },\n    style: styles.textInput\n  }), React.createElement(IconButton, {\n    style: styles.sendIcon,\n    icon: \"send\",\n    size: 25,\n    onPress: function onPress() {\n      sendChatMessage(chatID(), text);\n    }\n  })));\n};\n\nexport default Messenger;","map":{"version":3,"sources":["/home/hejoel/fullstack/fullstack-ht/fullstack-ht/fullstack-ht-app/src/components/Messenger.jsx"],"names":["React","useState","useContext","useRef","useEffect","useCallback","Button","IconButton","TextInput","firebase","sendChatMessage","handleSend","GiftedChat","useParams","Text","Moment","styles","StyleSheet","create","container","zIndex","paddingHorizontal","paddingVertical","height","width","position","flexDirection","backgroundColor","sendIcon","borderRadius","right","messageText","margin","dateText","separator","messageContainerSent","marginRight","alignSelf","textInput","messageContainerReceived","marginLeft","sendMessageContainer","marginTop","alignItems","ItemSeparator","MessageItem","message","messageSent","user","_id","auth","currentUser","uid","messageStyle","text","createdAt","format","Messenger","messages","setMessages","setText","id","item","chatID"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useRef, useEffect, useCallback } from 'react';\nimport {View, StyleSheet, FlatList, Image} from 'react-native';\nimport {Button, IconButton, TextInput} from 'react-native-paper';\nimport * as firebase from 'firebase';\nimport { sendChatMessage, handleSend } from '../firebase/chat';\nimport { GiftedChat } from 'react-native-gifted-chat';\nimport { useParams } from 'react-router-native';\nimport Text from './Text';\nimport Moment from 'moment';\n\n\nconst styles = StyleSheet.create({\n    container: {\n        zIndex: 1,\n        paddingHorizontal: 5,\n        paddingVertical: 60,\n        height: '100%',\n        width: '100%',\n        position: 'absolute',\n        flexDirection: 'column',\n        backgroundColor: 'white'\n    },\n    sendIcon: {\n        backgroundColor: 'orange',\n        borderRadius: 50,\n        right: 5\n    },\n    messageText: {\n        margin: 5\n    },\n    dateText: {\n        margin: 5\n    },\n    separator: {\n        height: 10,\n    },\n    messageContainerSent: {\n        width: 200,\n        marginRight: 5,\n        alignSelf: 'flex-end',\n        backgroundColor: 'orange',\n        borderRadius: 5\n    },\n    textInput: {\n        margin: 10,\n        backgroundColor: 'white',\n        width: '90%'\n    },\n    messageContainerReceived: {\n        width: 200,\n        marginLeft: 5,\n        alignSelf: 'flex-start',\n        backgroundColor: '#3449BC',\n        borderRadius: 5\n    },\n    sendMessageContainer: {\n        borderRadius: 5,\n        marginTop: 10,\n        flexDirection: 'row',\n        alignItems: 'center',\n        backgroundColor: 'gray'\n        \n    }\n});\n\nconst ItemSeparator = () => <View style={styles.separator} />;\n\nconst MessageItem = ({message}) => {\n    const messageSent = message.user._id===firebase.auth().currentUser.uid;\n    const messageStyle = messageSent ? styles.messageContainerSent : styles.messageContainerReceived; \n\n    return (\n        <View style={messageStyle}>\n            <View>\n                <Text numberOfLines={10} style={styles.messageText}>\n                    {message.text}\n                </Text>\n                <Text style={styles.dateText}>\n               {Moment(message.createdAt).format('DD-MM-YYYYTHH:mm')}\n                </Text>\n            </View>\n      \n        </View>\n    );\n};\n\nconst Messenger = () => {\n\n    const [messages, setMessages] = useState([]);\n\n    const [text, setText] = useState('');\n    const currentUser = firebase.auth().currentUser;\n    const { id } = useParams();\n\n\n    // const chatID = () => {\n    //     const chatterID = currentUser.uid;\n    //     const chateeID = id;\n    //     const chatIDpre = [];\n    //     chatIDpre.push(chatterID);\n    //     chatIDpre.push(chateeID);\n    //     chatIDpre.sort();\n    //     return chatIDpre.join('_');\n    //   };\n\n    useEffect(() => {\n        // const messagesListener = firebase.firestore()\n        //     .collection('messages')\n        //     .doc(chatID())\n        //     .collection('chats')\n        //     .orderBy('createdAt', 'desc')\n        //     .onSnapshot(querySnapshot => {\n        //         const messages = querySnapshot.docs.map(doc => {\n        //             const firebaseData = doc.data();\n        //             console.log('firebaseData: ', firebaseData);\n\n        //             const data = {\n        //                 _id: doc.id,\n        //                 text: '',\n        //                 createdAt: new Date().getTime(),\n        //                 ...firebaseData\n        //             };\n\n        //             if (!firebaseData.system) {\n        //                 data.user = {\n        //                     ...firebaseData.user,\n        //                     name: firebaseData.user.email\n        //                 };\n        //             }\n\n        //             return data;\n        //         });\n\n        //         setMessages(messages);\n        //     });\n\n        // return () => messagesListener();\n    }, []);\n\n    return(\n        <View style={styles.container}>\n            <FlatList\n                data={messages}\n                inverted\n                renderItem={({ item }) => (\n                    <MessageItem\n                        message={item}\n                    />\n                )}\n                keyExtractor={({ id }) => id}\n                ItemSeparatorComponent={ItemSeparator}\n            />\n\n            <View style={styles.sendMessageContainer}>\n                <TextInput\n                    label=\"\"\n                    value={text}\n                    onChangeText={text => setText(text)}\n                    style={styles.textInput}\n                />\n                <IconButton style={styles.sendIcon} icon=\"send\" size={25} onPress={()=>{sendChatMessage(chatID(),text);}} />\n            </View>\n                    \n        </View>\n    );\n};\n\nexport default Messenger;"]},"metadata":{},"sourceType":"module"}