{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _jsxFileName = \"/home/hejoel/fullstack/fullstack-ht/fullstack-ht/fullstack-ht-app/src/components/CreateReview.jsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Button } from 'react-native-paper';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport { useHistory } from 'react-router-native';\nimport * as firebase from 'firebase';\nimport FormikTextInput from \"./FormikTextInput\";\nimport { useParams } from 'react-router-native';\nvar styles = StyleSheet.create({\n  container: {\n    justifyContent: 'center',\n    width: '100%',\n    height: '100%',\n    position: 'absolute',\n    zIndex: 1\n  },\n  fieldContainer: {\n    marginBottom: 15\n  }\n});\nvar initialValues = {\n  nosing: '',\n  taste: '',\n  finish: '',\n  rating: '',\n  comment: ''\n};\nvar validationSchema = yup.object().shape({\n  nosing: yup.string().required('Nosing is required'),\n  taste: yup.string().required('Taste is required'),\n  finish: yup.string().required('Finish is required'),\n  rating: yup.number('Rating must be a number').min(0, 'Rating must be greater or equal to 0').max(100, 'Rating must be less or equal to 100').required('Rating is required'),\n  comment: yup.string()\n});\n\nvar CreateReviewForm = function CreateReviewForm(_ref) {\n  var onSubmit = _ref.onSubmit;\n  return React.createElement(View, null, React.createElement(View, {\n    style: styles.fieldContainer\n  }, React.createElement(FormikTextInput, {\n    placeholder: \"Nosing\",\n    name: \"nosing\"\n  })), React.createElement(View, {\n    style: styles.fieldContainer\n  }, React.createElement(FormikTextInput, {\n    placeholder: \"Taste\",\n    name: \"taste\"\n  })), React.createElement(View, {\n    style: styles.fieldContainer\n  }, React.createElement(FormikTextInput, {\n    placeholder: \"Finish\",\n    name: \"finish\"\n  })), React.createElement(View, {\n    style: styles.fieldContainer\n  }, React.createElement(FormikTextInput, {\n    placeholder: \"Rating between 0 and 100\",\n    keyboardType: \"numeric\",\n    name: \"rating\"\n  })), React.createElement(View, {\n    style: styles.fieldContainer\n  }, React.createElement(FormikTextInput, {\n    placeholder: \"Comment\",\n    name: \"comment\",\n    multiline: true\n  })), React.createElement(Button, {\n    onPress: onSubmit\n  }, \"Create a review\"));\n};\n\nvar CreateReview = function CreateReview() {\n  var history = useHistory();\n\n  var _useParams = useParams(),\n      id = _useParams.id;\n\n  console.log('id: ', id);\n\n  var onSubmit = function onSubmit(values) {\n    var nosing, taste, finish, rating, comment, currentUser, firstName, lastName;\n    return _regeneratorRuntime.async(function onSubmit$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            nosing = values.nosing, taste = values.taste, finish = values.finish, rating = values.rating, comment = values.comment;\n            currentUser = firebase.auth().currentUser.uid;\n            firstName = '';\n            lastName = '';\n            firebase.firestore().collection('users').doc(currentUser).collection('userinfo');\n            firebase.firestore().collection('users').doc(currentUser).collection('userinfo').get().then(function (querySnapshot) {\n              var posts = querySnapshot.docs.map(function (doc) {\n                var data = doc.data();\n                return _objectSpread({}, data);\n              });\n              console.log('whiskies: ', posts);\n              setWhiskies(posts);\n            }).catch(function (error) {\n              console.log(\"Error getting documents: \", error);\n            });\n            firebase.firestore().collection('whiskies').doc(id).collection('reviews').add({\n              firstName: firstName,\n              lastName: lastName,\n              nosing: nosing,\n              taste: taste,\n              finish: finish,\n              rating: rating,\n              comment: comment\n            });\n            history.push('/');\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(View, {\n    style: styles.container\n  }, React.createElement(Formik, {\n    initialValues: initialValues,\n    onSubmit: onSubmit,\n    validationSchema: validationSchema\n  }, function (_ref2) {\n    var handleSubmit = _ref2.handleSubmit;\n    return React.createElement(CreateReviewForm, {\n      onSubmit: handleSubmit\n    });\n  }));\n};\n\nexport default CreateReview;","map":{"version":3,"sources":["/home/hejoel/fullstack/fullstack-ht/fullstack-ht/fullstack-ht-app/src/components/CreateReview.jsx"],"names":["React","Button","Formik","yup","useHistory","firebase","FormikTextInput","useParams","styles","StyleSheet","create","container","justifyContent","width","height","position","zIndex","fieldContainer","marginBottom","initialValues","nosing","taste","finish","rating","comment","validationSchema","object","shape","string","required","number","min","max","CreateReviewForm","onSubmit","CreateReview","history","id","console","log","values","currentUser","auth","uid","firstName","lastName","firestore","collection","doc","get","then","querySnapshot","posts","docs","map","data","setWhiskies","catch","error","add","push","handleSubmit"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport {Button} from 'react-native-paper';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport { useHistory } from 'react-router-native';\nimport * as firebase from 'firebase';\nimport FormikTextInput from './FormikTextInput';\nimport { useParams } from 'react-router-native';\n\nconst styles = StyleSheet.create({\n  container: {\n    justifyContent: 'center',\n    width: '100%',\n    height: '100%',\n    position: 'absolute',\n    zIndex: 1,\n  },\n  fieldContainer: {\n    marginBottom: 15,\n  },\n});\n\nconst initialValues = {\n  nosing: '',\n  taste: '',\n  finish: '',\n  rating: '',\n  comment: ''\n};\n\nconst validationSchema = yup.object().shape({\n  nosing: yup.string().required('Nosing is required'),\n  taste: yup.string().required('Taste is required'),\n  finish: yup.string().required('Finish is required'), \n  rating: yup\n  .number('Rating must be a number')\n  .min(0, 'Rating must be greater or equal to 0')\n  .max(100, 'Rating must be less or equal to 100')\n  .required('Rating is required'),\n  comment: yup.string(),\n});\n\nconst CreateReviewForm = ({ onSubmit }) => {\n  return (\n    <View >\n      <View style={styles.fieldContainer}>\n        <FormikTextInput placeholder=\"Nosing\" name=\"nosing\" />\n      </View>\n      <View style={styles.fieldContainer}>\n        <FormikTextInput placeholder=\"Taste\" name=\"taste\" />\n      </View>\n      <View style={styles.fieldContainer}>\n        <FormikTextInput placeholder=\"Finish\" name=\"finish\" />\n      </View>\n      <View style={styles.fieldContainer}>\n        <FormikTextInput\n          placeholder=\"Rating between 0 and 100\"\n          keyboardType=\"numeric\"\n          name=\"rating\"\n        />\n      </View>\n      <View style={styles.fieldContainer}>\n        <FormikTextInput placeholder=\"Comment\" name=\"comment\" multiline />\n      </View>\n\n      <Button onPress={onSubmit}>Create a review</Button>\n    </View>\n  );\n};\n\nconst CreateReview = () => {\n\n  const history = useHistory();\n  const { id } = useParams();\n\n  console.log('id: ', id);\n\n  const onSubmit = async (values) => {\n\n    const { nosing, taste, finish, rating, comment } = values;\n\n    const currentUser = firebase.auth().currentUser.uid;\n    const firstName = '';\n    const lastName = '';\n    \n    firebase.firestore().collection('users').doc(currentUser).collection('userinfo')\n\n    firebase.firestore()\n            .collection('users').doc(currentUser).collection('userinfo')\n            .get()\n            .then((querySnapshot) => {\n                let posts = querySnapshot.docs.map(doc => {\n                    const data = doc.data();\n                    return { ...data };\n                });\n                console.log('whiskies: ', posts);\n                setWhiskies(posts);\n            })\n            .catch((error) => {\n                console.log(\"Error getting documents: \", error);\n            });\n\n    firebase.firestore().collection('whiskies').doc(id).collection('reviews')\n      .add({\n        firstName: firstName,\n        lastName: lastName,\n        nosing: nosing,\n        taste: taste,\n        finish: finish,\n        rating: rating,\n        comment: comment\n      });\n\n    // firebase.firestore().collection('whiskies').doc(id).get().\n    //   then((doc) => {\n    //     firebase.firestore.collection('whiskies').doc(id).update({\n    //       reviewCount: doc.reviewCount + 1,\n    //       ratingAverage: (doc.ratingAverage + rating) / doc.reviewCount + 1\n    //     }).catch((error) => {\n    //       console.log(\"Error: \", error);\n    //     });\n    //   });\n\n\n    history.push('/');\n\n  };\n\n\n  return (\n    <View style={styles.container}>\n      <Formik\n        initialValues={initialValues}\n        onSubmit={onSubmit}\n        validationSchema={validationSchema}\n      >\n        {({ handleSubmit }) => <CreateReviewForm onSubmit={handleSubmit} />}\n      </Formik>\n    </View>\n  );\n};\n\nexport default CreateReview;"]},"metadata":{},"sourceType":"module"}