{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/home/hejoel/fullstack/fullstack-ht/fullstack-ht/fullstack-ht-app/src/components/SignUpPhone.jsx\";\nimport React, { useRef, useState } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { FirebaseRecaptchaVerifierModal, FirebaseRecaptchaBanner } from 'expo-firebase-recaptcha';\nimport * as firebase from 'firebase';\n\nvar SignUpPhone = function SignUpPhone() {\n  var recaptchaVerifier = useRef(null);\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      phoneNumber = _useState2[0],\n      setPhoneNumber = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      verificationId = _useState4[0],\n      setVerificationId = _useState4[1];\n\n  var _useState5 = useState(),\n      _useState6 = _slicedToArray(_useState5, 2),\n      verificationCode = _useState6[0],\n      setVerificationCode = _useState6[1];\n\n  var firebaseConfig = firebase.apps.length ? firebase.app().options : undefined;\n\n  var _React$useState = React.useState(!firebaseConfig || Platform.OS === 'web' ? {\n    text: 'To get started, provide a valid firebase config in App.js and open this snack on an iOS or Android device.'\n  } : undefined),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      message = _React$useState2[0],\n      showMessage = _React$useState2[1];\n\n  var attemptInvisibleVerification = false;\n  return React.createElement(View, {\n    style: {\n      padding: 20,\n      marginTop: 50\n    }\n  }, React.createElement(FirebaseRecaptchaVerifierModal, {\n    ref: recaptchaVerifier,\n    firebaseConfig: firebaseConfig,\n    attemptInvisibleVerification: attemptInvisibleVerification\n  }), React.createElement(Text, {\n    style: {\n      marginTop: 20\n    }\n  }, \"Enter phone number\"), React.createElement(TextInput, {\n    style: {\n      marginVertical: 10,\n      fontSize: 17\n    },\n    placeholder: \"+1 999 999 9999\",\n    autoFocus: true,\n    autoCompleteType: \"tel\",\n    keyboardType: \"phone-pad\",\n    textContentType: \"telephoneNumber\",\n    onChangeText: function onChangeText(phoneNumber) {\n      return setPhoneNumber(phoneNumber);\n    }\n  }), React.createElement(Button, {\n    title: \"Send Verification Code\",\n    disabled: !phoneNumber,\n    onPress: function _callee() {\n      var phoneProvider, _verificationId;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              phoneProvider = new firebase.auth.PhoneAuthProvider();\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(phoneProvider.verifyPhoneNumber(phoneNumber, recaptchaVerifier.current));\n\n            case 4:\n              _verificationId = _context.sent;\n              setVerificationId(_verificationId);\n              showMessage({\n                text: 'Verification code has been sent to your phone.'\n              });\n              _context.next = 12;\n              break;\n\n            case 9:\n              _context.prev = 9;\n              _context.t0 = _context[\"catch\"](0);\n              showMessage({\n                text: \"Error: \" + _context.t0.message,\n                color: 'red'\n              });\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 9]], Promise);\n    }\n  }), React.createElement(Text, {\n    style: {\n      marginTop: 20\n    }\n  }, \"Enter Verification code\"), React.createElement(TextInput, {\n    style: {\n      marginVertical: 10,\n      fontSize: 17\n    },\n    editable: !!verificationId,\n    placeholder: \"123456\",\n    onChangeText: setVerificationCode\n  }), React.createElement(Button, {\n    title: \"Confirm Verification Code\",\n    disabled: !verificationId,\n    onPress: function _callee2() {\n      var credential;\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              credential = firebase.auth.PhoneAuthProvider.credential(verificationId, verificationCode);\n              _context2.next = 4;\n              return _regeneratorRuntime.awrap(firebase.auth().signInWithCredential(credential));\n\n            case 4:\n              showMessage({\n                text: 'Phone authentication successful üëç'\n              });\n              _context2.next = 10;\n              break;\n\n            case 7:\n              _context2.prev = 7;\n              _context2.t0 = _context2[\"catch\"](0);\n              showMessage({\n                text: \"Error: \" + _context2.t0.message,\n                color: 'red'\n              });\n\n            case 10:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, [[0, 7]], Promise);\n    }\n  }), message ? React.createElement(TouchableOpacity, {\n    style: [StyleSheet.absoluteFill, {\n      backgroundColor: 0xffffffee,\n      justifyContent: 'center'\n    }],\n    onPress: function onPress() {\n      return showMessage(undefined);\n    }\n  }, React.createElement(Text, {\n    style: {\n      color: message.color || 'blue',\n      fontSize: 17,\n      textAlign: 'center',\n      margin: 20\n    }\n  }, message.text)) : undefined, attemptInvisibleVerification && React.createElement(FirebaseRecaptchaBanner, null));\n};\n\nexport default SignUpPhone;","map":{"version":3,"sources":["/home/hejoel/fullstack/fullstack-ht/fullstack-ht/fullstack-ht-app/src/components/SignUpPhone.jsx"],"names":["React","useRef","useState","FirebaseRecaptchaVerifierModal","FirebaseRecaptchaBanner","firebase","SignUpPhone","recaptchaVerifier","phoneNumber","setPhoneNumber","verificationId","setVerificationId","verificationCode","setVerificationCode","firebaseConfig","apps","length","app","options","undefined","Platform","OS","text","message","showMessage","attemptInvisibleVerification","padding","marginTop","marginVertical","fontSize","phoneProvider","auth","PhoneAuthProvider","verifyPhoneNumber","current","color","credential","signInWithCredential","StyleSheet","absoluteFill","backgroundColor","justifyContent","textAlign","margin"],"mappings":"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","sourcesContent":["import React, {useRef, useState} from 'react';\nimport {\n    Text,\n    View,\n    TextInput,\n    Button,\n    StyleSheet,\n    TouchableOpacity,\n    Platform,\n} from 'react-native';\nimport { FirebaseRecaptchaVerifierModal, FirebaseRecaptchaBanner } from 'expo-firebase-recaptcha';\nimport * as firebase from 'firebase';\n\nconst SignUpPhone = () => {\n\n    const recaptchaVerifier = useRef(null);\n    const [phoneNumber, setPhoneNumber] = useState();\n    const [verificationId, setVerificationId] = useState();\n    const [verificationCode, setVerificationCode] = useState();\n    const firebaseConfig = firebase.apps.length ? firebase.app().options : undefined;\n    const [message, showMessage] = React.useState(\n        !firebaseConfig || Platform.OS === 'web'\n            ? {\n                text:\n                    'To get started, provide a valid firebase config in App.js and open this snack on an iOS or Android device.',\n            }\n            : undefined\n    );\n    const attemptInvisibleVerification = false;\n\n\n\n    return (\n\n        <View style={{ padding: 20, marginTop: 50 }}>\n            <FirebaseRecaptchaVerifierModal\n                ref={recaptchaVerifier}\n                firebaseConfig={firebaseConfig}\n                attemptInvisibleVerification={attemptInvisibleVerification}\n            />\n            <Text style={{ marginTop: 20 }}>Enter phone number</Text>\n            <TextInput\n                style={{ marginVertical: 10, fontSize: 17 }}\n                placeholder=\"+1 999 999 9999\"\n                autoFocus\n                autoCompleteType=\"tel\"\n                keyboardType=\"phone-pad\"\n                textContentType=\"telephoneNumber\"\n                onChangeText={phoneNumber => setPhoneNumber(phoneNumber)}\n            />\n            <Button\n                title=\"Send Verification Code\"\n                disabled={!phoneNumber}\n                onPress={async () => {\n                    // The FirebaseRecaptchaVerifierModal ref implements the\n                    // FirebaseAuthApplicationVerifier interface and can be\n                    // passed directly to `verifyPhoneNumber`.\n                    try {\n                        const phoneProvider = new firebase.auth.PhoneAuthProvider();\n                        const verificationId = await phoneProvider.verifyPhoneNumber(\n                            phoneNumber,\n                            recaptchaVerifier.current\n                        );\n                        setVerificationId(verificationId);\n                        showMessage({\n                            text: 'Verification code has been sent to your phone.',\n                        });\n                    } catch (err) {\n                        showMessage({ text: `Error: ${err.message}`, color: 'red' });\n                    }\n                }}\n            />\n            <Text style={{ marginTop: 20 }}>Enter Verification code</Text>\n            <TextInput\n                style={{ marginVertical: 10, fontSize: 17 }}\n                editable={!!verificationId}\n                placeholder=\"123456\"\n                onChangeText={setVerificationCode}\n            />\n            <Button\n                title=\"Confirm Verification Code\"\n                disabled={!verificationId}\n                onPress={async () => {\n                    try {\n                        const credential = firebase.auth.PhoneAuthProvider.credential(\n                            verificationId,\n                            verificationCode\n                        );\n                        await firebase.auth().signInWithCredential(credential);\n                        showMessage({ text: 'Phone authentication successful üëç' });\n                    } catch (err) {\n                        showMessage({ text: `Error: ${err.message}`, color: 'red' });\n                    }\n                }}\n            />\n            {message ? (\n                <TouchableOpacity\n                    style={[\n                        StyleSheet.absoluteFill,\n                        { backgroundColor: 0xffffffee, justifyContent: 'center' },\n                    ]}\n                    onPress={() => showMessage(undefined)}>\n                    <Text\n                        style={{\n                            color: message.color || 'blue',\n                            fontSize: 17,\n                            textAlign: 'center',\n                            margin: 20,\n                        }}>\n                        {message.text}\n                    </Text>\n                </TouchableOpacity>\n            ) : (\n                    undefined\n                )}\n            {attemptInvisibleVerification && <FirebaseRecaptchaBanner />}\n        </View>\n\n    );\n\n\n\n};\n\nexport default SignUpPhone;"]},"metadata":{},"sourceType":"module"}