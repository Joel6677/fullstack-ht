{"ast":null,"code":"var _jsxFileName = \"/home/hejoel/fullstack/fullstack-ht/fullstack-ht/fullstack-ht-app/src/components/SideMenu.jsx\";\nimport React, { useContext, useEffect, useRef } from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { ToggleButton } from 'react-native-paper';\nimport { StateContext } from \"../state\";\nimport Button from \"./Button\";\nvar styles = StyleSheet.create({\n  sidebar: {\n    width: 200,\n    height: '100%',\n    backgroundColor: \"blue\"\n  },\n  button: {\n    padding: 10\n  }\n});\nexport var moveMenu = function moveMenu(props) {\n  console.log('stateInside: ', props.toggleAnim);\n};\n\nvar SideMenu = function SideMenu() {\n  var _useContext = useContext(StateContext),\n      state = _useContext.state;\n\n  var toggleAnim = useRef(new Animated.Value(0)).current;\n  var testi = state.open;\n  console.log('testi: ', testi);\n  return React.createElement(React.Fragment, null, React.createElement(Animated.View, {\n    style: [styles.sidebar, {\n      transform: [{\n        translateX: toggleAnim\n      }]\n    }]\n  }, React.createElement(View, {\n    style: styles.button\n  }, React.createElement(Button, {\n    color: \"error\",\n    onPress: function onPress() {\n      return moveMenu({\n        testi: testi,\n        toggleAnim: toggleAnim\n      });\n    }\n  }, \"Button1\"))));\n};\n\nexport default SideMenu;","map":{"version":3,"sources":["/home/hejoel/fullstack/fullstack-ht/fullstack-ht/fullstack-ht-app/src/components/SideMenu.jsx"],"names":["React","useContext","useEffect","useRef","ToggleButton","StateContext","Button","styles","StyleSheet","create","sidebar","width","height","backgroundColor","button","padding","moveMenu","props","console","log","toggleAnim","SideMenu","state","Animated","Value","current","testi","open","transform","translateX"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,EAAuCC,MAAvC,QAAqD,OAArD;;;;AAEA,SAASC,YAAT,QAA6B,oBAA7B;AAEA,SAASC,YAAT;AACA,OAAOC,MAAP;AAEA,IAAMC,MAAM,GAAGC,UAAU,CAACC,MAAX,CAAkB;AAC/BC,EAAAA,OAAO,EAAE;AACPC,IAAAA,KAAK,EAAE,GADA;AAEPC,IAAAA,MAAM,EAAE,MAFD;AAGPC,IAAAA,eAAe,EAAE;AAHV,GADsB;AAO/BC,EAAAA,MAAM,EAAE;AACNC,IAAAA,OAAO,EAAE;AADH;AAPuB,CAAlB,CAAf;AA+EA,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD,EAAW;AAEjCC,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BF,KAAK,CAACG,UAAnC;AAOD,CATM;;AAYP,IAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM;AAAA,oBACHpB,UAAU,CAACI,YAAD,CADP;AAAA,MACbiB,KADa,eACbA,KADa;;AAErB,MAAMF,UAAU,GAAGjB,MAAM,CAAC,IAAIoB,QAAQ,CAACC,KAAb,CAAmB,CAAnB,CAAD,CAAN,CAA8BC,OAAjD;AAEA,MAAMC,KAAK,GAAGJ,KAAK,CAACK,IAApB;AAEAT,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBO,KAAvB;AAEA,SACE,0CACE,oBAAC,QAAD,CAAU,IAAV;AAAe,IAAA,KAAK,EAAE,CAACnB,MAAM,CAACG,OAAR,EAAiB;AACrCkB,MAAAA,SAAS,EAAE,CAAC;AACVC,QAAAA,UAAU,EAAET;AADF,OAAD;AAD0B,KAAjB;AAAtB,KAKE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEb,MAAM,CAACO;AAApB,KACE,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAC,OAAd;AAAsB,IAAA,OAAO,EAAE;AAAA,aAAME,QAAQ,CAAC;AAACU,QAAAA,KAAK,EAALA,KAAD;AAAQN,QAAAA,UAAU,EAAVA;AAAR,OAAD,CAAd;AAAA;AAA/B,eADF,CALF,CADF,CADF;AAoBD,CA5BD;;AA8BA,eAAeC,QAAf","sourcesContent":["import React, { useContext, useEffect, useRef } from 'react';\nimport { Animated, StyleSheet, View } from 'react-native';\nimport { ToggleButton } from 'react-native-paper';\n\nimport { StateContext } from '../state';\nimport Button from './Button';\n\nconst styles = StyleSheet.create({\n  sidebar: {\n    width: 200,\n    height: '100%', \n    backgroundColor: \"blue\",\n    // position: 'fixed',\n  },\n  button: {\n    padding: 10,\n  }\n});\n\n// const SlideMenu = ({toggleAnim, state}) => {\n//   console.log('slideMenu');\n//   console.log('stateSlideMenu ', state);\n//   console.log('toggleAnim: ', toggleAnim);\n\n  // React.useEffect(() => {\n  //   Animated.spring(\n  //     toggleAnim,\n  //     {\n  //       toValue: state ? 0 : -200,\n  //     }\n  //   ).start();\n  // }, [toggleAnim, state]);\n  \n//   return (\n//     <Animated.View style={[styles.sidebar, {\n//       transform: [{\n//         translateX: toggleAnim\n//       }]\n//     }]}>\n//       <View style={styles.button}>\n//         <Button color='error' onPress={() => console.log('Button pressed')} >Button1</Button>\n//       </View>\n//       <View style={styles.button}>\n//         <Button color='error' onPress={() => console.log('Button pressed')} >Button2</Button>\n//       </View>\n//     </Animated.View>\n\n//   );\n// };\n\n\n// export class SlidingMenu extends React.Component {\n\n\n//   render() {\n\n//     const { state, toggleAnim } = this.props;\n\n//     console.log(toggleAnim);\n\n//     Animated.spring(\n//       toggleAnim,\n//       {\n//         toValue: state ? 0 : -200,\n//       }\n//     ).start();\n\n//     return (\n//       <Animated.View style={[styles.sidebar, {\n//         transform: [{\n//           translateX: toggleAnim\n//         }]\n//       }]}>\n//         <View style={styles.button}>\n//           <Button color='error' onPress={() => console.log('Button pressed')} >Button1</Button>\n//         </View>\n//         <View style={styles.button}>\n//           <Button color='error' onPress={() => console.log('Button pressed')} >Button2</Button>\n//         </View>\n//       </Animated.View>\n\n//     );\n//   }\n// }\n\n\nexport const moveMenu = (props) => {\n\n  console.log('stateInside: ', props.toggleAnim);\n  // Animated.spring(\n  //   toggleAnim,\n  //   {\n  //     toValue: state ? -50 : -100\n  //   }\n  // ).start();\n};\n\n\nconst SideMenu = () => {\n  const { state } = useContext(StateContext);\n  const toggleAnim = useRef(new Animated.Value(0)).current; // tämä ei muutu\n\n  const testi = state.open;\n\n  console.log('testi: ', testi);\n\n  return (\n    <>\n      <Animated.View style={[styles.sidebar, {\n        transform: [{\n          translateX: toggleAnim\n        }]\n      }]}>\n        <View style={styles.button}>\n          <Button color='error' onPress={() => moveMenu({testi ,toggleAnim})} >Button1</Button>\n        </View>\n      </Animated.View>\n\n      {/* < SlideMenu toggleAnim={toggleAnim} state={state}/> */}\n      {/* <SlidingMenu\n        state={state.open}\n        toggleAnim={toggleAnim}\n      /> */}\n    </>\n\n  );\n};\n\nexport default SideMenu;"]},"metadata":{},"sourceType":"module"}