{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/hejoel/fullstack/fullstack-ht/fullstack-ht/fullstack-ht-app/src/components/SignUpPhone.jsx\";\n\nimport React, { useRef, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { FirebaseRecaptchaVerifierModal, FirebaseRecaptchaBanner } from 'expo-firebase-recaptcha';\nimport firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nimport { firebaseConfig } from \"../firebase/Fire\";\nimport Text from \"./Text\";\nimport theme from \"../theme\";\nvar styles = StyleSheet.create({\n  container: {\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: 50,\n    position: 'absolute',\n    height: '100%',\n    width: '100%',\n    top: 50,\n    zIndex: 3\n  },\n  textInput: {\n    marginVertical: 20,\n    fontSize: 17\n  },\n  buttons: {\n    marginBottom: 20,\n    zIndex: 3\n  }\n});\n\nvar SignUpPhone = function SignUpPhone() {\n  var recaptchaVerifier = useRef(null);\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      phoneNumber = _useState2[0],\n      setPhoneNumber = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      verificationId = _useState4[0],\n      setVerificationId = _useState4[1];\n\n  var _useState5 = useState(),\n      _useState6 = _slicedToArray(_useState5, 2),\n      verificationCode = _useState6[0],\n      setVerificationCode = _useState6[1];\n\n  var _useState7 = useState(),\n      _useState8 = _slicedToArray(_useState7, 2),\n      message = _useState8[0],\n      showMessage = _useState8[1];\n\n  var attemptInvisibleVerification = false;\n  return React.createElement(View, {\n    style: styles.container\n  }, React.createElement(FirebaseRecaptchaVerifierModal, {\n    ref: recaptchaVerifier,\n    firebaseConfig: firebaseConfig,\n    attemptInvisibleVerification: attemptInvisibleVerification\n  }), React.createElement(Text, {\n    fontWeight: \"bold\"\n  }, \"Enter phone number\"), React.createElement(TextInput, {\n    style: styles.textInput,\n    placeholder: \"+1 999 999 9999\",\n    autoFocus: true,\n    autoCompleteType: \"tel\",\n    keyboardType: \"phone-pad\",\n    textContentType: \"telephoneNumber\",\n    onChangeText: function onChangeText(phoneNumber) {\n      return setPhoneNumber(phoneNumber);\n    }\n  }), React.createElement(View, {\n    style: styles.buttons\n  }, React.createElement(Button, {\n    color: theme.colors.primary,\n    title: \"Send Verification Code\",\n    disabled: !phoneNumber,\n    onPress: function _callee() {\n      var phoneProvider, _verificationId;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              phoneProvider = new firebase.auth.PhoneAuthProvider();\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(phoneProvider.verifyPhoneNumber(phoneNumber, recaptchaVerifier.current));\n\n            case 4:\n              _verificationId = _context.sent;\n              setVerificationId(_verificationId);\n              showMessage({\n                text: 'Verification code has been sent to your phone.'\n              });\n              _context.next = 12;\n              break;\n\n            case 9:\n              _context.prev = 9;\n              _context.t0 = _context[\"catch\"](0);\n              showMessage({\n                text: \"Error: \" + _context.t0.message,\n                color: 'red'\n              });\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 9]], Promise);\n    }\n  })), React.createElement(Text, {\n    fontWeight: \"bold\"\n  }, \"Enter Verification code\"), React.createElement(TextInput, {\n    style: styles.textInput,\n    editable: !!verificationId,\n    placeholder: \"123456\",\n    onChangeText: setVerificationCode\n  }), React.createElement(View, {\n    style: styles.button\n  }, React.createElement(Button, {\n    title: \"Confirm Verification Code\",\n    disabled: !verificationId,\n    onPress: function _callee2() {\n      var credential;\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              credential = firebase.auth.PhoneAuthProvider.credential(verificationId, verificationCode);\n              _context2.next = 4;\n              return _regeneratorRuntime.awrap(firebase.auth().signInWithCredential(credential));\n\n            case 4:\n              showMessage({\n                text: 'Phone authentication successful'\n              });\n              _context2.next = 10;\n              break;\n\n            case 7:\n              _context2.prev = 7;\n              _context2.t0 = _context2[\"catch\"](0);\n              showMessage({\n                text: \"Error: \" + _context2.t0.message,\n                color: 'red'\n              });\n\n            case 10:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, [[0, 7]], Promise);\n    }\n  })), message ? React.createElement(TouchableOpacity, {\n    style: [StyleSheet.absoluteFill, {\n      backgroundColor: 'white',\n      justifyContent: 'center',\n      zIndex: 10\n    }],\n    onPress: function onPress() {\n      return showMessage(undefined);\n    }\n  }, React.createElement(Text, {\n    style: {\n      color: message.color || 'blue',\n      fontSize: 17,\n      textAlign: 'center',\n      margin: 20,\n      zIndex: 10\n    }\n  }, message.text)) : undefined, attemptInvisibleVerification && React.createElement(FirebaseRecaptchaBanner, null));\n};\n\nexport default SignUpPhone;","map":{"version":3,"sources":["/home/hejoel/fullstack/fullstack-ht/fullstack-ht/fullstack-ht-app/src/components/SignUpPhone.jsx"],"names":["React","useRef","useState","FirebaseRecaptchaVerifierModal","FirebaseRecaptchaBanner","firebase","firebaseConfig","Text","theme","styles","StyleSheet","create","container","flexDirection","justifyContent","alignItems","padding","position","height","width","top","zIndex","textInput","marginVertical","fontSize","buttons","marginBottom","SignUpPhone","recaptchaVerifier","phoneNumber","setPhoneNumber","verificationId","setVerificationId","verificationCode","setVerificationCode","message","showMessage","attemptInvisibleVerification","colors","primary","phoneProvider","auth","PhoneAuthProvider","verifyPhoneNumber","current","text","color","button","credential","signInWithCredential","absoluteFill","backgroundColor","undefined","textAlign","margin"],"mappings":"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","sourcesContent":["import React, {useRef, useState} from 'react';\nimport {\n    View,\n    TextInput,\n    Button,\n    StyleSheet,\n    TouchableOpacity\n} from 'react-native';\nimport { FirebaseRecaptchaVerifierModal, FirebaseRecaptchaBanner } from 'expo-firebase-recaptcha';\n// import * as firebase from 'firebase';\nimport firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nimport {firebaseConfig} from '../firebase/Fire';\nimport Text from './Text';\nimport theme from '../theme';\n\n\nconst styles = StyleSheet.create({\n    container: {\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        padding: 50,\n        position: 'absolute',\n        height: '100%',\n        width: '100%',\n        top: 50,\n        zIndex: 3,\n    },\n    textInput: {\n        marginVertical: 20,\n        fontSize: 17,\n    },\n    buttons: {\n        marginBottom: 20,\n        zIndex: 3\n    }\n  });\n  \n\nconst SignUpPhone = () => {\n\n    const recaptchaVerifier = useRef(null);\n    const [phoneNumber, setPhoneNumber] = useState();\n    const [verificationId, setVerificationId] = useState();\n    const [verificationCode, setVerificationCode] = useState();\n    const [message, showMessage] = useState();\n\n    const attemptInvisibleVerification = false;\n\n    return (\n\n        <View style={styles.container}>\n            <FirebaseRecaptchaVerifierModal\n                ref={recaptchaVerifier}\n                firebaseConfig={firebaseConfig}\n                attemptInvisibleVerification={attemptInvisibleVerification}\n            />\n            <Text fontWeight='bold'>Enter phone number</Text>\n            <TextInput\n                style={styles.textInput}\n                placeholder=\"+1 999 999 9999\"\n                autoFocus\n                autoCompleteType=\"tel\"\n                keyboardType=\"phone-pad\"\n                textContentType=\"telephoneNumber\"\n                onChangeText={phoneNumber => setPhoneNumber(phoneNumber)}\n            />\n            <View style={styles.buttons}>\n            <Button\n                color={theme.colors.primary}\n                title=\"Send Verification Code\"\n                disabled={!phoneNumber}\n                onPress={async () => {\n                    // The FirebaseRecaptchaVerifierModal ref implements the\n                    // FirebaseAuthApplicationVerifier interface and can be\n                    // passed directly to `verifyPhoneNumber`.\n                    try {\n                        const phoneProvider = new firebase.auth.PhoneAuthProvider();\n                        const verificationId = await phoneProvider.verifyPhoneNumber(\n                            phoneNumber,\n                            recaptchaVerifier.current\n                        );\n                        setVerificationId(verificationId);\n                        showMessage({\n                            text: 'Verification code has been sent to your phone.',\n                        });\n                    } catch (err) {\n                        showMessage({ text: `Error: ${err.message}`, color: 'red' });\n                    }\n                }}\n            />\n            </View>\n            \n            <Text fontWeight='bold'>Enter Verification code</Text>\n            <TextInput\n                style={styles.textInput}\n                editable={!!verificationId}\n                placeholder=\"123456\"\n                onChangeText={setVerificationCode}\n            />\n            <View style={styles.button}>\n            <Button\n                title=\"Confirm Verification Code\"\n                disabled={!verificationId}\n                onPress={async () => {\n                    try {\n                        const credential = firebase.auth.PhoneAuthProvider.credential(\n                            verificationId,\n                            verificationCode\n                        );\n                        await firebase.auth().signInWithCredential(credential);\n                        showMessage({ text: 'Phone authentication successful' });\n                    } catch (err) {\n                        showMessage({ text: `Error: ${err.message}`, color: 'red'});\n                    }\n                }}\n            />\n            </View>\n            {message ? (\n                <TouchableOpacity\n                    style={[\n                        StyleSheet.absoluteFill,\n                        { backgroundColor: 'white', justifyContent: 'center', zIndex: 10},\n                    ]}\n                    onPress={() => showMessage(undefined)}>\n                    <Text\n                        style={{\n                            color: message.color || 'blue',\n                            fontSize: 17,\n                            textAlign: 'center',\n                            margin: 20,\n                            zIndex: 10\n                        }}>\n                        {message.text}\n                    </Text>\n                </TouchableOpacity>\n            ) : (\n                    undefined\n                )} \n            {attemptInvisibleVerification && <FirebaseRecaptchaBanner />}\n        </View>\n\n    );\n\n\n\n};\n\nexport default SignUpPhone;"]},"metadata":{},"sourceType":"module"}