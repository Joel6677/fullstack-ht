{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/home/hejoel/fullstack/fullstack-ht/fullstack-ht/fullstack-ht-app/src/components/SignUpPhone.jsx\";\nimport React, { useRef, useState } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { FirebaseRecaptchaVerifierModal, FirebaseRecaptchaBanner } from 'expo-firebase-recaptcha';\nimport * as firebase from 'firebase';\nimport { firebaseConfig } from \"../firebase/Fire\";\nvar styles = StyleSheet.create({\n  container: {\n    padding: 20,\n    position: 'absolute',\n    top: 50,\n    zIndex: 3\n  },\n  textInput: {\n    marginVertical: 10,\n    fontSize: 17,\n    zIndex: 1000\n  },\n  buttons: {\n    marginBottom: 12\n  }\n});\n\nvar SignUpPhone = function SignUpPhone() {\n  var recaptchaVerifier = useRef(null);\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      phoneNumber = _useState2[0],\n      setPhoneNumber = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      verificationId = _useState4[0],\n      setVerificationId = _useState4[1];\n\n  var _useState5 = useState(),\n      _useState6 = _slicedToArray(_useState5, 2),\n      verificationCode = _useState6[0],\n      setVerificationCode = _useState6[1];\n\n  var _useState7 = useState(),\n      _useState8 = _slicedToArray(_useState7, 2),\n      message = _useState8[0],\n      showMessage = _useState8[1];\n\n  var attemptInvisibleVerification = false;\n  return React.createElement(View, {\n    style: styles.container\n  }, React.createElement(Text, null, \"Enter phone number\"), React.createElement(View, {\n    style: styles.buttons\n  }, React.createElement(Button, {\n    color: \"blue\",\n    title: \"Send Verification Code\",\n    disabled: !phoneNumber\n  })), React.createElement(Text, null, \"Enter Verification code\"), React.createElement(TextInput, {\n    style: styles.textInput,\n    editable: !!verificationId,\n    placeholder: \"123456\",\n    onChangeText: setVerificationCode\n  }), React.createElement(View, {\n    style: styles.button\n  }, React.createElement(Button, {\n    title: \"Confirm Verification Code\",\n    disabled: !verificationId,\n    onPress: function _callee() {\n      var credential;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              credential = firebase.auth.PhoneAuthProvider.credential(verificationId, verificationCode);\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(firebase.auth().signInWithCredential(credential));\n\n            case 4:\n              showMessage({\n                text: 'Phone authentication successful 👍'\n              });\n              _context.next = 10;\n              break;\n\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](0);\n              showMessage({\n                text: \"Error: \" + _context.t0.message,\n                color: 'red'\n              });\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 7]], Promise);\n    }\n  })), message ? React.createElement(TouchableOpacity, {\n    style: [StyleSheet.absoluteFill, {\n      backgroundColor: 'white',\n      justifyContent: 'center'\n    }],\n    onPress: function onPress() {\n      return showMessage(undefined);\n    }\n  }, React.createElement(Text, {\n    style: {\n      color: message.color || 'blue',\n      fontSize: 17,\n      textAlign: 'center',\n      margin: 20\n    }\n  }, message.text)) : undefined, attemptInvisibleVerification && React.createElement(FirebaseRecaptchaBanner, null));\n};\n\nexport default SignUpPhone;","map":{"version":3,"sources":["/home/hejoel/fullstack/fullstack-ht/fullstack-ht/fullstack-ht-app/src/components/SignUpPhone.jsx"],"names":["React","useRef","useState","FirebaseRecaptchaVerifierModal","FirebaseRecaptchaBanner","firebase","firebaseConfig","styles","StyleSheet","create","container","padding","position","top","zIndex","textInput","marginVertical","fontSize","buttons","marginBottom","SignUpPhone","recaptchaVerifier","phoneNumber","setPhoneNumber","verificationId","setVerificationId","verificationCode","setVerificationCode","message","showMessage","attemptInvisibleVerification","button","credential","auth","PhoneAuthProvider","signInWithCredential","text","color","absoluteFill","backgroundColor","justifyContent","undefined","textAlign","margin"],"mappings":"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","sourcesContent":["import React, {useRef, useState} from 'react';\nimport {\n    Text,\n    View,\n    TextInput,\n    Button,\n    StyleSheet,\n    TouchableOpacity\n} from 'react-native';\nimport { FirebaseRecaptchaVerifierModal, FirebaseRecaptchaBanner } from 'expo-firebase-recaptcha';\nimport * as firebase from 'firebase';\nimport {firebaseConfig} from '../firebase/Fire';\n\n\nconst styles = StyleSheet.create({\n    container: {\n        padding: 20,\n        position: 'absolute',\n        top: 50,\n        zIndex: 3\n    },\n    textInput: {\n        marginVertical: 10,\n        fontSize: 17,\n        zIndex: 1000\n    },\n    buttons: {\n        marginBottom: 12\n    }\n  });\n  \n\nconst SignUpPhone = () => {\n\n    const recaptchaVerifier = useRef(null);\n    const [phoneNumber, setPhoneNumber] = useState();\n    const [verificationId, setVerificationId] = useState();\n    const [verificationCode, setVerificationCode] = useState();\n    const [message, showMessage] = useState();\n\n    const attemptInvisibleVerification = false;\n\n    return (\n\n        <View style={styles.container}>\n            {/* <FirebaseRecaptchaVerifierModal\n                ref={recaptchaVerifier}\n                firebaseConfig={firebaseConfig}\n                attemptInvisibleVerification={attemptInvisibleVerification}\n            /> */}\n            <Text>Enter phone number</Text>\n            {/* <TextInput\n                style={styles.textInput}\n                placeholder=\"+1 999 999 9999\"\n                autoFocus\n                autoCompleteType=\"tel\"\n                keyboardType=\"phone-pad\"\n                textContentType=\"telephoneNumber\"\n                onChangeText={phoneNumber => setPhoneNumber(phoneNumber)}\n            /> */}\n            <View style={styles.buttons}>\n            <Button\n                color='blue'\n                title=\"Send Verification Code\"\n                disabled={!phoneNumber}\n                // onPress={async () => {\n                //     // The FirebaseRecaptchaVerifierModal ref implements the\n                //     // FirebaseAuthApplicationVerifier interface and can be\n                //     // passed directly to `verifyPhoneNumber`.\n                //     try {\n                //         const phoneProvider = new firebase.auth.PhoneAuthProvider();\n                //         const verificationId = await phoneProvider.verifyPhoneNumber(\n                //             phoneNumber,\n                //             recaptchaVerifier.current\n                //         );\n                //         setVerificationId(verificationId);\n                //         showMessage({\n                //             text: 'Verification code has been sent to your phone.',\n                //         });\n                //     } catch (err) {\n                //         showMessage({ text: `Error: ${err.message}`, color: 'red' });\n                //     }\n                // }}\n            />\n            </View>\n            \n            <Text>Enter Verification code</Text>\n            <TextInput\n                style={styles.textInput}\n                editable={!!verificationId}\n                placeholder=\"123456\"\n                onChangeText={setVerificationCode}\n            />\n            <View style={styles.button}>\n            <Button\n                title=\"Confirm Verification Code\"\n                disabled={!verificationId}\n                onPress={async () => {\n                    try {\n                        const credential = firebase.auth.PhoneAuthProvider.credential(\n                            verificationId,\n                            verificationCode\n                        );\n                        await firebase.auth().signInWithCredential(credential);\n                        showMessage({ text: 'Phone authentication successful 👍' });\n                    } catch (err) {\n                        showMessage({ text: `Error: ${err.message}`, color: 'red'});\n                    }\n                }}\n            />\n            </View>\n            {message ? (\n                <TouchableOpacity\n                    style={[\n                        StyleSheet.absoluteFill,\n                        { backgroundColor: 'white', justifyContent: 'center'},\n                    ]}\n                    onPress={() => showMessage(undefined)}>\n                    <Text\n                        style={{\n                            color: message.color || 'blue',\n                            fontSize: 17,\n                            textAlign: 'center',\n                            margin: 20,\n                        }}>\n                        {message.text}\n                    </Text>\n                </TouchableOpacity>\n            ) : (\n                    undefined\n                )} \n            {attemptInvisibleVerification && <FirebaseRecaptchaBanner />}\n        </View>\n\n    );\n\n\n\n};\n\nexport default SignUpPhone;"]},"metadata":{},"sourceType":"module"}