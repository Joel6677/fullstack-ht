{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar _jsxFileName = \"/home/hejoel/fullstack/fullstack-ht/fullstack-ht/fullstack-ht-app/src/components/SignUp.jsx\";\nimport React, { useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport { useHistory } from 'react-router-native';\nimport { useMutation } from '@apollo/react-hooks';\nimport { signUpWithEmail } from \"../firebase/firebaseFunctions\";\nimport Button from \"./Button\";\nimport FormikTextInput from \"./FormikTextInput\";\nimport useSignIn from \"../hooks/useSignIn\";\nimport { CREATE_USER } from \"../graphql/mutations\";\nimport Text from \"./Text\";\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'white',\n    padding: 15\n  },\n  fieldContainer: {\n    marginBottom: 15\n  }\n});\nvar initialValues = {\n  name: '',\n  password: '',\n  passwordConfirmation: ''\n};\nvar validationSchema = yup.object().shape({\n  name: yup.string().min(1, 'Name must be at least 1 character long').max(30, 'Name must be at most 30 characters long').required('Name is required'),\n  email: yup.string().required('Email is required'),\n  password: yup.string().min(5, 'Password must be at least 5 characters long').max(50, 'Password must be at least 50 characters long').required('Password is required'),\n  passwordConfirmation: yup.string().oneOf([yup.ref('password'), null], 'Password confirmation must match the password').required('Password confirmation is required')\n});\n\nvar SignUpForm = function SignUpForm(_ref) {\n  var onSubmit = _ref.onSubmit;\n  return React.createElement(View, {\n    style: styles.container\n  }, React.createElement(View, {\n    style: styles.fieldContainer\n  }, React.createElement(FormikTextInput, {\n    name: \"email\",\n    placeholder: \"Email\"\n  })), React.createElement(View, {\n    style: styles.fieldContainer\n  }, React.createElement(FormikTextInput, {\n    name: \"name\",\n    placeholder: \"Name\"\n  })), React.createElement(View, {\n    style: styles.fieldContainer\n  }, React.createElement(FormikTextInput, {\n    name: \"password\",\n    placeholder: \"Password\",\n    secureTextEntry: true\n  })), React.createElement(View, {\n    style: styles.fieldContainer\n  }, React.createElement(FormikTextInput, {\n    name: \"passwordConfirmation\",\n    placeholder: \"Password confirmation\",\n    secureTextEntry: true\n  })), React.createElement(Button, {\n    onPress: onSubmit,\n    testID: \"submitButton\"\n  }, \"Sign up\"));\n};\n\nvar SignUp = function SignUp() {\n  var history = useHistory();\n\n  var onSubmit = function onSubmit(values) {\n    var email, name, password;\n    return _regeneratorRuntime.async(function onSubmit$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            email = values.email, name = values.name, password = values.password;\n            signUpWithEmail(email, name, password);\n            history.push('/');\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(Formik, {\n    initialValues: initialValues,\n    onSubmit: onSubmit,\n    validationSchema: validationSchema\n  }, function (_ref2) {\n    var handleSubmit = _ref2.handleSubmit;\n    return React.createElement(SignUpForm, {\n      onSubmit: handleSubmit\n    });\n  });\n};\n\nexport default SignUp;","map":{"version":3,"sources":["/home/hejoel/fullstack/fullstack-ht/fullstack-ht/fullstack-ht-app/src/components/SignUp.jsx"],"names":["React","useState","Formik","yup","useHistory","useMutation","signUpWithEmail","Button","FormikTextInput","useSignIn","CREATE_USER","Text","styles","StyleSheet","create","container","backgroundColor","padding","fieldContainer","marginBottom","initialValues","name","password","passwordConfirmation","validationSchema","object","shape","string","min","max","required","email","oneOf","ref","SignUpForm","onSubmit","SignUp","history","values","push","handleSubmit"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport { useHistory } from 'react-router-native';\nimport { useMutation } from '@apollo/react-hooks';\nimport { signUpWithEmail } from '../firebase/firebaseFunctions';\n\nimport Button from './Button';\nimport FormikTextInput from './FormikTextInput';\nimport useSignIn from '../hooks/useSignIn';\nimport { CREATE_USER } from '../graphql/mutations';\n\nimport Text from './Text';\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'white',\n    padding: 15,\n  },\n  fieldContainer: {\n    marginBottom: 15,\n  },\n});\n\nconst initialValues = {\n  name: '',\n  password: '',\n  passwordConfirmation: '',\n};\n\nconst validationSchema = yup.object().shape({\n  name: yup\n    .string()\n    .min(1, 'Name must be at least 1 character long')\n    .max(30, 'Name must be at most 30 characters long')\n    .required('Name is required'),\n  email: yup\n    .string()\n    .required('Email is required'),\n  password: yup\n    .string()\n    .min(5, 'Password must be at least 5 characters long')\n    .max(50, 'Password must be at least 50 characters long')\n    .required('Password is required'),\n  passwordConfirmation: yup\n    .string()\n    .oneOf(\n      [yup.ref('password'), null],\n      'Password confirmation must match the password',\n    )\n    .required('Password confirmation is required'),\n});\n\nconst SignUpForm = ({ onSubmit }) => {\n  return (\n    <View style={styles.container}>\n\n      <View style={styles.fieldContainer}>\n        <FormikTextInput name=\"email\" placeholder=\"Email\" />\n      </View>\n\n      <View style={styles.fieldContainer}>\n        <FormikTextInput name=\"name\" placeholder=\"Name\" />\n      </View>\n\n      <View style={styles.fieldContainer}>\n        <FormikTextInput\n          name=\"password\"\n          placeholder=\"Password\"\n          secureTextEntry\n        />\n      </View>\n\n      <View style={styles.fieldContainer}>\n        <FormikTextInput\n          name=\"passwordConfirmation\"\n          placeholder=\"Password confirmation\"\n          secureTextEntry\n        />\n      </View>\n\n      <Button onPress={onSubmit} testID=\"submitButton\">\n        Sign up\n      </Button>\n    </View>\n  );\n};\n\nconst SignUp = () => {\n  const history = useHistory();\n\n  const onSubmit = async (values) => {\n    const { email, name, password } = values;\n\n    signUpWithEmail(email, name, password);\n\n    history.push('/');\n  };\n\n  return (\n\n    <Formik\n      initialValues={initialValues}\n      onSubmit={onSubmit}\n      validationSchema={validationSchema}\n    >\n      {({ handleSubmit }) => <SignUpForm onSubmit={handleSubmit} />}\n    </Formik>\n  );\n};\n\nexport default SignUp;"]},"metadata":{},"sourceType":"module"}