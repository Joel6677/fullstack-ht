{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Swiper from \"./Swiper\";\nimport Month from \"./Month\";\nimport { areDatesOnSameDay, dateToUnix, getInitialIndex } from \"./dateUtils\";\nimport CalendarHeader from \"./CalendarHeader\";\nimport { useCallback, useMemo } from 'react';\nimport YearPicker from \"./YearPicker\";\nimport Color from 'color';\nimport { useTheme } from 'react-native-paper';\nimport { useLatest } from \"../utils\";\n\nfunction Calendar(props) {\n  var locale = props.locale,\n      mode = props.mode,\n      onChange = props.onChange,\n      startDate = props.startDate,\n      endDate = props.endDate,\n      date = props.date,\n      excludedDates = props.excludedDates,\n      disableWeekDays = props.disableWeekDays,\n      dates = props.dates;\n  var theme = useTheme();\n  var selectColor = useMemo(function () {\n    if (theme.dark) {\n      return Color(theme.colors.primary).hex();\n    }\n\n    return Color(theme.colors.primary).lighten(0.9).hex();\n  }, [theme]);\n  var scrollMode = mode === 'range' || mode === 'excludeInRange' ? 'vertical' : 'horizontal';\n\n  var _React$useState = React.useState(undefined),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      selectedYear = _React$useState2[0],\n      setSelectedYear = _React$useState2[1];\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      selectingYear = _React$useState4[0],\n      setSelectingYear = _React$useState4[1];\n\n  var onPressYear = useCallback(function (year) {\n    setSelectedYear(year);\n    setSelectingYear(function (prev) {\n      return !prev;\n    });\n  }, [setSelectingYear]);\n  var startDateRef = useLatest(startDate);\n  var excludedDatesRef = useLatest(excludedDates);\n  var endDateRef = useLatest(endDate);\n  var onChangeRef = useLatest(onChange);\n  var datesRef = useLatest(dates);\n  var onPressDate = useCallback(function (d) {\n    if (mode === 'single') {\n      ;\n      onChangeRef.current({\n        date: d\n      });\n    } else if (mode === 'range') {\n      var sd = startDateRef.current;\n      var ed = endDateRef.current;\n      var isStart = true;\n\n      if (sd && !ed && dateToUnix(d) > dateToUnix(sd)) {\n        isStart = false;\n      }\n\n      ;\n      onChangeRef.current({\n        startDate: isStart ? d : sd,\n        endDate: !isStart ? new Date(d.getFullYear(), d.getMonth(), d.getDate(), 23, 59, 59) : undefined\n      });\n    } else if (mode === 'excludeInRange') {\n      var exists = excludedDatesRef.current.some(function (ed) {\n        return areDatesOnSameDay(ed, d);\n      });\n      var newExcludedDates = exists ? excludedDatesRef.current.filter(function (ed) {\n        return !areDatesOnSameDay(ed, d);\n      }) : [].concat(_toConsumableArray(excludedDatesRef.current), [new Date(d.getFullYear(), d.getMonth(), d.getDate(), 0, 0, 0)]);\n      newExcludedDates.sort(function (a, b) {\n        return a.getTime() - b.getTime();\n      });\n      onChangeRef.current({\n        excludedDates: newExcludedDates\n      });\n    } else if (mode === 'multiple') {\n      datesRef.current = datesRef.current || [];\n\n      var _exists = datesRef.current.some(function (ed) {\n        return areDatesOnSameDay(ed, d);\n      });\n\n      var newDates = _exists ? datesRef.current.filter(function (ed) {\n        return !areDatesOnSameDay(ed, d);\n      }) : [].concat(_toConsumableArray(datesRef.current), [d]);\n      newDates.sort(function (a, b) {\n        return a.getTime() - b.getTime();\n      });\n      onChangeRef.current({\n        dates: newDates,\n        datePressed: d,\n        change: _exists ? 'removed' : 'added'\n      });\n    }\n  }, [mode, onChangeRef, startDateRef, endDateRef, excludedDatesRef, datesRef]);\n  return React.createElement(View, {\n    style: styles.root\n  }, React.createElement(Swiper, {\n    initialIndex: getInitialIndex(startDate || date),\n    selectedYear: selectedYear,\n    scrollMode: scrollMode,\n    renderItem: function renderItem(_ref) {\n      var index = _ref.index;\n      return React.createElement(Month, {\n        locale: locale,\n        mode: mode,\n        key: index,\n        index: index,\n        startDate: startDate,\n        endDate: endDate,\n        date: date,\n        dates: dates,\n        onPressYear: onPressYear,\n        selectingYear: selectingYear,\n        onPressDate: onPressDate,\n        scrollMode: scrollMode,\n        primaryColor: theme.colors.primary,\n        selectColor: selectColor,\n        roundness: theme.roundness,\n        disableWeekDays: disableWeekDays,\n        excludedDates: excludedDates\n      });\n    },\n    renderHeader: function renderHeader(_ref2) {\n      var onPrev = _ref2.onPrev,\n          onNext = _ref2.onNext;\n      return React.createElement(CalendarHeader, {\n        locale: locale,\n        onPrev: onPrev,\n        onNext: onNext,\n        scrollMode: scrollMode,\n        disableWeekDays: disableWeekDays\n      });\n    }\n  }), scrollMode === 'horizontal' ? React.createElement(YearPicker, {\n    selectedYear: selectedYear,\n    selectingYear: selectingYear,\n    onPressYear: onPressYear\n  }) : null);\n}\n\nvar styles = StyleSheet.create({\n  root: {\n    flex: 1\n  },\n  viewPager: {\n    flex: 1\n  }\n});\nexport default React.memo(Calendar);","map":{"version":3,"sources":["Calendar.tsx"],"names":["dates","theme","useTheme","selectColor","useMemo","Color","scrollMode","mode","React","onPressYear","useCallback","year","setSelectedYear","setSelectingYear","prev","startDateRef","useLatest","excludedDatesRef","endDateRef","onChangeRef","datesRef","onPressDate","d","date","sd","ed","isStart","dateToUnix","startDate","endDate","undefined","exists","areDatesOnSameDay","newExcludedDates","a","b","excludedDates","newDates","datePressed","change","styles","root","getInitialIndex","index","onNext","disableWeekDays","flex","viewPager"],"mappings":"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","sourcesContent":["import * as React from 'react'\nimport { StyleSheet, View } from 'react-native'\n\nimport Swiper from './Swiper'\n\nimport Month from './Month'\nimport {\n  areDatesOnSameDay,\n  dateToUnix,\n  DisableWeekDaysType,\n  getInitialIndex,\n} from './dateUtils'\n\nimport CalendarHeader from './CalendarHeader'\nimport { useCallback, useMemo } from 'react'\nimport YearPicker from './YearPicker'\nimport Color from 'color'\nimport { useTheme } from 'react-native-paper'\nimport { useLatest } from '../utils'\n\nexport type ModeType = 'single' | 'range' | 'excludeInRange' | 'multiple'\n\nexport type ScrollModeType = 'horizontal' | 'vertical'\n\nexport type BaseCalendarProps = {\n  locale?: undefined | string\n  disableWeekDays?: DisableWeekDaysType\n}\n\nexport type CalendarDate = Date | undefined\n\nexport type ExcludeInRangeChange = (params: { excludedDates: Date[] }) => any\n\nexport type RangeChange = (params: {\n  startDate: CalendarDate\n  endDate: CalendarDate\n}) => any\n\nexport type SingleChange = (params: { date: CalendarDate }) => any\n\nexport type MultiChange = (params: {\n  dates: CalendarDate[]\n  datePressed: CalendarDate\n  change: 'added' | 'removed'\n}) => any\n\nexport type MultiConfirm = (params: { dates: CalendarDate[] }) => any\n\nexport interface CalendarSingleProps extends BaseCalendarProps {\n  mode: 'single'\n  date?: CalendarDate\n  onChange: SingleChange\n}\n\nexport interface CalendarRangeProps extends BaseCalendarProps {\n  mode: 'range'\n  startDate: CalendarDate\n  endDate: CalendarDate\n  onChange: RangeChange\n}\n\nexport interface CalendarExcludeInRangeProps extends BaseCalendarProps {\n  mode: 'excludeInRange'\n  excludedDates: Date[]\n  startDate: CalendarDate\n  endDate: CalendarDate\n  onChange: ExcludeInRangeChange\n}\n\nexport interface CalendarMultiProps extends BaseCalendarProps {\n  mode: 'multiple'\n  dates?: CalendarDate[]\n  onChange: MultiChange\n}\n\nfunction Calendar(\n  props:\n    | CalendarSingleProps\n    | CalendarRangeProps\n    | CalendarExcludeInRangeProps\n    | CalendarMultiProps\n) {\n  const {\n    locale,\n    mode,\n    onChange,\n    // @ts-ignore\n    startDate,\n    // @ts-ignore\n    endDate,\n    // @ts-ignore\n    date,\n    // @ts-ignore\n    excludedDates,\n    disableWeekDays,\n    // @ts-ignore\n    dates,\n  } = props\n\n  const theme = useTheme()\n\n  const selectColor = useMemo<string>(() => {\n    if (theme.dark) {\n      return Color(theme.colors.primary).hex()\n    }\n    return Color(theme.colors.primary).lighten(0.9).hex()\n  }, [theme])\n\n  const scrollMode =\n    mode === 'range' || mode === 'excludeInRange' ? 'vertical' : 'horizontal'\n\n  const [selectedYear, setSelectedYear] = React.useState<number | undefined>(\n    undefined\n  )\n  const [selectingYear, setSelectingYear] = React.useState<boolean>(false)\n  const onPressYear = useCallback(\n    (year: number) => {\n      setSelectedYear(year)\n      setSelectingYear((prev) => !prev)\n    },\n    [setSelectingYear]\n  )\n\n  // prevent re-rendering all months when something changed we only need the\n  // latest version of the props and we don't want the useCallback to change\n  const startDateRef = useLatest<CalendarDate>(startDate)\n  const excludedDatesRef = useLatest<Date[]>(excludedDates)\n  const endDateRef = useLatest<CalendarDate>(endDate)\n  const onChangeRef = useLatest<\n    RangeChange | SingleChange | ExcludeInRangeChange | MultiChange\n  >(onChange)\n  const datesRef = useLatest<Date[]>(dates)\n\n  const onPressDate = useCallback(\n    (d: Date) => {\n      if (mode === 'single') {\n        ;(onChangeRef.current as SingleChange)({\n          date: d,\n        })\n      } else if (mode === 'range') {\n        const sd = startDateRef.current\n        const ed = endDateRef.current\n        let isStart: boolean = true\n        if (sd && !ed && dateToUnix(d) > dateToUnix(sd!)) {\n          isStart = false\n        }\n        ;(onChangeRef.current as RangeChange)({\n          startDate: isStart ? d : sd,\n          endDate: !isStart\n            ? new Date(d.getFullYear(), d.getMonth(), d.getDate(), 23, 59, 59)\n            : undefined,\n        })\n      } else if (mode === 'excludeInRange') {\n        const exists = excludedDatesRef.current.some((ed) =>\n          areDatesOnSameDay(ed, d)\n        )\n        const newExcludedDates = exists\n          ? excludedDatesRef.current.filter((ed) => !areDatesOnSameDay(ed, d))\n          : [\n              ...excludedDatesRef.current,\n              new Date(d.getFullYear(), d.getMonth(), d.getDate(), 0, 0, 0),\n            ]\n        newExcludedDates.sort((a, b) => a.getTime() - b.getTime())\n        ;(onChangeRef.current as ExcludeInRangeChange)({\n          excludedDates: newExcludedDates,\n        })\n      } else if (mode === 'multiple') {\n        datesRef.current = datesRef.current || []\n        const exists = datesRef.current.some((ed) => areDatesOnSameDay(ed, d))\n\n        const newDates = exists\n          ? datesRef.current.filter((ed) => !areDatesOnSameDay(ed, d))\n          : [...datesRef.current, d]\n\n        newDates.sort((a, b) => a.getTime() - b.getTime())\n        ;(onChangeRef.current as MultiChange)({\n          dates: newDates,\n          datePressed: d,\n          change: exists ? 'removed' : 'added',\n        })\n      }\n    },\n    [mode, onChangeRef, startDateRef, endDateRef, excludedDatesRef, datesRef]\n  )\n\n  return (\n    <View style={styles.root}>\n      <Swiper\n        initialIndex={getInitialIndex(startDate || date)}\n        selectedYear={selectedYear}\n        scrollMode={scrollMode}\n        renderItem={({ index }) => (\n          <Month\n            locale={locale}\n            mode={mode}\n            key={index}\n            index={index}\n            startDate={startDate}\n            endDate={endDate}\n            date={date}\n            dates={dates}\n            onPressYear={onPressYear}\n            selectingYear={selectingYear}\n            onPressDate={onPressDate}\n            scrollMode={scrollMode}\n            primaryColor={theme.colors.primary}\n            selectColor={selectColor}\n            roundness={theme.roundness}\n            disableWeekDays={disableWeekDays}\n            excludedDates={excludedDates}\n          />\n        )}\n        renderHeader={({ onPrev, onNext }) => (\n          <CalendarHeader\n            locale={locale}\n            onPrev={onPrev}\n            onNext={onNext}\n            scrollMode={scrollMode}\n            disableWeekDays={disableWeekDays}\n          />\n        )}\n      />\n      {scrollMode === 'horizontal' ? (\n        <YearPicker\n          selectedYear={selectedYear}\n          selectingYear={selectingYear}\n          onPressYear={onPressYear}\n        />\n      ) : null}\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  root: { flex: 1 },\n  viewPager: { flex: 1 },\n})\n\nexport default React.memo(Calendar)\n"]},"metadata":{},"sourceType":"module"}