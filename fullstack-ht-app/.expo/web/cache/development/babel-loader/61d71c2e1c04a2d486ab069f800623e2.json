{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/home/hejoel/fullstack/fullstack-ht/fullstack-ht/fullstack-ht-app/src/components/UploadUserInfo.jsx\";\nimport React, { useState, useContext } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport { Button } from 'react-native-paper';\nimport { Formik } from 'formik';\nimport { useHistory } from 'react-router-native';\nimport * as yup from 'yup';\nimport FormikTextInput from \"./FormikTextInput\";\nimport DateTimePicker from '@react-native-community/datetimepicker';\nimport theme from \"../theme\";\nimport Moment from 'moment';\nimport { StateContext } from \"../state\";\nvar styles = StyleSheet.create({\n  container: {\n    flexDirection: 'column',\n    justifyContent: 'center',\n    height: '100%',\n    width: '100%',\n    position: 'absolute',\n    flex: 1,\n    zIndex: 1\n  },\n  fieldContainer: {\n    marginBottom: 15\n  },\n  buttonContainer: {\n    zIndex: 10,\n    paddingVertical: 10,\n    paddingHorizontal: 15,\n    borderWidth: 1,\n    borderStyle: 'solid',\n    borderRadius: 5,\n    borderColor: '#aab2bb',\n    marginBottom: 15\n  },\n  textContainer: {\n    fontSize: theme.fontSizes.body,\n    fontFamily: theme.fonts.main,\n    color: '#A6ACAF'\n  }\n});\nvar initialValues = {\n  firstName: '',\n  lastName: '',\n  country: '',\n  bio: ''\n};\nvar validationSchema = yup.object().shape({\n  firstName: yup.string().min(1, 'First name must be at least 1 charaters long').required('First name is required'),\n  lastName: yup.string().min(1, 'Last name must be at least 1 characters long').required('Last name is required'),\n  country: yup.string().required('Country is required'),\n  bio: yup.string().max(150, 'Bio can be at most 150 characters long')\n});\n\nvar UserinfoForm = function UserinfoForm(_ref) {\n  var onSubmit = _ref.onSubmit,\n      date = _ref.date,\n      pressed = _ref.pressed;\n\n  var _useContext = useContext(StateContext),\n      state = _useContext.state,\n      dispatch = _useContext.dispatch;\n\n  var text = pressed ? Moment(date).format('DD-MM-YYYY') : 'Birthdate';\n  return React.createElement(View, {\n    style: styles.container\n  }, React.createElement(View, {\n    style: styles.fieldContainer\n  }, React.createElement(FormikTextInput, {\n    name: \"firstName\",\n    placeholder: \"First name\"\n  })), React.createElement(View, {\n    style: styles.fieldContainer\n  }, React.createElement(FormikTextInput, {\n    name: \"lastName\",\n    placeholder: \"Last name\"\n  })), React.createElement(TouchableWithoutFeedback, {\n    onPress: function onPress() {\n      return dispatch({\n        type: \"SET_SHOW\",\n        payload: !state.show\n      });\n    }\n  }, React.createElement(View, {\n    style: styles.buttonContainer\n  }, React.createElement(Text, {\n    style: styles.textContainer\n  }, text))), React.createElement(View, {\n    style: styles.fieldContainer\n  }, React.createElement(FormikTextInput, {\n    name: \"bio\",\n    placeholder: \"Bio\",\n    multiline: true,\n    numberOfLines: 4\n  })), React.createElement(Button, {\n    mode: 'outlined',\n    onPress: onSubmit\n  }, \"Submit\"));\n};\n\nvar UploadUserInfo = function UploadUserInfo() {\n  var history = useHistory();\n\n  var _useContext2 = useContext(StateContext),\n      state = _useContext2.state,\n      dispatch = _useContext2.dispatch;\n\n  var _useState = useState(new Date()),\n      _useState2 = _slicedToArray(_useState, 2),\n      date = _useState2[0],\n      setDate = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      pressed = _useState4[0],\n      setPressed = _useState4[1];\n\n  var onChange = function onChange(event, selectedDate) {\n    var currentDate = selectedDate || date;\n    dispatch({\n      type: \"SET_SHOW\",\n      payload: false\n    });\n    setDate(currentDate);\n    setPressed(true);\n  };\n\n  var onSubmit = function onSubmit(values) {\n    return _regeneratorRuntime.async(function onSubmit$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            console.log('onsubmit pressed');\n            console.log('values: ', values);\n            history.push('/');\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(Formik, {\n    style: styles.container,\n    initialValues: initialValues,\n    onSubmit: onSubmit,\n    validationSchema: validationSchema\n  }, function (_ref2) {\n    var handleSubmit = _ref2.handleSubmit;\n    return React.createElement(UserinfoForm, {\n      onSubmit: handleSubmit,\n      date: date,\n      pressed: pressed\n    });\n  }), state.show && React.createElement(DateTimePicker, {\n    testID: \"dateTimePicker\",\n    value: date,\n    mode: 'date',\n    display: \"default\",\n    onChange: onChange,\n    maximumDate: new Date(2020, 12, 31),\n    minimumDate: new Date(1900, 1, 1)\n  }));\n};\n\nexport default UploadUserInfo;","map":{"version":3,"sources":["/home/hejoel/fullstack/fullstack-ht/fullstack-ht/fullstack-ht-app/src/components/UploadUserInfo.jsx"],"names":["React","useState","useContext","Button","Formik","useHistory","yup","FormikTextInput","DateTimePicker","theme","Moment","StateContext","styles","StyleSheet","create","container","flexDirection","justifyContent","height","width","position","flex","zIndex","fieldContainer","marginBottom","buttonContainer","paddingVertical","paddingHorizontal","borderWidth","borderStyle","borderRadius","borderColor","textContainer","fontSize","fontSizes","body","fontFamily","fonts","main","color","initialValues","firstName","lastName","country","bio","validationSchema","object","shape","string","min","required","max","UserinfoForm","onSubmit","date","pressed","state","dispatch","text","format","type","payload","show","UploadUserInfo","history","Date","setDate","setPressed","onChange","event","selectedDate","currentDate","values","console","log","push","handleSubmit"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from 'react';\nimport { View, StyleSheet, Text, TouchableWithoutFeedback} from 'react-native';\nimport { Button } from 'react-native-paper';\nimport { Formik } from 'formik';\nimport { useHistory } from 'react-router-native';\nimport * as yup from 'yup';\nimport FormikTextInput from './FormikTextInput';\nimport DateTimePicker from '@react-native-community/datetimepicker';\nimport theme from '../theme';\nimport Moment from 'moment';\nimport { StateContext } from '../state';\n\nconst styles = StyleSheet.create({\n    container: {\n      flexDirection: 'column',\n      justifyContent: 'center',\n      height: '100%',\n      width: '100%',\n      position: 'absolute',\n      flex: 1,\n      zIndex: 1\n    },\n    fieldContainer: {\n      marginBottom: 15,\n    },\n    buttonContainer: {\n        zIndex: 10,\n        paddingVertical: 10,\n        paddingHorizontal: 15,\n        borderWidth: 1,\n        borderStyle: 'solid',\n        borderRadius: 5,\n        borderColor: '#aab2bb',\n        marginBottom: 15\n    }, textContainer: {\n        fontSize: theme.fontSizes.body,\n        fontFamily: theme.fonts.main,\n        color: '#A6ACAF',\n    }\n  });\n\nconst initialValues = {\n    firstName: '',\n    lastName: '',\n    country: '',\n    bio: ''\n\n};\n\nconst validationSchema = yup.object().shape({\n    firstName: yup\n        .string()\n        .min(1, 'First name must be at least 1 charaters long')\n        .required('First name is required'),\n    lastName: yup\n        .string()\n        .min(1, 'Last name must be at least 1 characters long')\n        .required('Last name is required'),\n    country: yup\n        .string()\n        .required('Country is required'),\n    bio: yup\n        .string()\n        .max(150, 'Bio can be at most 150 characters long'),\n});\n\n\nconst UserinfoForm = ({ onSubmit , date, pressed }) => {\n\n    const { state, dispatch } = useContext(StateContext);\n    const text = pressed ? Moment(date).format('DD-MM-YYYY') : 'Birthdate';\n\n    return (\n        <View style={styles.container}>\n\n            <View style={styles.fieldContainer}>\n                <FormikTextInput\n                    name=\"firstName\"\n                    placeholder=\"First name\" \n                />    \n            </View>\n\n            <View style={styles.fieldContainer}>\n                <FormikTextInput\n                    name=\"lastName\"\n                    placeholder=\"Last name\" />\n            </View>\n\n            <TouchableWithoutFeedback onPress={() => dispatch({type: \"SET_SHOW\", payload: !state.show})} >\n                <View style={styles.buttonContainer}>\n                   <Text style={styles.textContainer}>{text}</Text>\n                </View>\n            </TouchableWithoutFeedback>\n\n            <View style={styles.fieldContainer}>\n                <FormikTextInput\n                    name=\"bio\"\n                    placeholder=\"Bio\"\n                    multiline\n                    numberOfLines={4}\n                />\n            </View>\n\n        <Button mode={'outlined'} onPress={onSubmit}>\n            Submit\n        </Button>\n\n        </View>\n    );\n};\n\nconst UploadUserInfo = () => {\n\n    const history = useHistory();\n    const { state, dispatch } = useContext(StateContext);\n\n    const [date, setDate] = useState(new Date());\n    const [pressed, setPressed] = useState(false);\n\n\n    const onChange = (event, selectedDate) => {\n      const currentDate = selectedDate || date;\n      dispatch({type: \"SET_SHOW\", payload: false});\n      setDate(currentDate);\n      setPressed(true);\n    };\n\n    const onSubmit = async (values) => {\n        // const { email, password } = values;\n\n        console.log('onsubmit pressed');\n\n        console.log('values: ', values);\n\n        history.push('/');\n    };\n\n\n    return (\n        <>\n            <Formik\n                style={styles.container}\n                initialValues={initialValues}\n                onSubmit={onSubmit}\n                validationSchema={validationSchema}\n            >\n                {({ handleSubmit }) => <UserinfoForm onSubmit={handleSubmit} date={date} pressed={pressed}/>}\n            </Formik>\n        { state.show && (\n            <DateTimePicker\n              testID=\"dateTimePicker\"\n              value={date}\n              mode={'date'}\n              display=\"default\"\n              onChange={onChange}\n              maximumDate={new Date(2020, 12, 31)}\n              minimumDate={new Date(1900, 1, 1)}\n            />\n            \n        )}\n        </>\n    );\n};\n\nexport default UploadUserInfo;"]},"metadata":{},"sourceType":"module"}