{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar _jsxFileName = \"/home/hejoel/fullstack/fullstack-ht/fullstack-ht/fullstack-ht-app/src/components/SignUpEmail.jsx\";\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport { useHistory } from 'react-router-native';\nimport { Button } from 'react-native-paper';\nimport { SignUpWithEmail, SignInWithEmailLink } from \"../firebase/firebaseFunctions\";\nimport Text from \"./Text\";\nimport FormikTextInput from \"./FormikTextInput\";\nvar styles = StyleSheet.create({\n  container: {\n    flexDirection: 'column',\n    justifyContent: 'center',\n    height: '100%',\n    width: '100%',\n    position: 'absolute',\n    zIndex: 1\n  },\n  fieldContainer: {\n    margin: 15\n  },\n  heading: {\n    alignItems: 'center',\n    marginBottom: 30\n  }\n});\nvar initialValues = {\n  email: '',\n  password: '',\n  passwordConfirmation: ''\n};\nvar validationSchema = yup.object().shape({\n  email: yup.string().required('Email is required'),\n  password: yup.string().min(5, 'Password must be at least 6 characters long').max(50, 'Password must be at most 50 characters long').required('Password is required'),\n  passwordConfirmation: yup.string().oneOf([yup.ref('password'), null], 'Password confirmation must match the password').required('Password confirmation is required')\n});\n\nvar SignUpForm = function SignUpForm(_ref) {\n  var onSubmit = _ref.onSubmit;\n  return React.createElement(View, null, React.createElement(View, {\n    style: styles.fieldContainer\n  }, React.createElement(FormikTextInput, {\n    name: \"email\",\n    placeholder: \"Email\"\n  })), React.createElement(View, {\n    style: styles.fieldContainer\n  }, React.createElement(FormikTextInput, {\n    name: \"password\",\n    placeholder: \"Password\",\n    secureTextEntry: true\n  })), React.createElement(View, {\n    style: styles.fieldContainer\n  }, React.createElement(FormikTextInput, {\n    name: \"passwordConfirmation\",\n    placeholder: \"Password confirmation\",\n    secureTextEntry: true\n  })), React.createElement(Button, {\n    style: styles.fieldContainer,\n    mode: \"contained\",\n    onPress: onSubmit\n  }, \"Sign up\"));\n};\n\nvar SignUp = function SignUp() {\n  var history = useHistory();\n\n  var onSubmit = function onSubmit(values) {\n    var email, password;\n    return _regeneratorRuntime.async(function onSubmit$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            email = values.email, password = values.password;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(SignUpWithEmail(email, password));\n\n          case 3:\n            if (!_context.sent) {\n              _context.next = 5;\n              break;\n            }\n\n            history.push('/choose-pic');\n\n          case 5:\n            SignInWithEmailLink(email);\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(View, {\n    style: styles.container\n  }, React.createElement(View, {\n    style: styles.heading\n  }, React.createElement(Text, {\n    color: 'primary',\n    fontSize: 'heading',\n    fontWeight: 'bold'\n  }, \"Sign up with email\")), React.createElement(Formik, {\n    initialValues: initialValues,\n    onSubmit: onSubmit,\n    validationSchema: validationSchema\n  }, function (_ref2) {\n    var handleSubmit = _ref2.handleSubmit;\n    return React.createElement(SignUpForm, {\n      onSubmit: handleSubmit\n    });\n  }));\n};\n\nexport default SignUp;","map":{"version":3,"sources":["/home/hejoel/fullstack/fullstack-ht/fullstack-ht/fullstack-ht-app/src/components/SignUpEmail.jsx"],"names":["React","Formik","yup","useHistory","Button","SignUpWithEmail","SignInWithEmailLink","Text","FormikTextInput","styles","StyleSheet","create","container","flexDirection","justifyContent","height","width","position","zIndex","fieldContainer","margin","heading","alignItems","marginBottom","initialValues","email","password","passwordConfirmation","validationSchema","object","shape","string","required","min","max","oneOf","ref","SignUpForm","onSubmit","SignUp","history","values","push","handleSubmit"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport { useHistory } from 'react-router-native';\n\nimport { Button} from 'react-native-paper';\nimport { SignUpWithEmail, SignInWithEmailLink } from '../firebase/firebaseFunctions';\nimport Text from './Text';\nimport FormikTextInput from './FormikTextInput';\n\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'column',\n    justifyContent: 'center',\n    height: '100%',\n    width: '100%',\n    position: 'absolute',\n    zIndex: 1\n  },\n  fieldContainer: {\n    margin: 15,\n  },\n  heading: {\n    alignItems: 'center',\n    marginBottom: 30\n  }\n});\n\nconst initialValues = {\n  email: '',\n  password: '',\n  passwordConfirmation: '',\n};\n\nconst validationSchema = yup.object().shape({\n  email: yup\n    .string()\n    .required('Email is required'),\n  password: yup\n    .string()\n    .min(5, 'Password must be at least 6 characters long')\n    .max(50, 'Password must be at most 50 characters long')\n    .required('Password is required'),\n  passwordConfirmation: yup\n    .string()\n    .oneOf(\n      [yup.ref('password'), null],\n      'Password confirmation must match the password',\n    )\n    .required('Password confirmation is required'),\n});\n\nconst SignUpForm = ({ onSubmit }) => {\n  return (\n    <View>\n      <View style={styles.fieldContainer}>\n        <FormikTextInput \n        name=\"email\" \n        placeholder=\"Email\" />\n      </View>\n\n      <View style={styles.fieldContainer}>\n        <FormikTextInput\n          name=\"password\"\n          placeholder=\"Password\"\n          secureTextEntry\n        />\n      </View>\n\n      <View style={styles.fieldContainer}>\n        <FormikTextInput\n          name=\"passwordConfirmation\"\n          placeholder=\"Password confirmation\"\n          secureTextEntry\n        />\n      </View>\n\n      <Button style={styles.fieldContainer} mode='contained' onPress={onSubmit}>\n          Sign up\n      </Button>\n    </View>\n  );\n};\n\n\nconst SignUp = () => {\n  const history = useHistory();\n\n  const onSubmit = async (values) => {\n    const { email, password } = values;\n\n    if (await SignUpWithEmail(email, password)) history.push('/choose-pic'); \n    SignInWithEmailLink(email);\n    \n  };\n\n  return (\n    <View style={styles.container}>\n\n      <View style={styles.heading}>\n        <Text color={'primary'} fontSize={'heading'} fontWeight={'bold'}>\n          Sign up with email\n        </Text>\n      </View>\n\n\n\n      <Formik\n        initialValues={initialValues}\n        onSubmit={onSubmit}\n        validationSchema={validationSchema}\n      >\n        {({ handleSubmit }) => <SignUpForm onSubmit={handleSubmit} />}\n      </Formik>\n    </View>\n  );\n};\n\nexport default SignUp;"]},"metadata":{},"sourceType":"module"}