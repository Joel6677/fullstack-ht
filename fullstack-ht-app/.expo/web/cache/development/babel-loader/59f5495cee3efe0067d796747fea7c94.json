{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/home/hejoel/fullstack/fullstack-ht/fullstack-ht/fullstack-ht-app/src/components/UploadUserInfo.jsx\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { Button } from 'react-native-paper';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport FormikTextInput from \"./FormikTextInput\";\nvar styles = StyleSheet.create({\n  container: {\n    zIndex: 1,\n    height: '100%',\n    width: '100%',\n    position: 'absolute',\n    flexDirection: 'column',\n    justifyContent: 'center'\n  },\n  button: {},\n  textInput: {\n    height: 100\n  }\n});\nvar initialValues = {};\nvar validationSchema = yup.object().shape({\n  email: yup.string().required('Email is required'),\n  password: yup.string().min(5, 'Password must be at least 6 characters long').max(50, 'Password must be at most 50 characters long').required('Password is required'),\n  passwordConfirmation: yup.string().oneOf([yup.ref('password'), null], 'Password confirmation must match the password').required('Password confirmation is required')\n});\n\nvar SignUpForm = function SignUpForm(_ref) {\n  var onSubmit = _ref.onSubmit;\n  return React.createElement(View, {\n    style: styles.container\n  }, React.createElement(View, {\n    style: styles.fieldContainer\n  }, React.createElement(FormikTextInput, {\n    name: \"email\",\n    placeholder: \"Email\"\n  })), React.createElement(View, {\n    style: styles.fieldContainer\n  }, React.createElement(FormikTextInput, {\n    name: \"password\",\n    placeholder: \"Password\",\n    secureTextEntry: true\n  })), React.createElement(View, {\n    style: styles.fieldContainer\n  }, React.createElement(FormikTextInput, {\n    name: \"passwordConfirmation\",\n    placeholder: \"Password confirmation\",\n    secureTextEntry: true\n  })), React.createElement(CustomButton, {\n    onPress: onSubmit,\n    testID: \"submitButton\"\n  }, \"Sign up\"));\n};\n\nvar UploadUserInfo = function UploadUserInfo() {\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      text = _useState2[0],\n      setText = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      date = _useState4[0],\n      setDate = _useState4[1];\n\n  return React.createElement(View, {\n    style: styles.container\n  }, React.createElement(TextInput, {\n    label: \"First name\",\n    value: text,\n    onChangeText: function onChangeText(text) {\n      return setText(text);\n    }\n  }), React.createElement(TextInput, {\n    label: \"Last name\",\n    value: text,\n    onChangeText: function onChangeText(text) {\n      return setText(text);\n    }\n  }), React.createElement(TextInput, {\n    label: \"Birthday\",\n    placeholder: \"dd/mm/yyyy\",\n    value: text,\n    onChangeText: function onChangeText(text) {\n      return setText(text);\n    }\n  }), React.createElement(TextInput, {\n    label: \"Country\",\n    value: text,\n    onChangeText: function onChangeText(text) {\n      return setText(text);\n    }\n  }), React.createElement(TextInput, {\n    style: styles.textInput,\n    label: \"Bio\",\n    value: text,\n    onChangeText: function onChangeText(text) {\n      return setText(text);\n    }\n  }));\n};\n\nexport default UploadUserInfo;","map":{"version":3,"sources":["/home/hejoel/fullstack/fullstack-ht/fullstack-ht/fullstack-ht-app/src/components/UploadUserInfo.jsx"],"names":["React","useState","Button","Formik","yup","FormikTextInput","styles","StyleSheet","create","container","zIndex","height","width","position","flexDirection","justifyContent","button","textInput","initialValues","validationSchema","object","shape","email","string","required","password","min","max","passwordConfirmation","oneOf","ref","SignUpForm","onSubmit","fieldContainer","UploadUserInfo","text","setText","date","setDate"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { Button } from 'react-native-paper';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport FormikTextInput from './FormikTextInput';\n\nconst styles = StyleSheet.create({\n    container: {\n        zIndex: 1,\n        height: '100%',\n        width: '100%',\n        position: 'absolute',\n        flexDirection: 'column',\n        justifyContent: 'center',\n    },\n    button: {\n\n    },\n    textInput: {\n        height: 100\n    }\n});\n\nconst initialValues = {\n\n};\n\nconst validationSchema = yup.object().shape({\n    email: yup\n        .string()\n        .required('Email is required'),\n    password: yup\n        .string()\n        .min(5, 'Password must be at least 6 characters long')\n        .max(50, 'Password must be at most 50 characters long')\n        .required('Password is required'),\n    passwordConfirmation: yup\n        .string()\n        .oneOf(\n            [yup.ref('password'), null],\n            'Password confirmation must match the password',\n        )\n        .required('Password confirmation is required'),\n});\n\nconst SignUpForm = ({ onSubmit }) => {\n    return (\n        <View style={styles.container}>\n\n            <View style={styles.fieldContainer}>\n                <FormikTextInput\n                    name=\"email\"\n                    placeholder=\"Email\" />\n            </View>\n\n            <View style={styles.fieldContainer}>\n                <FormikTextInput\n                    name=\"password\"\n                    placeholder=\"Password\"\n                    secureTextEntry\n                />\n            </View>\n\n            <View style={styles.fieldContainer}>\n                <FormikTextInput\n                    name=\"passwordConfirmation\"\n                    placeholder=\"Password confirmation\"\n                    secureTextEntry\n                />\n            </View>\n\n            <CustomButton onPress={onSubmit} testID=\"submitButton\">\n                Sign up\n        </CustomButton>\n        </View>\n    );\n};\n\nconst UploadUserInfo = () => {\n\n    const [text, setText] = useState('');\n    // kaikissa sama stata, siksi oma component\n    const [date, setDate] = useState('');\n    // make text input change row\n    // use formik\n\n    return (\n\n        <View style={styles.container}>\n\n\n            <TextInput\n                label=\"First name\"\n                value={text}\n                onChangeText={text => setText(text)}\n            />\n            <TextInput\n                label=\"Last name\"\n                value={text}\n                onChangeText={text => setText(text)}\n            />\n            <TextInput\n                label=\"Birthday\"\n                placeholder=\"dd/mm/yyyy\"\n                value={text}\n                onChangeText={text => setText(text)}\n            />\n            <TextInput\n                label=\"Country\"\n                value={text}\n                onChangeText={text => setText(text)}\n            />\n            <TextInput\n                style={styles.textInput}\n                label=\"Bio\"\n                value={text}\n                onChangeText={text => setText(text)}\n            />\n\n\n\n            {\n                // Formik\n                // age\n                // interests\n            }\n\n        </View>\n\n    );\n};\n\nexport default UploadUserInfo;"]},"metadata":{},"sourceType":"module"}