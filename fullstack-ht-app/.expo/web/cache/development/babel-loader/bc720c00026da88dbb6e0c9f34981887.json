{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useContext } from 'react';\nimport firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nimport { StateContext } from \"../state\";\nexport var GET_USERINFO = function GET_USERINFO() {\n  var _useContext, state, dispatch;\n\n  return _regeneratorRuntime.async(function GET_USERINFO$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _useContext = useContext(StateContext), state = _useContext.state, dispatch = _useContext.dispatch;\n          firebase.firestore().collection('users').doc(firebase.auth().currentUser.uid).collection('userinfo').get().then(function (querySnapshot) {\n            var posts = querySnapshot.docs.map(function (doc) {\n              var data = doc.data();\n              var id = doc.id;\n              return _objectSpread({\n                id: id\n              }, data);\n            });\n            console.log('posts: ', posts);\n          }).catch(function (error) {\n            console.log(\"Error getting documents: \", error);\n          });\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var GET_PROFILEPIC = function GET_PROFILEPIC() {\n  return _regeneratorRuntime.async(function GET_PROFILEPIC$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          firebase.firestore().collection('users').doc(firebase.auth().currentUser.uid).collection('userinfo').get().then(function (querySnapshot) {\n            var posts = querySnapshot.docs.map(function (doc) {\n              var data = doc.data();\n              var id = doc.id;\n              return _objectSpread({\n                id: id\n              }, data);\n            });\n            console.log('posts: ', posts);\n          }).catch(function (error) {\n            console.log(\"Error getting documents: \", error);\n          });\n\n        case 1:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var GET_USERIMAGES = function GET_USERIMAGES() {\n  return _regeneratorRuntime.async(function GET_USERIMAGES$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          firebase.firestore().collection('users').doc(firebase.auth().currentUser.uid).collection('userinfo').get().then(function (querySnapshot) {\n            var posts = querySnapshot.docs.map(function (doc) {\n              var data = doc.data();\n              var id = doc.id;\n              return _objectSpread({\n                id: id\n              }, data);\n            });\n            console.log('posts: ', posts);\n          }).catch(function (error) {\n            console.log(\"Error getting documents: \", error);\n          });\n\n        case 1:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};","map":{"version":3,"sources":["/home/hejoel/fullstack/fullstack-ht/fullstack-ht/fullstack-ht-app/src/firebase/queries.js"],"names":["useContext","firebase","StateContext","GET_USERINFO","state","dispatch","firestore","collection","doc","auth","currentUser","uid","get","then","querySnapshot","posts","docs","map","data","id","console","log","catch","error","GET_PROFILEPIC","GET_USERIMAGES"],"mappings":"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","sourcesContent":["import { useContext } from 'react';\nimport firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nimport { StateContext } from '../state';\n\nexport const GET_USERINFO = async () => {\n\n    const { state, dispatch } = useContext(StateContext);\n\n    firebase.firestore()\n    .collection('users')\n    .doc(firebase.auth().currentUser.uid)\n    .collection('userinfo')\n    .get()\n      .then((querySnapshot) => {\n        let posts = querySnapshot.docs.map(doc => {\n            const data = doc.data();\n            const id = doc.id;\n            return { id, ...data };\n        });\n        console.log('posts: ', posts);\n      })\n      .catch((error) => {\n        console.log(\"Error getting documents: \", error);\n      });\n\n};\n\nexport const GET_PROFILEPIC = async () => {\n\n    firebase.firestore()\n    .collection('users')\n    .doc(firebase.auth().currentUser.uid)\n    .collection('userinfo')\n    .get()\n      .then((querySnapshot) => {\n        let posts = querySnapshot.docs.map(doc => {\n            const data = doc.data();\n            const id = doc.id;\n            return { id, ...data };\n        });\n        console.log('posts: ', posts);\n      })\n      .catch((error) => {\n        console.log(\"Error getting documents: \", error);\n      });\n      \n};\n\nexport const GET_USERIMAGES = async () => {\n\n    firebase.firestore()\n    .collection('users')\n    .doc(firebase.auth().currentUser.uid)\n    .collection('userinfo')\n    .get()\n      .then((querySnapshot) => {\n        let posts = querySnapshot.docs.map(doc => {\n            const data = doc.data();\n            const id = doc.id;\n            return { id, ...data };\n        });\n        console.log('posts: ', posts);\n      })\n      .catch((error) => {\n        console.log(\"Error getting documents: \", error);\n      });\n      \n};"]},"metadata":{},"sourceType":"module"}