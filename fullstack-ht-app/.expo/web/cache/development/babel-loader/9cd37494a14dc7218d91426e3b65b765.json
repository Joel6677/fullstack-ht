{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar _jsxFileName = \"/home/hejoel/fullstack/fullstack-ht/fullstack-ht/fullstack-ht-app/src/components/SignUpEmail.jsx\";\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport { useHistory } from 'react-router-native';\nimport { SignUpWithEmail } from \"../firebase/firebaseFunctions\";\nimport Button from \"./Button\";\nimport FormikTextInput from \"./FormikTextInput\";\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'white',\n    padding: 15\n  },\n  fieldContainer: {\n    marginBottom: 15\n  }\n});\nvar initialValues = {\n  username: 'asd',\n  password: 'asd',\n  passwordConfirmation: 'asd'\n};\nvar validationSchema = yup.object().shape({\n  email: yup.string().required('Email is required'),\n  password: yup.string().min(5, 'Password must be at least 6 characters long').max(50, 'Password must be at most 50 characters long').required('Password is required'),\n  passwordConfirmation: yup.string().oneOf([yup.ref('password'), null], 'Password confirmation must match the password').required('Password confirmation is required')\n});\n\nvar SignUpForm = function SignUpForm(_ref) {\n  var onSubmit = _ref.onSubmit;\n  return React.createElement(View, {\n    style: styles.container\n  }, React.createElement(View, {\n    style: styles.fieldContainer\n  }, React.createElement(FormikTextInput, {\n    name: \"email\",\n    placeholder: \"Email\"\n  })), React.createElement(View, {\n    style: styles.fieldContainer\n  }, React.createElement(FormikTextInput, {\n    name: \"password\",\n    placeholder: \"Password\",\n    secureTextEntry: true\n  })), React.createElement(View, {\n    style: styles.fieldContainer\n  }, React.createElement(FormikTextInput, {\n    name: \"passwordConfirmation\",\n    placeholder: \"Password confirmation\",\n    secureTextEntry: true\n  })), React.createElement(Button, {\n    onPress: onSubmit,\n    testID: \"submitButton\"\n  }, \"Sign up\"));\n};\n\nvar SignUp = function SignUp() {\n  var history = useHistory();\n\n  var onSubmit = function onSubmit(values) {\n    var email, password;\n    return _regeneratorRuntime.async(function onSubmit$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            email = values.email, password = values.password;\n            SignUpWithEmail(email, password);\n            history.push('/upload-userinfo');\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(Formik, {\n    initialValues: initialValues,\n    onSubmit: onSubmit,\n    validationSchema: validationSchema\n  }, function (_ref2) {\n    var handleSubmit = _ref2.handleSubmit;\n    return React.createElement(SignUpForm, {\n      onSubmit: handleSubmit\n    });\n  });\n};\n\nexport default SignUp;","map":{"version":3,"sources":["/home/hejoel/fullstack/fullstack-ht/fullstack-ht/fullstack-ht-app/src/components/SignUpEmail.jsx"],"names":["React","Formik","yup","useHistory","SignUpWithEmail","Button","FormikTextInput","styles","StyleSheet","create","container","backgroundColor","padding","fieldContainer","marginBottom","initialValues","username","password","passwordConfirmation","validationSchema","object","shape","email","string","required","min","max","oneOf","ref","SignUpForm","onSubmit","SignUp","history","values","push","handleSubmit"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport { useHistory } from 'react-router-native';\nimport { SignUpWithEmail } from '../firebase/firebaseFunctions';\n\nimport Button from './Button';\nimport FormikTextInput from './FormikTextInput';\n\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'white',\n    padding: 15,\n  },\n  fieldContainer: {\n    marginBottom: 15,\n  },\n});\n\nconst initialValues = {\n  username: 'asd',\n  password: 'asd',\n  passwordConfirmation: 'asd',\n};\n\nconst validationSchema = yup.object().shape({\n  // username: yup\n  //   .string()\n  //   .min(1, 'Username must be at least 1 character long')\n  //   .max(30, 'Username must be at most 30 characters long')\n  //   .required('Username is required'),\n  email: yup\n    .string()\n    .required('Email is required'),\n  password: yup\n    .string()\n    .min(5, 'Password must be at least 6 characters long')\n    .max(50, 'Password must be at most 50 characters long')\n    .required('Password is required'),\n  passwordConfirmation: yup\n    .string()\n    .oneOf(\n      [yup.ref('password'), null],\n      'Password confirmation must match the password',\n    )\n    .required('Password confirmation is required'),\n});\n\nconst SignUpForm = ({ onSubmit }) => {\n  return (\n    <View style={styles.container}>\n\n      {/* \n      <View style={styles.fieldContainer}>\n        <FormikTextInput name=\"username\" placeholder=\"Username\" />\n      </View> */}\n\n\n      <View style={styles.fieldContainer}>\n        <FormikTextInput name=\"email\" placeholder=\"Email\" />\n      </View>\n\n      <View style={styles.fieldContainer}>\n        <FormikTextInput\n          name=\"password\"\n          placeholder=\"Password\"\n          secureTextEntry\n        />\n      </View>\n\n      <View style={styles.fieldContainer}>\n        <FormikTextInput\n          name=\"passwordConfirmation\"\n          placeholder=\"Password confirmation\"\n          secureTextEntry\n        />\n      </View>\n\n      <Button onPress={onSubmit} testID=\"submitButton\">\n        Sign up\n      </Button>\n    </View>\n  );\n};\n\nconst SignUp = () => {\n  const history = useHistory();\n\n  const onSubmit = async (values) => {\n    const { email, password } = values;\n\n    SignUpWithEmail(email, password);\n\n    history.push('/upload-userinfo');\n  };\n\n  return (\n\n    <Formik\n      initialValues={initialValues}\n      onSubmit={onSubmit}\n      validationSchema={validationSchema}\n    >\n      {({ handleSubmit }) => <SignUpForm onSubmit={handleSubmit} />}\n    </Formik>\n  );\n};\n\nexport default SignUp;"]},"metadata":{},"sourceType":"module"}