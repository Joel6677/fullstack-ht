{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _jsxFileName = \"/home/hejoel/fullstack/fullstack-ht/fullstack-ht/fullstack-ht-app/src/components/AppBar.jsx\";\nimport React, { useContext, useRef } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Constants from 'expo-constants';\nimport { Link } from 'react-router-native';\nimport { useApolloClient } from '@apollo/react-hooks';\nimport { useHistory } from 'react-router-native';\nimport theme from \"../theme\";\nimport Text from \"./Text\";\nimport AuthStorageContext from \"../contexts/AuthStorageContext\";\nimport useAuthorizedUser from \"../hooks/useAuthorizedUser\";\nimport Button from \"./Button\";\nimport { IconButton } from 'react-native-paper';\nimport { StateContext } from \"../state\";\nvar styles = StyleSheet.create({\n  container: {\n    paddingTop: Constants.statusBarHeight,\n    backgroundColor: theme.colors.appBarBackground\n  },\n  scrollView: {\n    flexDirection: 'row'\n  },\n  tabTouchable: {\n    flexGrow: 0\n  },\n  tabContainer: {\n    paddingHorizontal: 15,\n    paddingVertical: 20,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  tabText: {\n    color: 'white'\n  }\n});\n\nvar AppBarTab = function AppBarTab(_ref) {\n  var children = _ref.children,\n      props = _objectWithoutProperties(_ref, [\"children\"]);\n\n  return React.createElement(View, {\n    style: styles.tabContainer\n  }, React.createElement(Button, props, children));\n};\n\nvar toggleMenu = function toggleMenu(_ref2) {\n  var toggleAnim = _ref2.toggleAnim,\n      state = _ref2.state;\n  Animated.spring(toggleAnim, {\n    toValue: state ? 0 : -200\n  }).start();\n};\n\nvar AppBar = function AppBar() {\n  var apolloClient = useApolloClient();\n  var authStorage = useContext(AuthStorageContext);\n  var history = useHistory();\n\n  var _useAuthorizedUser = useAuthorizedUser(),\n      authorizedUser = _useAuthorizedUser.authorizedUser;\n\n  var _useContext = useContext(StateContext),\n      state = _useContext.state,\n      dispatch = _useContext.dispatch;\n\n  var toggleAnim = useRef(new Animated.Value(0)).current;\n\n  var onSignOut = function onSignOut() {\n    return _regeneratorRuntime.async(function onSignOut$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(authStorage.removeAccessToken());\n\n          case 2:\n            apolloClient.resetStore();\n            history.push('/');\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  console.log('open: ', state.open);\n  return React.createElement(View, {\n    style: styles.container\n  }, React.createElement(ScrollView, {\n    style: styles.scrollView,\n    horizontal: true\n  }, React.createElement(IconButton, {\n    icon: \"menu\",\n    color: theme.colors.primary,\n    size: 40,\n    onPress: function onPress() {\n      return dispatch({\n        type: \"SET_OPEN\",\n        payload: !state.open\n      });\n    }\n  }), authorizedUser ? React.createElement(React.Fragment, null, React.createElement(AppBarTab, {\n    onPress: onSignOut\n  }, \"Sign out\")) : React.createElement(React.Fragment, null, React.createElement(Link, {\n    to: \"/sign-in\",\n    component: AppBarTab\n  }, \"Sign in\"), React.createElement(Link, {\n    to: \"/sign-up\",\n    component: AppBarTab\n  }, \"Sign up\"), React.createElement(Link, {\n    to: \"/\",\n    component: AppBarTab\n  }, \"Home\"))));\n};\n\nexport default AppBar;","map":{"version":3,"sources":["/home/hejoel/fullstack/fullstack-ht/fullstack-ht/fullstack-ht-app/src/components/AppBar.jsx"],"names":["React","useContext","useRef","Constants","Link","useApolloClient","useHistory","theme","Text","AuthStorageContext","useAuthorizedUser","Button","IconButton","StateContext","styles","StyleSheet","create","container","paddingTop","statusBarHeight","backgroundColor","colors","appBarBackground","scrollView","flexDirection","tabTouchable","flexGrow","tabContainer","paddingHorizontal","paddingVertical","alignItems","justifyContent","tabText","color","AppBarTab","children","props","toggleMenu","toggleAnim","state","Animated","spring","toValue","start","AppBar","apolloClient","authStorage","history","authorizedUser","dispatch","Value","current","onSignOut","removeAccessToken","resetStore","push","console","log","open","primary","type","payload"],"mappings":"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","sourcesContent":["import React, { useContext , useRef} from 'react';\n\nimport {\n  View,\n  ScrollView,\n  StyleSheet,\n  // TouchableWithoutFeedback\n  Animated\n} from 'react-native';\n\nimport Constants from 'expo-constants';\nimport { Link } from 'react-router-native';\nimport { useApolloClient } from '@apollo/react-hooks';\nimport { useHistory } from 'react-router-native';\n\nimport theme from '../theme';\nimport Text from './Text';\nimport AuthStorageContext from '../contexts/AuthStorageContext';\nimport useAuthorizedUser from '../hooks/useAuthorizedUser';\n\nimport Button from './Button';\nimport { IconButton } from 'react-native-paper';\nimport { StateContext } from '../state';\n  \n\nconst styles = StyleSheet.create({\n  container: {\n    paddingTop: Constants.statusBarHeight,\n    backgroundColor: theme.colors.appBarBackground,\n  },\n  scrollView: {\n    flexDirection: 'row',\n  },\n  tabTouchable: {\n    flexGrow: 0,\n  },\n  tabContainer: {\n    paddingHorizontal: 15,\n    paddingVertical: 20,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  tabText: {\n    color: 'white',\n  }\n});\n\n// const AppBarTab = ({ children, ...props }) => { \n//   return (\n//     <TouchableWithoutFeedback style={styles.tabTouchable} {...props}>\n//       <View style={styles.tabContainer}>\n//         <Text fontWeight=\"bold\" style={styles.tabText}>\n//           {children}\n//         </Text>\n//       </View>\n//     </TouchableWithoutFeedback>\n//   );\n// };\n\nconst AppBarTab = ({ children, ...props }) => { \n  // on press {...props}\n  return (\n  <View style={styles.tabContainer}>\n      <Button {...props} >{children}</Button> \n  </View>\n\n  );\n};\n\nconst toggleMenu = ({toggleAnim, state}) => {\n  Animated.spring(\n    toggleAnim,\n    {\n      toValue: state ? 0 : -200,\n    }\n  ).start();\n};\n\n\nconst AppBar = () => {\n  const apolloClient = useApolloClient();\n  const authStorage = useContext(AuthStorageContext);\n  const history = useHistory();\n\n  const { authorizedUser } = useAuthorizedUser();\n\n  const { state, dispatch } = useContext(StateContext);\n  \n  const toggleAnim = useRef(new Animated.Value(0)).current;\n\n  const onSignOut = async () => {\n    await authStorage.removeAccessToken();\n    apolloClient.resetStore();\n    history.push('/');\n  };\n\n  console.log('open: ', state.open);\n\n  return (\n    \n\n    <View style={styles.container}>\n      <ScrollView style={styles.scrollView} horizontal> \n        <IconButton icon=\"menu\" color={theme.colors.primary} size={40} onPress={() => dispatch({type: \"SET_OPEN\", payload: !state.open})} \n        ></IconButton>\n        {authorizedUser ? (\n          <>\n            <AppBarTab onPress={onSignOut}>Sign out</AppBarTab>\n          </>\n        ) : (\n          <>\n            <Link to=\"/sign-in\" component={AppBarTab}>\n              Sign in\n            </Link>\n            <Link to=\"/sign-up\" component={AppBarTab}>\n              Sign up\n            </Link>\n            <Link to=\"/\" component={AppBarTab}>\n              Home\n            </Link>\n          </>\n        )}\n      </ScrollView>\n    </View>\n  );\n};\n\nexport default AppBar;"]},"metadata":{},"sourceType":"module"}