{"ast":null,"code":"","map":{"version":3,"sources":[],"names":[],"mappings":"","sourcesContent":["// import React from 'react';\n// import { FlatList, View, StyleSheet, Alert } from 'react-native';\n// import { Link } from 'react-router-native';\n// import { useMutation } from '@apollo/react-hooks';\n\n// import ReviewItem from './ReviewItem';\n// import Button from './Button';\n// import useAuthorizedUser from '../hooks/useAuthorizedUser';\n// import { DELETE_REVIEW } from '../graphql/mutations';\n\n// const styles = StyleSheet.create({\n//   reviewItemWrapper: {\n//     padding: 15,\n//     backgroundColor: 'white',\n//   },\n//   separator: {\n//     height: 10,\n//   },\n//   actionsContainer: {\n//     marginTop: 15,\n//     flexDirection: 'row',\n//   },\n//   actionButton: {\n//     flexGrow: 1,\n//     marginRight: 15,\n//   },\n//   lastActionButton: {\n//     marginRight: 0,\n//   },\n// });\n\n\n\n// const ReviewItemWithActions = ({ review, onDelete }) => {\n//   return (\n//     <View style={styles.reviewItemWrapper}>\n//       <ReviewItem review={review} title={review.repository.fullName} />\n//       <View style={styles.actionsContainer}>\n//         <Link\n//           component={Button}\n//           to={`/repositories/${review.repository.id}`}\n//           style={styles.actionButton}\n//         >\n//           View repository\n//         </Link>\n\n//         <DeleteReviewButton\n//           onPress={onDelete}\n//           style={[styles.actionButton, styles.lastActionButton]}\n//         />\n//       </View>\n//     </View>\n//   );\n// };\n\n// const ItemSeparator = () => <View style={styles.separator} />;\n\n// const MyReviews = () => {\n//   const { authorizedUser, refetch } = useAuthorizedUser({\n//     includeReviews: true,\n//   });\n\n//   const [deleteReview] = useMutation(DELETE_REVIEW);\n//   const reviewEdges = authorizedUser ? authorizedUser.reviews.edges : [];\n//   const reviewNodes = reviewEdges.map(({ node }) => node);\n\n//   const onDelete = async (id) => {\n//     await deleteReview({ variables: { id } });\n//     refetch();\n//   };\n\n//   return (\n//     <FlatList\n//       data={reviewNodes}\n//       renderItem={({ item }) => (\n//         <ReviewItemWithActions\n//           review={item}\n//           onDelete={() => onDelete(item.id)}\n//         />\n//       )}\n//       keyExtractor={({ id }) => id}\n//       ItemSeparatorComponent={ItemSeparator}\n//     />\n//   );\n// };\n\n// export default MyReviews;"]},"metadata":{},"sourceType":"script"}