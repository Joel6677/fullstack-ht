{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar _jsxFileName = \"/home/hejoel/fullstack/fullstack-ht/fullstack-ht/fullstack-ht-app/src/components/CreateReview.jsx\";\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Button } from 'react-native-paper';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport { useHistory } from 'react-router-native';\nimport { useMutation } from '@apollo/react-hooks';\nimport * as firebase from 'firebase';\nimport FormikTextInput from \"./FormikTextInput\";\nimport { CREATE_REVIEW } from \"../graphql/mutations\";\nvar styles = StyleSheet.create({\n  container: {\n    width: '100%',\n    height: '100%',\n    postion: 'absolute',\n    padding: 15\n  },\n  fieldContainer: {\n    marginBottom: 15\n  }\n});\nvar initialValues = {\n  nosing: '',\n  taste: '',\n  finish: '',\n  rating: '',\n  comment: ''\n};\nvar validationSchema = yup.object().shape({\n  nosing: yup.string().required('Nosing is required'),\n  taste: yup.string().required('Taste is required'),\n  finish: yup.string().required('Finish is required'),\n  rating: yup.number('Rating must be a number').min(0, 'Rating must be greater or equal to 0').max(100, 'Rating must be less or equal to 100').required('Rating is required'),\n  comment: yup.string()\n});\n\nvar CreateReviewForm = function CreateReviewForm(_ref) {\n  var onSubmit = _ref.onSubmit;\n  return React.createElement(View, {\n    style: styles.container\n  }, React.createElement(View, {\n    style: styles.fieldContainer\n  }, React.createElement(FormikTextInput, {\n    placeholder: \"Nosing\",\n    name: \"nosing\"\n  })), React.createElement(View, {\n    style: styles.fieldContainer\n  }, React.createElement(FormikTextInput, {\n    placeholder: \"Taste\",\n    name: \"taste\"\n  })), React.createElement(View, {\n    style: styles.fieldContainer\n  }, React.createElement(FormikTextInput, {\n    placeholder: \"Finish\",\n    name: \"finish\"\n  })), React.createElement(View, {\n    style: styles.fieldContainer\n  }, React.createElement(FormikTextInput, {\n    placeholder: \"Rating between 0 and 100\",\n    keyboardType: \"numeric\",\n    name: \"rating\"\n  })), React.createElement(View, {\n    style: styles.fieldContainer\n  }, React.createElement(FormikTextInput, {\n    placeholder: \"Comment\",\n    name: \"comment\",\n    multiline: true\n  })), React.createElement(Button, {\n    onPress: onSubmit\n  }, \"Create a review\"));\n};\n\nvar CreateReview = function CreateReview(_ref2) {\n  var id = _ref2.id;\n  var history = useHistory();\n\n  var onSubmit = function onSubmit(values) {\n    var nosing, taste, finish, rating, comment;\n    return _regeneratorRuntime.async(function onSubmit$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            nosing = values.nosing, taste = values.taste, finish = values.finish, rating = values.rating, comment = values.comment;\n            firebase.firestore.collection('whiskies').doc(id).collection('reviews').add({\n              nosing: nosing,\n              taste: taste,\n              finish: finish,\n              rating: rating,\n              comment: comment\n            });\n            history.goBack();\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(Formik, {\n    initialValues: initialValues,\n    onSubmit: onSubmit,\n    validationSchema: validationSchema\n  }, function (_ref3) {\n    var handleSubmit = _ref3.handleSubmit;\n    return React.createElement(CreateReviewForm, {\n      onSubmit: handleSubmit\n    });\n  });\n};\n\nexport default CreateReview;","map":{"version":3,"sources":["/home/hejoel/fullstack/fullstack-ht/fullstack-ht/fullstack-ht-app/src/components/CreateReview.jsx"],"names":["React","Button","Formik","yup","useHistory","useMutation","firebase","FormikTextInput","CREATE_REVIEW","styles","StyleSheet","create","container","width","height","postion","padding","fieldContainer","marginBottom","initialValues","nosing","taste","finish","rating","comment","validationSchema","object","shape","string","required","number","min","max","CreateReviewForm","onSubmit","CreateReview","id","history","values","firestore","collection","doc","add","goBack","handleSubmit"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport {Button} from 'react-native-paper';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport { useHistory } from 'react-router-native';\nimport { useMutation } from '@apollo/react-hooks';\nimport * as firebase from 'firebase';\nimport FormikTextInput from './FormikTextInput';\nimport { CREATE_REVIEW } from '../graphql/mutations';\n\nconst styles = StyleSheet.create({\n  container: {\n    width: '100%',\n    height: '100%',\n    postion: 'absolute',\n    padding: 15,\n  },\n  fieldContainer: {\n    marginBottom: 15,\n  },\n});\n\nconst initialValues = {\n  nosing: '',\n  taste: '',\n  finish: '',\n  rating: '',\n  comment: ''\n};\n\nconst validationSchema = yup.object().shape({\n  nosing: yup.string().required('Nosing is required'),\n  taste: yup.string().required('Taste is required'),\n  finish: yup.string().required('Finish is required'), \n  rating: yup\n  .number('Rating must be a number')\n  .min(0, 'Rating must be greater or equal to 0')\n  .max(100, 'Rating must be less or equal to 100')\n  .required('Rating is required'),\n  comment: yup.string(),\n});\n\nconst CreateReviewForm = ({ onSubmit }) => {\n  return (\n    <View style={styles.container}>\n      <View style={styles.fieldContainer}>\n        <FormikTextInput placeholder=\"Nosing\" name=\"nosing\" />\n      </View>\n      <View style={styles.fieldContainer}>\n        <FormikTextInput placeholder=\"Taste\" name=\"taste\" />\n      </View>\n      <View style={styles.fieldContainer}>\n        <FormikTextInput placeholder=\"Finish\" name=\"finish\" />\n      </View>\n      <View style={styles.fieldContainer}>\n        <FormikTextInput\n          placeholder=\"Rating between 0 and 100\"\n          keyboardType=\"numeric\"\n          name=\"rating\"\n        />\n      </View>\n      <View style={styles.fieldContainer}>\n        <FormikTextInput placeholder=\"Comment\" name=\"comment\" multiline />\n      </View>\n\n      <Button onPress={onSubmit}>Create a review</Button>\n    </View>\n  );\n};\n\nconst CreateReview = ({id}) => {\n  \n  const history = useHistory();\n\n\n\n  const onSubmit = async (values) => {\n\n    const {nosing, taste, finish, rating, comment} = values;\n\n    firebase.firestore.collection('whiskies').doc(id).collection('reviews')\n    .add({\n      nosing: nosing,\n      taste: taste,\n      finish: finish,\n      rating: rating,\n      comment: comment\n    });\n\n    // update whisky\n\n    history.goBack();\n\n    };\n  \n\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={onSubmit}\n      validationSchema={validationSchema}\n    >\n      {({ handleSubmit }) => <CreateReviewForm onSubmit={handleSubmit} />}\n    </Formik>\n  );\n};\n\nexport default CreateReview;"]},"metadata":{},"sourceType":"module"}