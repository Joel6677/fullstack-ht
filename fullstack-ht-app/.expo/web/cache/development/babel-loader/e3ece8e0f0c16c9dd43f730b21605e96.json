{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/home/hejoel/fullstack/fullstack-ht/fullstack-ht/fullstack-ht-app/src/components/SignUp.jsx\";\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport { useHistory } from 'react-router-native';\nimport { useMutation } from '@apollo/react-hooks';\nimport Button from \"./Button\";\nimport FormikTextInput from \"./FormikTextInput\";\nimport useSignIn from \"../hooks/useSignIn\";\nimport { CREATE_USER } from \"../graphql/mutations\";\nimport Text from \"./Text\";\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'white',\n    padding: 15\n  },\n  fieldContainer: {\n    marginBottom: 15\n  }\n});\nvar initialValues = {\n  username: '',\n  password: '',\n  passwordConfirmation: ''\n};\nvar validationSchema = yup.object().shape({\n  username: yup.string().min(1, 'Username must be at least 1 character long').max(30, 'Username must be at most 30 characters long').required('Username is required'),\n  password: yup.string().min(5, 'Password must be at least 5 characters long').max(50, 'Password must be at least 50 characters long').required('Password is required'),\n  passwordConfirmation: yup.string().oneOf([yup.ref('password'), null], 'Password confirmation must match the password').required('Password confirmation is required')\n});\n\nvar SignUpForm = function SignUpForm(_ref) {\n  var onSubmit = _ref.onSubmit;\n  return React.createElement(View, {\n    style: styles.container\n  }, React.createElement(View, {\n    style: styles.fieldContainer\n  }, React.createElement(FormikTextInput, {\n    name: \"name\",\n    placeholder: \"Name\"\n  })), React.createElement(View, {\n    style: styles.fieldContainer\n  }, React.createElement(FormikTextInput, {\n    name: \"password\",\n    placeholder: \"Password\",\n    secureTextEntry: true\n  })), React.createElement(View, {\n    style: styles.fieldContainer\n  }, React.createElement(FormikTextInput, {\n    name: \"passwordConfirmation\",\n    placeholder: \"Password confirmation\",\n    secureTextEntry: true\n  })), React.createElement(Button, {\n    onPress: onSubmit,\n    testID: \"submitButton\"\n  }, \"Sign up\"));\n};\n\nvar SignUp = function SignUp() {\n  var _useMutation = useMutation(CREATE_USER),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      createUser = _useMutation2[0];\n\n  var _useSignIn = useSignIn(),\n      _useSignIn2 = _slicedToArray(_useSignIn, 1),\n      signIn = _useSignIn2[0];\n\n  var history = useHistory();\n\n  var onSubmit = function onSubmit(values) {\n    var email, name, password, user;\n    return _regeneratorRuntime.async(function onSubmit$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            email = values.email, name = values.name, password = values.password;\n            user = {\n              email: email,\n              name: name,\n              password: password\n            };\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(createUser({\n              variables: {\n                user: user\n              }\n            }));\n\n          case 4:\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(signIn(user));\n\n          case 6:\n            history.push('/');\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(Formik, {\n    initialValues: initialValues,\n    onSubmit: onSubmit,\n    validationSchema: validationSchema\n  }, function (_ref2) {\n    var handleSubmit = _ref2.handleSubmit;\n    return React.createElement(SignUpForm, {\n      onSubmit: handleSubmit\n    });\n  });\n};\n\nexport default SignUp;","map":{"version":3,"sources":["/home/hejoel/fullstack/fullstack-ht/fullstack-ht/fullstack-ht-app/src/components/SignUp.jsx"],"names":["React","Formik","yup","useHistory","useMutation","Button","FormikTextInput","useSignIn","CREATE_USER","Text","styles","StyleSheet","create","container","backgroundColor","padding","fieldContainer","marginBottom","initialValues","username","password","passwordConfirmation","validationSchema","object","shape","string","min","max","required","oneOf","ref","SignUpForm","onSubmit","SignUp","createUser","signIn","history","values","email","name","user","variables","push","handleSubmit"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,SAASC,WAAT,QAA4B,qBAA5B;AAEA,OAAOC,MAAP;AACA,OAAOC,eAAP;AACA,OAAOC,SAAP;AACA,SAASC,WAAT;AAEA,OAAOC,IAAP;AAEA,IAAMC,MAAM,GAAGC,UAAU,CAACC,MAAX,CAAkB;AAC/BC,EAAAA,SAAS,EAAE;AACTC,IAAAA,eAAe,EAAE,OADR;AAETC,IAAAA,OAAO,EAAE;AAFA,GADoB;AAK/BC,EAAAA,cAAc,EAAE;AACdC,IAAAA,YAAY,EAAE;AADA;AALe,CAAlB,CAAf;AAUA,IAAMC,aAAa,GAAG;AACpBC,EAAAA,QAAQ,EAAE,EADU;AAEpBC,EAAAA,QAAQ,EAAE,EAFU;AAGpBC,EAAAA,oBAAoB,EAAE;AAHF,CAAtB;AAMA,IAAMC,gBAAgB,GAAGpB,GAAG,CAACqB,MAAJ,GAAaC,KAAb,CAAmB;AAC1CL,EAAAA,QAAQ,EAAEjB,GAAG,CACVuB,MADO,GAEPC,GAFO,CAEH,CAFG,EAEA,4CAFA,EAGPC,GAHO,CAGH,EAHG,EAGC,6CAHD,EAIPC,QAJO,CAIE,sBAJF,CADgC;AAM1CR,EAAAA,QAAQ,EAAElB,GAAG,CACVuB,MADO,GAEPC,GAFO,CAEH,CAFG,EAEA,6CAFA,EAGPC,GAHO,CAGH,EAHG,EAGC,8CAHD,EAIPC,QAJO,CAIE,sBAJF,CANgC;AAW1CP,EAAAA,oBAAoB,EAAEnB,GAAG,CACtBuB,MADmB,GAEnBI,KAFmB,CAGlB,CAAC3B,GAAG,CAAC4B,GAAJ,CAAQ,UAAR,CAAD,EAAsB,IAAtB,CAHkB,EAIlB,+CAJkB,EAMnBF,QANmB,CAMV,mCANU;AAXoB,CAAnB,CAAzB;;AAoBA,IAAMG,UAAU,GAAG,SAAbA,UAAa,OAAkB;AAAA,MAAfC,QAAe,QAAfA,QAAe;AACnC,SACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEtB,MAAM,CAACG;AAApB,KACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEH,MAAM,CAACM;AAApB,KACE,oBAAC,eAAD;AAAiB,IAAA,IAAI,EAAC,MAAtB;AAA6B,IAAA,WAAW,EAAC;AAAzC,IADF,CADF,EAKE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEN,MAAM,CAACM;AAApB,KACE,oBAAC,eAAD;AACE,IAAA,IAAI,EAAC,UADP;AAEE,IAAA,WAAW,EAAC,UAFd;AAGE,IAAA,eAAe;AAHjB,IADF,CALF,EAaE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEN,MAAM,CAACM;AAApB,KACE,oBAAC,eAAD;AACE,IAAA,IAAI,EAAC,sBADP;AAEE,IAAA,WAAW,EAAC,uBAFd;AAGE,IAAA,eAAe;AAHjB,IADF,CAbF,EAqBE,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAEgB,QAAjB;AAA2B,IAAA,MAAM,EAAC;AAAlC,eArBF,CADF;AA2BD,CA5BD;;AA8BA,IAAMC,MAAM,GAAG,SAATA,MAAS,GAAM;AAAA,qBACE7B,WAAW,CAACI,WAAD,CADb;AAAA;AAAA,MACZ0B,UADY;;AAAA,mBAEF3B,SAAS,EAFP;AAAA;AAAA,MAEZ4B,MAFY;;AAGnB,MAAMC,OAAO,GAAGjC,UAAU,EAA1B;;AAEA,MAAM6B,QAAQ,GAAG,SAAXA,QAAW,CAAOK,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACPC,YAAAA,KADO,GACmBD,MADnB,CACPC,KADO,EACAC,IADA,GACmBF,MADnB,CACAE,IADA,EACMnB,QADN,GACmBiB,MADnB,CACMjB,QADN;AAGToB,YAAAA,IAHS,GAGF;AACXF,cAAAA,KAAK,EAALA,KADW;AAEXC,cAAAA,IAAI,EAAJA,IAFW;AAGXnB,cAAAA,QAAQ,EAARA;AAHW,aAHE;AAAA;AAAA,6CASTc,UAAU,CAAC;AAAEO,cAAAA,SAAS,EAAE;AAAED,gBAAAA,IAAI,EAAJA;AAAF;AAAb,aAAD,CATD;;AAAA;AAAA;AAAA,6CAUTL,MAAM,CAACK,IAAD,CAVG;;AAAA;AAYfJ,YAAAA,OAAO,CAACM,IAAR,CAAa,GAAb;;AAZe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjB;;AAeA,SAEE,oBAAC,MAAD;AACE,IAAA,aAAa,EAAExB,aADjB;AAEE,IAAA,QAAQ,EAAEc,QAFZ;AAGE,IAAA,gBAAgB,EAAEV;AAHpB,KAKG;AAAA,QAAGqB,YAAH,SAAGA,YAAH;AAAA,WAAsB,oBAAC,UAAD;AAAY,MAAA,QAAQ,EAAEA;AAAtB,MAAtB;AAAA,GALH,CAFF;AAUD,CA9BD;;AAgCA,eAAeV,MAAf","sourcesContent":["import React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport { useHistory } from 'react-router-native';\nimport { useMutation } from '@apollo/react-hooks';\n\nimport Button from './Button';\nimport FormikTextInput from './FormikTextInput';\nimport useSignIn from '../hooks/useSignIn';\nimport { CREATE_USER } from '../graphql/mutations';\n\nimport Text from './Text';\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'white',\n    padding: 15,\n  },\n  fieldContainer: {\n    marginBottom: 15,\n  },\n});\n\nconst initialValues = {\n  username: '',\n  password: '',\n  passwordConfirmation: '',\n};\n\nconst validationSchema = yup.object().shape({\n  username: yup\n    .string()\n    .min(1, 'Username must be at least 1 character long')\n    .max(30, 'Username must be at most 30 characters long')\n    .required('Username is required'),\n  password: yup\n    .string()\n    .min(5, 'Password must be at least 5 characters long')\n    .max(50, 'Password must be at least 50 characters long')\n    .required('Password is required'),\n  passwordConfirmation: yup\n    .string()\n    .oneOf(\n      [yup.ref('password'), null],\n      'Password confirmation must match the password',\n    )\n    .required('Password confirmation is required'),\n});\n\nconst SignUpForm = ({ onSubmit }) => {\n  return (\n    <View style={styles.container}>\n      <View style={styles.fieldContainer}>\n        <FormikTextInput name=\"name\" placeholder=\"Name\" />\n      </View>\n\n      <View style={styles.fieldContainer}>\n        <FormikTextInput\n          name=\"password\"\n          placeholder=\"Password\"\n          secureTextEntry\n        />\n      </View>\n\n      <View style={styles.fieldContainer}>\n        <FormikTextInput\n          name=\"passwordConfirmation\"\n          placeholder=\"Password confirmation\"\n          secureTextEntry\n        />\n      </View>\n\n      <Button onPress={onSubmit} testID=\"submitButton\">\n        Sign up\n      </Button>\n    </View>\n  );\n};\n\nconst SignUp = () => {\n  const [createUser] = useMutation(CREATE_USER);\n  const [signIn] = useSignIn();\n  const history = useHistory();\n\n  const onSubmit = async (values) => {\n    const { email, name, password } = values;\n\n    const user = {\n      email,\n      name,\n      password,\n    };\n\n    await createUser({ variables: { user } });\n    await signIn(user);\n\n    history.push('/');\n  };\n\n  return (\n\n    <Formik\n      initialValues={initialValues}\n      onSubmit={onSubmit}\n      validationSchema={validationSchema}\n    >\n      {({ handleSubmit }) => <SignUpForm onSubmit={handleSubmit} />}\n    </Formik>\n  );\n};\n\nexport default SignUp;"]},"metadata":{},"sourceType":"module"}