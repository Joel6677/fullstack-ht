{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport firebase from 'firebase';\nimport * as React from 'react';\n\nvar FirebaseRecaptchaVerifierModal = function (_React$Component) {\n  _inherits(FirebaseRecaptchaVerifierModal, _React$Component);\n\n  var _super = _createSuper(FirebaseRecaptchaVerifierModal);\n\n  function FirebaseRecaptchaVerifierModal() {\n    var _this;\n\n    _classCallCheck(this, FirebaseRecaptchaVerifierModal);\n\n    _this = _super.apply(this, arguments);\n    _this.verifier = null;\n\n    _this.setRef = function (ref) {\n      if (ref) {\n        if (_this.props.appVerificationDisabledForTesting !== undefined) {\n          firebase.auth().settings.appVerificationDisabledForTesting = !!_this.props.appVerificationDisabledForTesting;\n        }\n\n        if (_this.props.languageCode) {\n          firebase.auth().languageCode = _this.props.languageCode;\n        }\n\n        _this.verifier = new firebase.auth.RecaptchaVerifier(ref, {\n          size: _this.props.attemptInvisibleVerification ? 'invisible' : 'normal'\n        });\n      } else {\n        _this.verifier = null;\n      }\n\n      if (_this.props.innerRef) {\n        _this.props.innerRef.current = _this.verifier;\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(FirebaseRecaptchaVerifierModal, [{\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps) {\n      return this.props.appVerificationDisabledForTesting !== nextProps.appVerificationDisabledForTesting || this.props.attemptInvisibleVerification !== nextProps.attemptInvisibleVerification || this.props.languageCode !== nextProps.languageCode;\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (this.props.innerRef !== prevProps.innerRef) {\n        if (this.props.innerRef) {\n          this.props.innerRef.current = this.verifier;\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          attemptInvisibleVerification = _this$props.attemptInvisibleVerification,\n          appVerificationDisabledForTesting = _this$props.appVerificationDisabledForTesting,\n          languageCode = _this$props.languageCode;\n      return React.createElement(\"div\", {\n        style: styles.container,\n        key: (attemptInvisibleVerification ? 'invisible' : 'visible') + \"-\" + (appVerificationDisabledForTesting ? 'testing' : 'regular') + \"-\" + (languageCode != null ? languageCode : ''),\n        id: \"recaptcha-container\",\n        ref: this.setRef,\n        dangerouslySetInnerHTML: {\n          __html: ''\n        }\n      });\n    }\n  }]);\n\n  return FirebaseRecaptchaVerifierModal;\n}(React.Component);\n\nexport default React.forwardRef(function (props, ref) {\n  return React.createElement(FirebaseRecaptchaVerifierModal, _extends({}, props, {\n    innerRef: ref\n  }));\n});\nvar styles = {\n  container: {\n    zIndex: 1000\n  }\n};","map":{"version":3,"sources":["../src/FirebaseRecaptchaVerifierModal.web.tsx"],"names":[],"mappings":";;;;;;;;;;;AAAA,OAAO,QAAP,MAAqB,UAArB;AACA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;;IAWM,8B;;;;;AAAN,4CAAA;AAAA;;AAAA;;;AACU,UAAA,QAAA,GAAmD,IAAnD;;AAEA,UAAA,MAAA,GAAS,UAAC,GAAD,EAAa;AAC5B,UAAI,GAAJ,EAAS;AACP,YAAI,MAAK,KAAL,CAAW,iCAAX,KAAiD,SAArD,EAAgE;AAC9D,UAAA,QAAQ,CAAC,IAAT,GAAgB,QAAhB,CAAyB,iCAAzB,GAA6D,CAAC,CAAC,MAAK,KAAL,CAC5D,iCADH;AAED;;AACD,YAAI,MAAK,KAAL,CAAW,YAAf,EAA6B;AAC3B,UAAA,QAAQ,CAAC,IAAT,GAAgB,YAAhB,GAA+B,MAAK,KAAL,CAAW,YAA1C;AACD;;AACD,cAAK,QAAL,GAAgB,IAAI,QAAQ,CAAC,IAAT,CAAc,iBAAlB,CAAoC,GAApC,EAAyC;AACvD,UAAA,IAAI,EAAE,MAAK,KAAL,CAAW,4BAAX,GAA0C,WAA1C,GAAwD;AADP,SAAzC,CAAhB;AAGD,OAXD,MAWO;AACL,cAAK,QAAL,GAAgB,IAAhB;AACD;;AACD,UAAI,MAAK,KAAL,CAAW,QAAf,EAAyB;AACvB,cAAK,KAAL,CAAW,QAAX,CAAoB,OAApB,GAA8B,MAAK,QAAnC;AACD;AACF,KAlBO;;AAHV;AA0DC;;;;WAnCC,+BAAsB,SAAtB,EAAsC;AACpC,aACE,KAAK,KAAL,CAAW,iCAAX,KACE,SAAS,CAAC,iCADZ,IAEA,KAAK,KAAL,CAAW,4BAAX,KAA4C,SAAS,CAAC,4BAFtD,IAGA,KAAK,KAAL,CAAW,YAAX,KAA4B,SAAS,CAAC,YAJxC;AAMD;;;WAED,4BAAmB,SAAnB,EAAmC;AACjC,UAAI,KAAK,KAAL,CAAW,QAAX,KAAwB,SAAS,CAAC,QAAtC,EAAgD;AAC9C,YAAI,KAAK,KAAL,CAAW,QAAf,EAAyB;AACvB,eAAK,KAAL,CAAW,QAAX,CAAoB,OAApB,GAA8B,KAAK,QAAnC;AACD;AACF;AACF;;;WAED,kBAAM;AACJ,wBAII,KAAK,KAJT;AAAA,UACE,4BADF,eACE,4BADF;AAAA,UAEE,iCAFF,eAEE,iCAFF;AAAA,UAGE,YAHF,eAGE,YAHF;AAKA,aACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AACE,QAAA,KAAK,EAAE,MAAM,CAAC,SADhB;AAEE,QAAA,GAAG,GAAK,4BAA4B,GAAG,WAAH,GAAiB,SAAlD,WACD,iCAAiC,GAAG,SAAH,GAAe,SAD/C,WAEC,YAFD,WAEC,YAFD,GAEiB,EAFjB,CAFL;AAKE,QAAA,EAAE,EAAC,qBALL;AAME,QAAA,GAAG,EAAE,KAAK,MANZ;AAOE,QAAA,uBAAuB,EAAE;AAAE,UAAA,MAAM,EAAE;AAAV;AAP3B,OAAA,CADF;AAWD;;;;EAzD0C,KAAK,CAAC,S;;AA4DnD,eAAe,KAAK,CAAC,UAAN,CAAiB,UAAC,KAAD,EAAiC,GAAjC;AAAA,SAC9B,KAAA,CAAA,aAAA,CAAC,8BAAD,EAA+B,SAAA,EAAA,EAAK,KAAL,EAAU;AAAE,IAAA,QAAQ,EAAE;AAAZ,GAAV,CAA/B,CAD8B;AAAA,CAAjB,CAAf;AAIA,IAAM,MAAM,GAAG;AAEb,EAAA,SAAS,EAAE;AAAE,IAAA,MAAM,EAAE;AAAV;AAFE,CAAf","sourcesContent":["import firebase from 'firebase';\nimport * as React from 'react';\n\nimport { FirebaseAuthApplicationVerifier } from './FirebaseRecaptcha.types';\n\ninterface Props {\n  attemptInvisibleVerification?: boolean;\n  appVerificationDisabledForTesting?: boolean;\n  languageCode?: string;\n  innerRef: React.MutableRefObject<FirebaseAuthApplicationVerifier | null>;\n}\n\nclass FirebaseRecaptchaVerifierModal extends React.Component<Props> {\n  private verifier: FirebaseAuthApplicationVerifier | null = null;\n\n  private setRef = (ref: any) => {\n    if (ref) {\n      if (this.props.appVerificationDisabledForTesting !== undefined) {\n        firebase.auth().settings.appVerificationDisabledForTesting = !!this.props\n          .appVerificationDisabledForTesting;\n      }\n      if (this.props.languageCode) {\n        firebase.auth().languageCode = this.props.languageCode;\n      }\n      this.verifier = new firebase.auth.RecaptchaVerifier(ref, {\n        size: this.props.attemptInvisibleVerification ? 'invisible' : 'normal',\n      });\n    } else {\n      this.verifier = null;\n    }\n    if (this.props.innerRef) {\n      this.props.innerRef.current = this.verifier;\n    }\n  };\n\n  shouldComponentUpdate(nextProps: Props) {\n    return (\n      this.props.appVerificationDisabledForTesting !==\n        nextProps.appVerificationDisabledForTesting ||\n      this.props.attemptInvisibleVerification !== nextProps.attemptInvisibleVerification ||\n      this.props.languageCode !== nextProps.languageCode\n    );\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (this.props.innerRef !== prevProps.innerRef) {\n      if (this.props.innerRef) {\n        this.props.innerRef.current = this.verifier;\n      }\n    }\n  }\n\n  render() {\n    const {\n      attemptInvisibleVerification,\n      appVerificationDisabledForTesting,\n      languageCode,\n    } = this.props;\n    return (\n      <div\n        style={styles.container}\n        key={`${attemptInvisibleVerification ? 'invisible' : 'visible'}-${\n          appVerificationDisabledForTesting ? 'testing' : 'regular'\n        }-${languageCode ?? ''}`}\n        id=\"recaptcha-container\"\n        ref={this.setRef}\n        dangerouslySetInnerHTML={{ __html: '' }}\n      />\n    );\n  }\n}\n\nexport default React.forwardRef((props: Omit<Props, 'innerRef'>, ref: any) => (\n  <FirebaseRecaptchaVerifierModal {...props} innerRef={ref} />\n));\n\nconst styles = {\n  // Ensure the reCAPTCHA badge is in front or other elements\n  container: { zIndex: 1000 },\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}