{"ast":null,"code":"var _jsxFileName = \"/home/hejoel/fullstack/fullstack-ht/fullstack-ht/fullstack-ht-app/src/components/UploadUserInfo.jsx\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport { Button } from 'react-native-paper';\nimport { Formik } from 'formik';\nimport { useHistory } from 'react-router-native';\nimport * as yup from 'yup';\nimport FormikTextInput from \"./FormikTextInput\";\nimport ChooseDate from \"./ChooseDate\";\nimport theme from \"../theme\";\nvar styles = StyleSheet.create({\n  container: {\n    flexDirection: 'column',\n    justifyContent: 'center',\n    flexWrap: 'wrap',\n    alignContent: 'center',\n    height: '100%',\n    width: '100%',\n    position: 'absolute',\n    flex: 1,\n    zIndex: 1\n  },\n  fieldContainer: {\n    marginBottom: 15\n  },\n  buttonContainer: {\n    position: 'absolute',\n    zIndex: 2,\n    paddingVertical: 10,\n    paddingHorizontal: 15,\n    borderWidth: 1,\n    borderStyle: 'solid',\n    borderRadius: 5,\n    borderColor: '#aab2bb',\n    marginBottom: 15\n  },\n  textContainer: {\n    fontSize: theme.fontSizes.body,\n    fontFamily: theme.fonts.main,\n    color: theme.colors.textPrimary\n  }\n});\nvar initialValues = {\n  firstName: '',\n  lastName: '',\n  birthdate: '',\n  country: '',\n  bio: ''\n};\nvar validationSchema = yup.object().shape({\n  firstName: yup.string().min(1, 'First name must be at least 1 charaters long').required('First name is required'),\n  lastName: yup.string().min(1, 'Last name must be at least 1 characters long').required('Last name is required'),\n  birthdate: yup.date().min(8, 'Birthdate must be atleast 8 characters').max(8, 'Birthdate must be at most 8 characters long').required('Birtdate is required'),\n  country: yup.string().required('Country is required'),\n  bio: yup.string().max(150, 'Bio can be at most 150 characters long')\n});\n\nvar submitDate = function submitDate() {\n  return React.createElement(ChooseDate, null);\n};\n\nvar UserinfoForm = function UserinfoForm(_ref) {\n  var onSubmit = _ref.onSubmit;\n  return React.createElement(View, {\n    style: styles.container\n  }, React.createElement(View, {\n    style: styles.fieldContainer\n  }, React.createElement(FormikTextInput, {\n    name: \"firstName\",\n    placeholder: \"First name\"\n  })), React.createElement(View, {\n    style: styles.fieldContainer\n  }, React.createElement(FormikTextInput, {\n    name: \"lastName\",\n    placeholder: \"Last name\"\n  })), React.createElement(View, {\n    style: styles.buttonContainer\n  }, React.createElement(Text, {\n    onPress: function onPress() {\n      return submitDate;\n    },\n    style: styles.textContainer\n  }, \"Birthdate\")), React.createElement(View, {\n    style: styles.fieldContainer\n  }, React.createElement(FormikTextInput, {\n    name: \"country\",\n    placeholder: \"Country\"\n  })), React.createElement(View, {\n    style: styles.fieldContainer\n  }, React.createElement(FormikTextInput, {\n    name: \"bio\",\n    placeholder: \"Bio\",\n    multiline: true,\n    numberOfLines: 4\n  })), React.createElement(Button, {\n    mode: 'outlined',\n    onPress: onSubmit\n  }, \"Submit\"));\n};\n\nvar UploadUserInfo = function UploadUserInfo() {\n  var history = useHistory();\n  return React.createElement(React.Fragment, null, React.createElement(Formik, {\n    style: styles.container,\n    initialValues: initialValues,\n    onSubmit: function onSubmit() {\n      history.push('/');\n    },\n    validationSchema: validationSchema\n  }, function (_ref2) {\n    var handleSubmit = _ref2.handleSubmit;\n    return React.createElement(UserinfoForm, {\n      onSubmit: handleSubmit\n    });\n  }));\n};\n\nexport default UploadUserInfo;","map":{"version":3,"sources":["/home/hejoel/fullstack/fullstack-ht/fullstack-ht/fullstack-ht-app/src/components/UploadUserInfo.jsx"],"names":["React","useState","Button","Formik","useHistory","yup","FormikTextInput","ChooseDate","theme","styles","StyleSheet","create","container","flexDirection","justifyContent","flexWrap","alignContent","height","width","position","flex","zIndex","fieldContainer","marginBottom","buttonContainer","paddingVertical","paddingHorizontal","borderWidth","borderStyle","borderRadius","borderColor","textContainer","fontSize","fontSizes","body","fontFamily","fonts","main","color","colors","textPrimary","initialValues","firstName","lastName","birthdate","country","bio","validationSchema","object","shape","string","min","required","date","max","submitDate","UserinfoForm","onSubmit","UploadUserInfo","history","push","handleSubmit"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { View, StyleSheet, Text, TouchableWithoutFeedback} from 'react-native';\nimport { Button } from 'react-native-paper';\nimport { Formik } from 'formik';\nimport { useHistory } from 'react-router-native';\nimport * as yup from 'yup';\nimport FormikTextInput from './FormikTextInput';\nimport ChooseDate from './ChooseDate';\nimport theme from '../theme';\n\nconst styles = StyleSheet.create({\n    container: {\n      flexDirection: 'column',\n      justifyContent: 'center',\n      flexWrap: 'wrap',\n      alignContent: 'center',\n      height: '100%',\n      width: '100%',\n      position: 'absolute',\n      flex: 1,\n      zIndex: 1\n    },\n    fieldContainer: {\n      marginBottom: 15,\n    },\n    buttonContainer: {\n        position: 'absolute',\n        zIndex: 2,\n        paddingVertical: 10,\n        paddingHorizontal: 15,\n        borderWidth: 1,\n        borderStyle: 'solid',\n        // fontSize: theme.fontSizes.body,\n        // fontFamily: theme.fonts.main,\n        // color: theme.colors.textPrimary,\n        borderRadius: 5,\n        borderColor: '#aab2bb',\n        marginBottom: 15,\n    }, textContainer: {\n        fontSize: theme.fontSizes.body,\n        fontFamily: theme.fonts.main,\n        color: theme.colors.textPrimary,\n    }\n  });\n\nconst initialValues = {\n    firstName: '',\n    lastName: '',\n    birthdate: '',\n    country: '',\n    bio: ''\n\n};\n\nconst validationSchema = yup.object().shape({\n    firstName: yup\n        .string()\n        .min(1, 'First name must be at least 1 charaters long')\n        .required('First name is required'),\n    lastName: yup\n        .string()\n        .min(1, 'Last name must be at least 1 characters long')\n        .required('Last name is required'),\n    birthdate: yup\n        .date()\n        .min(8, 'Birthdate must be atleast 8 characters')\n        .max(8, 'Birthdate must be at most 8 characters long')\n        .required('Birtdate is required'),\n    country: yup\n        .string()\n        .required('Country is required'),\n    bio: yup\n        .string()\n        .max(150, 'Bio can be at most 150 characters long'),\n});\n\nconst submitDate = () => {\n    return (<ChooseDate/>);\n};\n\n\nconst UserinfoForm = ({ onSubmit }) => {\n\n\n    return (\n        <View style={styles.container}>\n\n            <View style={styles.fieldContainer}>\n                <FormikTextInput\n                    name=\"firstName\"\n                    placeholder=\"First name\" />\n            </View>\n\n            <View style={styles.fieldContainer}>\n                <FormikTextInput\n                    name=\"lastName\"\n                    placeholder=\"Last name\" />\n            </View>\n\n            {/* <View style={styles.fieldContainer}>\n                <TouchableWithoutFeedback onPress={submitDate()}>\n                    <FormikTextInput\n                        value=\"date\"\n                        name=\"birthdate\"\n                        placeholder=\"Birthdate\"\n                    />\n                </TouchableWithoutFeedback>\n            </View> */}\n\n            <View style={styles.buttonContainer}>\n                <Text onPress={() => submitDate} style={styles.textContainer}>Birthdate</Text>\n            </View>\n\n            <View style={styles.fieldContainer}>\n                <FormikTextInput\n                    name=\"country\"\n                    placeholder=\"Country\"\n                />\n            </View>\n\n            <View style={styles.fieldContainer}>\n                <FormikTextInput\n                    name=\"bio\"\n                    placeholder=\"Bio\"\n                    multiline\n                    numberOfLines={4}\n                />\n            </View>\n\n        <Button mode={'outlined'} onPress={onSubmit}>\n            Submit\n        </Button>\n\n        </View>\n    );\n};\n\nconst UploadUserInfo = () => {\n\n    const history = useHistory();\n\n    // const onSubmit = async (values) => {\n    //     const { email, password } = values;\n\n    //     SignUpWithEmail(email, password);\n\n    //     history.push(\"/choose-pic\");\n    // };\n\n\n    return (\n        <>\n            <Formik\n                style={styles.container}\n                initialValues={initialValues}\n                onSubmit={() => { history.push('/'); }}\n                validationSchema={validationSchema}\n            >\n                {({ handleSubmit }) => <UserinfoForm onSubmit={handleSubmit} />}\n            </Formik>\n        </>\n    );\n};\n\nexport default UploadUserInfo;"]},"metadata":{},"sourceType":"module"}