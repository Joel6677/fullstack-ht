{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nvar _this = this,\n    _jsxFileName = \"/home/hejoel/fullstack/fullstack-ht/fullstack-ht/fullstack-ht-app/src/components/MyMessages.jsx\";\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from 'react';\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { useHistory } from 'react-router-native';\nimport firebase from 'firebase/app';\nimport MessageItem from \"./MessageItem\";\nimport 'firebase/auth';\nimport 'firebase/firestore';\nvar styles = StyleSheet.create({\n  container: {\n    padding: 5,\n    height: '100%',\n    width: '100%',\n    position: 'absolute',\n    zIndex: 1,\n    paddingTop: 80,\n    paddingBottom: 60\n  },\n  separator: {\n    marginVertical: 5\n  },\n  headerContainer: {\n    padding: 10\n  },\n  searchContainer: {\n    marginBottom: 15\n  }\n});\n\nvar ItemSeparator = function ItemSeparator() {\n  return React.createElement(View, {\n    style: styles.separator,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 3\n    }\n  });\n};\n\nvar getMessages = function getMessages() {\n  var _firebase$auth, currentUser, chatIDs, messages;\n\n  return _regeneratorRuntime.async(function getMessages$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _firebase$auth = firebase.auth(), currentUser = _firebase$auth.currentUser;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(firebase.firestore().collection('users').where('email', '!=', currentUser.email).get().then(function (querySnapshot) {\n            var ids = querySnapshot.docs.map(function (doc) {\n              var id = doc.id;\n              var chatIDpre = [];\n              chatIDpre.push(currentUser.uid);\n              chatIDpre.push(id);\n              chatIDpre.sort();\n              return chatIDpre.join('_');\n            });\n            return ids;\n          }).catch(function (error) {\n            console.log('Error getting documents: ', error);\n          }));\n\n        case 3:\n          chatIDs = _context.sent;\n          _context.next = 6;\n          return _regeneratorRuntime.awrap(firebase.firestore().collection('messages').where('chatID', 'in', chatIDs).get().then(function (querySnapshot) {\n            var posts = querySnapshot.docs.map(function (doc) {\n              var data = doc.data();\n              var userIDs = doc.id.split('_');\n              console.log('userIDs: ', userIDs);\n              var id;\n\n              for (var i = 0; i < 2; i++) {\n                if (userIDs[i] !== currentUser.uid) {\n                  id = userIDs[i];\n                }\n              }\n\n              return _objectSpread({\n                id: id\n              }, data);\n            });\n            return posts;\n          }).catch(function (error) {\n            console.log('Error getting documents: ', error);\n          }));\n\n        case 6:\n          messages = _context.sent;\n          console.log('chatIDs: ', chatIDs);\n          console.log('messages: ', messages);\n          return _context.abrupt(\"return\", messages);\n\n        case 10:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nvar MyMessages = function MyMessages() {\n  var history = useHistory();\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      messages = _useState2[0],\n      setMessages = _useState2[1];\n\n  useEffect(function () {\n    getMessages().then(function (messages) {\n      setMessages(messages);\n    });\n  }, []);\n  return React.createElement(View, {\n    style: styles.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 5\n    }\n  }, React.createElement(FlatList, {\n    data: messages,\n    keyExtractor: function keyExtractor(_ref) {\n      var id = _ref.id;\n      return id;\n    },\n    renderItem: function renderItem(_ref2) {\n      var item = _ref2.item;\n      return React.createElement(TouchableOpacity, {\n        key: item,\n        onPress: function onPress() {\n          return history.push(\"/messenger/\" + item.id);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }\n      }, React.createElement(MessageItem, {\n        message: item,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 13\n        }\n      }));\n    },\n    ItemSeparatorComponent: ItemSeparator,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default MyMessages;","map":{"version":3,"sources":["/home/hejoel/fullstack/fullstack-ht/fullstack-ht/fullstack-ht-app/src/components/MyMessages.jsx"],"names":["React","useState","useEffect","useHistory","firebase","MessageItem","styles","StyleSheet","create","container","padding","height","width","position","zIndex","paddingTop","paddingBottom","separator","marginVertical","headerContainer","searchContainer","marginBottom","ItemSeparator","getMessages","auth","currentUser","firestore","collection","where","email","get","then","querySnapshot","ids","docs","map","doc","id","chatIDpre","push","uid","sort","join","catch","error","console","log","chatIDs","posts","data","userIDs","split","i","messages","MyMessages","history","setMessages","item"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  FlatList, View, StyleSheet, TouchableOpacity,\n} from 'react-native';\nimport { useHistory } from 'react-router-native';\nimport firebase from 'firebase/app';\nimport MessageItem from './MessageItem';\nimport 'firebase/auth';\nimport 'firebase/firestore';\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 5,\n    height: '100%',\n    width: '100%',\n    position: 'absolute',\n    zIndex: 1,\n    paddingTop: 80,\n    paddingBottom: 60,\n  },\n  separator: {\n    marginVertical: 5,\n  },\n  headerContainer: {\n    padding: 10,\n  },\n  searchContainer: {\n    marginBottom: 15,\n  },\n});\n\nconst ItemSeparator = () => (\n  <View style={styles.separator} />\n);\n\nconst getMessages = async () => {\n  const { currentUser } = firebase.auth();\n\n  const chatIDs = await firebase.firestore()\n    .collection('users')\n    .where('email', '!=', currentUser.email)\n    .get()\n    .then((querySnapshot) => {\n      const ids = querySnapshot.docs.map((doc) => {\n        const { id } = doc;\n        const chatIDpre = [];\n        chatIDpre.push(currentUser.uid);\n        chatIDpre.push(id);\n        chatIDpre.sort();\n        return chatIDpre.join('_');\n      });\n      return ids;\n    })\n    .catch((error) => {\n      console.log('Error getting documents: ', error);\n    });\n\n  const messages = await firebase.firestore()\n    .collection('messages').where('chatID', 'in', chatIDs)\n    .get()\n    .then((querySnapshot) => {\n      const posts = querySnapshot.docs.map((doc) => {\n        const data = doc.data();\n        const userIDs = doc.id.split('_');\n        console.log('userIDs: ', userIDs);\n        let id;\n        for (let i = 0; i < 2; i++) {\n          if (userIDs[i] !== currentUser.uid) {\n            id = userIDs[i];\n          }\n        }\n        return { id, ...data };\n      });\n      return posts;\n    })\n    .catch((error) => {\n      console.log('Error getting documents: ', error);\n    });\n\n  console.log('chatIDs: ', chatIDs);\n  console.log('messages: ', messages);\n\n  return messages;\n};\n\nconst MyMessages = () => {\n  const history = useHistory();\n  const [messages, setMessages] = useState([]);\n\n  useEffect(() => {\n    getMessages().then((messages) => { setMessages(messages); });\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <FlatList\n        data={messages}\n        keyExtractor={({ id }) => id}\n        renderItem={({ item }) => (\n          <TouchableOpacity\n            key={item}\n            onPress={() => history.push(`/messenger/${item.id}`)}\n          >\n            <MessageItem message={item} />\n          </TouchableOpacity>\n        )}\n        ItemSeparatorComponent={ItemSeparator}\n      />\n    </View>\n  );\n};\n\nexport default MyMessages;\n"]},"metadata":{},"sourceType":"module"}