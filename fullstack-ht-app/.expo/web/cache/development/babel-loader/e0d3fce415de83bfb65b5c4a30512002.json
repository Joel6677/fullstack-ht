{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/home/hejoel/fullstack/fullstack-ht/fullstack-ht/fullstack-ht-app/src/components/Messenger.jsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useContext, useRef, useEffect, useCallback } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { Button, IconButton, TextInput } from 'react-native-paper';\nimport * as firebase from 'firebase';\nimport { sendChatMessage, handleSend } from \"../firebase/chat\";\nimport { GiftedChat } from 'react-native-gifted-chat';\nimport { useParams } from 'react-router-native';\nimport Text from \"./Text\";\nimport Moment from 'moment';\nvar styles = StyleSheet.create({\n  container: {\n    zIndex: 1,\n    padding: 100,\n    height: '100%',\n    width: '100%',\n    position: 'absolute',\n    flexDirection: 'column',\n    backgroundColor: 'black'\n  },\n  sendIcon: {\n    backgroundColor: 'orange',\n    borderRadius: 50\n  },\n  messageContainer: {\n    flexDirection: 'row',\n    borderRadius: 5,\n    backgroundColor: 'orange',\n    width: '100%'\n  },\n  messageText: {\n    margin: 5\n  },\n  dateText: {\n    margin: 5\n  },\n  separator: {\n    height: 10\n  },\n  messageContainerSent: {\n    alignSelf: 'flex-end'\n  },\n  textInput: {\n    backgroundColor: 'white',\n    width: '80%'\n  },\n  messageContainerReceived: {\n    alignSelf: 'flex-start'\n  },\n  sendMessageContainer: {\n    flexDirection: 'row',\n    alignItems: 'center'\n  }\n});\n\nvar ItemSeparator = function ItemSeparator() {\n  return React.createElement(View, {\n    style: styles.separator\n  });\n};\n\nvar MessageItem = function MessageItem(_ref) {\n  var message = _ref.message;\n  var messageSent = message.user._id === firebase.auth().currentUser.uid;\n  return React.createElement(View, {\n    style: styles.messageContainer\n  }, React.createElement(View, null, React.createElement(Text, {\n    style: styles.messageText\n  }, message.text), React.createElement(Text, {\n    style: styles.dateText\n  }, Moment(message.createdAt).format('DD-MM-YYYYTHH:mm'))));\n};\n\nvar Messenger = function Messenger() {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      messages = _useState2[0],\n      setMessages = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      text = _useState4[0],\n      setText = _useState4[1];\n\n  var currentUser = firebase.auth().currentUser;\n\n  var _useParams = useParams(),\n      id = _useParams.id;\n\n  var chatID = function chatID() {\n    var chatterID = currentUser.uid;\n    var chateeID = id;\n    var chatIDpre = [];\n    chatIDpre.push(chatterID);\n    chatIDpre.push(chateeID);\n    chatIDpre.sort();\n    return chatIDpre.join('_');\n  };\n\n  useEffect(function () {\n    var messagesListener = firebase.firestore().collection('messages').doc(chatID()).collection('chats').orderBy('createdAt', 'desc').onSnapshot(function (querySnapshot) {\n      var messages = querySnapshot.docs.map(function (doc) {\n        var firebaseData = doc.data();\n        console.log('firebaseData: ', firebaseData);\n\n        var data = _objectSpread({\n          _id: doc.id,\n          text: '',\n          createdAt: new Date().getTime()\n        }, firebaseData);\n\n        if (!firebaseData.system) {\n          data.user = _objectSpread(_objectSpread({}, firebaseData.user), {}, {\n            name: firebaseData.user.email\n          });\n        }\n\n        return data;\n      });\n      setMessages(messages);\n    });\n    return function () {\n      return messagesListener();\n    };\n  }, []);\n  return React.createElement(View, {\n    style: styles.container\n  }, React.createElement(FlatList, {\n    data: messages,\n    inverted: true,\n    renderItem: function renderItem(_ref2) {\n      var item = _ref2.item;\n      return React.createElement(MessageItem, {\n        message: item\n      });\n    },\n    keyExtractor: function keyExtractor(_ref3) {\n      var id = _ref3.id;\n      return id;\n    },\n    ItemSeparatorComponent: ItemSeparator\n  }), React.createElement(View, {\n    style: styles.sendMessageContainer\n  }, React.createElement(TextInput, {\n    label: \"\",\n    value: text,\n    onChangeText: function onChangeText(text) {\n      return setText(text);\n    },\n    style: styles.textInput\n  }), React.createElement(IconButton, {\n    style: styles.sendIcon,\n    icon: \"send\",\n    size: 25,\n    onPress: function onPress() {\n      sendChatMessage(chatID(), text);\n    }\n  })));\n};\n\nexport default Messenger;","map":{"version":3,"sources":["/home/hejoel/fullstack/fullstack-ht/fullstack-ht/fullstack-ht-app/src/components/Messenger.jsx"],"names":["React","useState","useContext","useRef","useEffect","useCallback","Button","IconButton","TextInput","firebase","sendChatMessage","handleSend","GiftedChat","useParams","Text","Moment","styles","StyleSheet","create","container","zIndex","padding","height","width","position","flexDirection","backgroundColor","sendIcon","borderRadius","messageContainer","messageText","margin","dateText","separator","messageContainerSent","alignSelf","textInput","messageContainerReceived","sendMessageContainer","alignItems","ItemSeparator","MessageItem","message","messageSent","user","_id","auth","currentUser","uid","text","createdAt","format","Messenger","messages","setMessages","setText","id","chatID","chatterID","chateeID","chatIDpre","push","sort","join","messagesListener","firestore","collection","doc","orderBy","onSnapshot","querySnapshot","docs","map","firebaseData","data","console","log","Date","getTime","system","name","email","item"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useRef, useEffect, useCallback } from 'react';\nimport {View, StyleSheet, FlatList, Image} from 'react-native';\nimport {Button, IconButton, TextInput} from 'react-native-paper';\nimport * as firebase from 'firebase';\nimport { sendChatMessage, handleSend } from '../firebase/chat';\nimport { GiftedChat } from 'react-native-gifted-chat';\nimport { useParams } from 'react-router-native';\nimport Text from './Text';\nimport Moment from 'moment';\n\n\nconst styles = StyleSheet.create({\n    container: {\n        zIndex: 1,\n        padding: 100,\n        height: '100%',\n        width: '100%',\n        position: 'absolute',\n        flexDirection: 'column',\n        backgroundColor: 'black'\n    },\n    sendIcon: {\n        backgroundColor: 'orange',\n        borderRadius: 50\n    },\n    messageContainer: {\n        flexDirection: 'row',\n        borderRadius: 5,\n        backgroundColor: 'orange',\n        width: '100%'\n    },\n    messageText: {\n        margin: 5\n    },\n    dateText: {\n        margin: 5\n    },\n    separator: {\n        height: 10,\n    },\n    messageContainerSent: {\n        alignSelf: 'flex-end',\n        \n    },\n    textInput: {\n        backgroundColor: 'white',\n        width: '80%'\n    },\n    messageContainerReceived: {\n        alignSelf: 'flex-start'\n    },\n    sendMessageContainer: {\n        flexDirection: 'row',\n        alignItems: 'center'\n        \n    }\n});\n\nconst ItemSeparator = () => <View style={styles.separator} />;\n\nconst MessageItem = ({message}) => {\n    const messageSent = message.user._id===firebase.auth().currentUser.uid;\n\n    return (\n        <View style={styles.messageContainer}>\n            <View>\n                <Text style={styles.messageText}>\n                    {message.text}\n                </Text>\n                <Text style={styles.dateText}>\n               {Moment(message.createdAt).format('DD-MM-YYYYTHH:mm')}\n                </Text>\n            </View>\n      \n        </View>\n    );\n};\n\nconst Messenger = () => {\n\n    const [messages, setMessages] = useState([]);\n\n    const [text, setText] = useState('');\n    const currentUser = firebase.auth().currentUser;\n    const { id } = useParams();\n\n\n    const chatID = () => {\n        const chatterID = currentUser.uid;\n        const chateeID = id;\n        const chatIDpre = [];\n        chatIDpre.push(chatterID);\n        chatIDpre.push(chateeID);\n        chatIDpre.sort();\n        return chatIDpre.join('_');\n      };\n\n    useEffect(() => {\n        const messagesListener = firebase.firestore()\n            .collection('messages')\n            .doc(chatID())\n            .collection('chats')\n            .orderBy('createdAt', 'desc')\n            .onSnapshot(querySnapshot => {\n                const messages = querySnapshot.docs.map(doc => {\n                    const firebaseData = doc.data();\n                    console.log('firebaseData: ', firebaseData);\n\n                    const data = {\n                        _id: doc.id,\n                        text: '',\n                        createdAt: new Date().getTime(),\n                        ...firebaseData\n                    };\n\n                    if (!firebaseData.system) {\n                        data.user = {\n                            ...firebaseData.user,\n                            name: firebaseData.user.email\n                        };\n                    }\n\n                    return data;\n                });\n\n                setMessages(messages);\n            });\n\n        return () => messagesListener();\n    }, []);\n\n\n\n    // handle send callback systeemi\n    return(\n        <View style={styles.container}>\n            <FlatList\n                data={messages}\n                inverted\n                renderItem={({ item }) => (\n                    <MessageItem\n                        message={item}\n                    />\n                )}\n                keyExtractor={({ id }) => id}\n                ItemSeparatorComponent={ItemSeparator}\n            />\n\n            <View style={styles.sendMessageContainer}>\n                <TextInput\n                    label=\"\"\n                    value={text}\n                    onChangeText={text => setText(text)}\n                    style={styles.textInput}\n                />\n                <IconButton style={styles.sendIcon} icon=\"send\" size={25} onPress={()=>{sendChatMessage(chatID(),text);}} />\n            </View>\n                    \n        </View>\n    );\n};\n\nexport default Messenger;"]},"metadata":{},"sourceType":"module"}