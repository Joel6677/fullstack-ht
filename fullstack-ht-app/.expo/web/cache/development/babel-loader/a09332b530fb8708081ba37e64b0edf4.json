{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/hejoel/fullstack/fullstack-ht/fullstack-ht/fullstack-ht-app/src/components/UploadUserInfo.jsx\";\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useContext } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport { Button } from 'react-native-paper';\nimport { Formik } from 'formik';\nimport { useHistory } from 'react-router-native';\nimport * as yup from 'yup';\nimport DateTimePicker from '@react-native-community/datetimepicker';\nimport Moment from 'moment';\nimport FormikTextInput from \"./FormikTextInput\";\nimport theme from \"../theme\";\nimport { uploadUserInfo } from \"../firebase/uploads\";\nimport { StateContext } from \"../state\";\nvar styles = StyleSheet.create({\n  container: {\n    flexDirection: 'column',\n    justifyContent: 'center',\n    height: '100%',\n    width: '100%',\n    position: 'absolute',\n    flex: 1,\n    zIndex: 1\n  },\n  fieldContainer: {\n    marginBottom: 15\n  },\n  buttonContainer: {\n    zIndex: 10,\n    paddingVertical: 10,\n    paddingHorizontal: 15,\n    borderWidth: 1,\n    borderStyle: 'solid',\n    borderRadius: 5,\n    borderColor: '#aab2bb',\n    marginBottom: 15\n  },\n  textContainer: {\n    fontSize: theme.fontSizes.body,\n    fontFamily: theme.fonts.main,\n    color: '#A6ACAF'\n  }\n});\nvar initialValues = {\n  firstName: '',\n  lastName: '',\n  bio: ''\n};\nvar validationSchema = yup.object().shape({\n  firstName: yup.string().min(1, 'First name must be at least 1 charaters long').required('First name is required'),\n  lastName: yup.string().min(1, 'Last name must be at least 1 characters long').required('Last name is required'),\n  bio: yup.string().max(150, 'Bio can be at most 150 characters long')\n});\n\nvar UserinfoForm = function UserinfoForm(_ref) {\n  var onSubmit = _ref.onSubmit,\n      date = _ref.date,\n      pressed = _ref.pressed;\n\n  var _useContext = useContext(StateContext),\n      state = _useContext.state,\n      dispatch = _useContext.dispatch;\n\n  var text = pressed ? Moment(date).format('DD-MM-YYYY') : 'Birthdate';\n  return React.createElement(View, {\n    style: styles.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: styles.fieldContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }, React.createElement(FormikTextInput, {\n    name: \"firstName\",\n    placeholder: \"First name\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  })), React.createElement(View, {\n    style: styles.fieldContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }, React.createElement(FormikTextInput, {\n    name: \"lastName\",\n    placeholder: \"Last name\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  })), React.createElement(TouchableWithoutFeedback, {\n    onPress: function onPress() {\n      return dispatch({\n        type: 'SET_SHOW',\n        payload: !state.show\n      });\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    style: styles.buttonContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    style: styles.textContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 11\n    }\n  }, text))), React.createElement(View, {\n    style: styles.fieldContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }\n  }, React.createElement(FormikTextInput, {\n    name: \"bio\",\n    placeholder: \"Bio\",\n    multiline: true,\n    numberOfLines: 1,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  })), React.createElement(Button, {\n    mode: 'outlined',\n    onPress: onSubmit,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }\n  }, \"Submit\"));\n};\n\nvar UploadUserInfo = function UploadUserInfo() {\n  var history = useHistory();\n\n  var _useContext2 = useContext(StateContext),\n      state = _useContext2.state,\n      dispatch = _useContext2.dispatch;\n\n  var _useState = useState(new Date()),\n      _useState2 = _slicedToArray(_useState, 2),\n      date = _useState2[0],\n      setDate = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      pressed = _useState4[0],\n      setPressed = _useState4[1];\n\n  var onChange = function onChange(event, selectedDate) {\n    var currentDate = selectedDate || date;\n    dispatch({\n      type: 'SET_SHOW',\n      payload: false\n    });\n    setDate(currentDate);\n    setPressed(true);\n  };\n\n  var onSubmit = function onSubmit(values) {\n    var firstName, lastName, bio;\n    return _regeneratorRuntime.async(function onSubmit$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            firstName = values.firstName, lastName = values.lastName, bio = values.bio;\n            uploadUserInfo(firstName, lastName, Moment(date).format('DD-MM-YYYY'), bio);\n            history.push('/');\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(Formik, {\n    style: styles.container,\n    initialValues: initialValues,\n    onSubmit: onSubmit,\n    validationSchema: validationSchema,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }\n  }, function (_ref2) {\n    var handleSubmit = _ref2.handleSubmit;\n    return React.createElement(UserinfoForm, {\n      onSubmit: handleSubmit,\n      date: date,\n      pressed: pressed,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 11\n      }\n    });\n  }), state.show && React.createElement(DateTimePicker, {\n    testID: \"dateTimePicker\",\n    value: date,\n    mode: 'date',\n    display: \"default\",\n    onChange: onChange,\n    maximumDate: new Date(2020, 12, 31),\n    minimumDate: new Date(1900, 1, 1),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default UploadUserInfo;","map":{"version":3,"sources":["/home/hejoel/fullstack/fullstack-ht/fullstack-ht/fullstack-ht-app/src/components/UploadUserInfo.jsx"],"names":["React","useState","useContext","Button","Formik","useHistory","yup","DateTimePicker","Moment","FormikTextInput","theme","uploadUserInfo","StateContext","styles","StyleSheet","create","container","flexDirection","justifyContent","height","width","position","flex","zIndex","fieldContainer","marginBottom","buttonContainer","paddingVertical","paddingHorizontal","borderWidth","borderStyle","borderRadius","borderColor","textContainer","fontSize","fontSizes","body","fontFamily","fonts","main","color","initialValues","firstName","lastName","bio","validationSchema","object","shape","string","min","required","max","UserinfoForm","onSubmit","date","pressed","state","dispatch","text","format","type","payload","show","UploadUserInfo","history","Date","setDate","setPressed","onChange","event","selectedDate","currentDate","values","push","handleSubmit"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,QAA4C,OAA5C;;;;;AAIA,SAASC,MAAT,QAAuB,oBAAvB;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,OAAOC,cAAP,MAA2B,wCAA3B;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,eAAP;AACA,OAAOC,KAAP;AACA,SAASC,cAAT;AACA,SAASC,YAAT;AAEA,IAAMC,MAAM,GAAGC,UAAU,CAACC,MAAX,CAAkB;AAC/BC,EAAAA,SAAS,EAAE;AACTC,IAAAA,aAAa,EAAE,QADN;AAETC,IAAAA,cAAc,EAAE,QAFP;AAGTC,IAAAA,MAAM,EAAE,MAHC;AAITC,IAAAA,KAAK,EAAE,MAJE;AAKTC,IAAAA,QAAQ,EAAE,UALD;AAMTC,IAAAA,IAAI,EAAE,CANG;AAOTC,IAAAA,MAAM,EAAE;AAPC,GADoB;AAU/BC,EAAAA,cAAc,EAAE;AACdC,IAAAA,YAAY,EAAE;AADA,GAVe;AAa/BC,EAAAA,eAAe,EAAE;AACfH,IAAAA,MAAM,EAAE,EADO;AAEfI,IAAAA,eAAe,EAAE,EAFF;AAGfC,IAAAA,iBAAiB,EAAE,EAHJ;AAIfC,IAAAA,WAAW,EAAE,CAJE;AAKfC,IAAAA,WAAW,EAAE,OALE;AAMfC,IAAAA,YAAY,EAAE,CANC;AAOfC,IAAAA,WAAW,EAAE,SAPE;AAQfP,IAAAA,YAAY,EAAE;AARC,GAbc;AAuB/BQ,EAAAA,aAAa,EAAE;AACbC,IAAAA,QAAQ,EAAExB,KAAK,CAACyB,SAAN,CAAgBC,IADb;AAEbC,IAAAA,UAAU,EAAE3B,KAAK,CAAC4B,KAAN,CAAYC,IAFX;AAGbC,IAAAA,KAAK,EAAE;AAHM;AAvBgB,CAAlB,CAAf;AA8BA,IAAMC,aAAa,GAAG;AACpBC,EAAAA,SAAS,EAAE,EADS;AAEpBC,EAAAA,QAAQ,EAAE,EAFU;AAGpBC,EAAAA,GAAG,EAAE;AAHe,CAAtB;AAOA,IAAMC,gBAAgB,GAAGvC,GAAG,CAACwC,MAAJ,GAAaC,KAAb,CAAmB;AAC1CL,EAAAA,SAAS,EAAEpC,GAAG,CACX0C,MADQ,GAERC,GAFQ,CAEJ,CAFI,EAED,8CAFC,EAGRC,QAHQ,CAGC,wBAHD,CAD+B;AAK1CP,EAAAA,QAAQ,EAAErC,GAAG,CACV0C,MADO,GAEPC,GAFO,CAEH,CAFG,EAEA,8CAFA,EAGPC,QAHO,CAGE,uBAHF,CALgC;AAS1CN,EAAAA,GAAG,EAAEtC,GAAG,CACL0C,MADE,GAEFG,GAFE,CAEE,GAFF,EAEO,wCAFP;AATqC,CAAnB,CAAzB;;AAcA,IAAMC,YAAY,GAAG,SAAfA,YAAe,OAAiC;AAAA,MAA9BC,QAA8B,QAA9BA,QAA8B;AAAA,MAApBC,IAAoB,QAApBA,IAAoB;AAAA,MAAdC,OAAc,QAAdA,OAAc;;AACpD,oBAA4BrD,UAAU,CAACU,YAAD,CAAtC;AAAA,MAAQ4C,KAAR,eAAQA,KAAR;AAAA,MAAeC,QAAf,eAAeA,QAAf;;AACA,MAAMC,IAAI,GAAGH,OAAO,GAAG/C,MAAM,CAAC8C,IAAD,CAAN,CAAaK,MAAb,CAAoB,YAApB,CAAH,GAAuC,WAA3D;AAEA,SACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE9C,MAAM,CAACG,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEH,MAAM,CAACW,cAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,eAAD;AACE,IAAA,IAAI,EAAC,WADP;AAEE,IAAA,WAAW,EAAC,YAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAFF,EASE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEX,MAAM,CAACW,cAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,eAAD;AACE,IAAA,IAAI,EAAC,UADP;AAEE,IAAA,WAAW,EAAC,WAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CATF,EAgBE,oBAAC,wBAAD;AAA0B,IAAA,OAAO,EAAE;AAAA,aAAMiC,QAAQ,CAAC;AAAEG,QAAAA,IAAI,EAAE,UAAR;AAAoBC,QAAAA,OAAO,EAAE,CAACL,KAAK,CAACM;AAApC,OAAD,CAAd;AAAA,KAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEjD,MAAM,CAACa,eAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEb,MAAM,CAACoB,aAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoCyB,IAApC,CADF,CADF,CAhBF,EAsBE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE7C,MAAM,CAACW,cAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,eAAD;AACE,IAAA,IAAI,EAAC,KADP;AAEE,IAAA,WAAW,EAAC,KAFd;AAGE,IAAA,SAAS,MAHX;AAIE,IAAA,aAAa,EAAE,CAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAtBF,EA+BE,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAE,UAAd;AAA0B,IAAA,OAAO,EAAE6B,QAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA/BF,CADF;AAsCD,CA1CD;;AA4CA,IAAMU,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAC3B,MAAMC,OAAO,GAAG3D,UAAU,EAA1B;;AACA,qBAA4BH,UAAU,CAACU,YAAD,CAAtC;AAAA,MAAQ4C,KAAR,gBAAQA,KAAR;AAAA,MAAeC,QAAf,gBAAeA,QAAf;;AAEA,kBAAwBxD,QAAQ,CAAC,IAAIgE,IAAJ,EAAD,CAAhC;AAAA;AAAA,MAAOX,IAAP;AAAA,MAAaY,OAAb;;AACA,mBAA8BjE,QAAQ,CAAC,KAAD,CAAtC;AAAA;AAAA,MAAOsD,OAAP;AAAA,MAAgBY,UAAhB;;AAEA,MAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD,EAAQC,YAAR,EAAyB;AACxC,QAAMC,WAAW,GAAGD,YAAY,IAAIhB,IAApC;AACAG,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAE,UAAR;AAAoBC,MAAAA,OAAO,EAAE;AAA7B,KAAD,CAAR;AACAK,IAAAA,OAAO,CAACK,WAAD,CAAP;AACAJ,IAAAA,UAAU,CAAC,IAAD,CAAV;AACD,GALD;;AAOA,MAAMd,QAAQ,GAAG,SAAXA,QAAW,CAAOmB,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACP9B,YAAAA,SADO,GACsB8B,MADtB,CACP9B,SADO,EACIC,QADJ,GACsB6B,MADtB,CACI7B,QADJ,EACcC,GADd,GACsB4B,MADtB,CACc5B,GADd;AAGfjC,YAAAA,cAAc,CAAC+B,SAAD,EAAYC,QAAZ,EAAsBnC,MAAM,CAAC8C,IAAD,CAAN,CAAaK,MAAb,CAAoB,YAApB,CAAtB,EAAyDf,GAAzD,CAAd;AAEAoB,YAAAA,OAAO,CAACS,IAAR,CAAa,GAAb;;AALe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjB;;AAQA,SACE,0CACE,oBAAC,MAAD;AACE,IAAA,KAAK,EAAE5D,MAAM,CAACG,SADhB;AAEE,IAAA,aAAa,EAAEyB,aAFjB;AAGE,IAAA,QAAQ,EAAEY,QAHZ;AAIE,IAAA,gBAAgB,EAAER,gBAJpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMG;AAAA,QAAG6B,YAAH,SAAGA,YAAH;AAAA,WACC,oBAAC,YAAD;AAAc,MAAA,QAAQ,EAAEA,YAAxB;AAAsC,MAAA,IAAI,EAAEpB,IAA5C;AAAkD,MAAA,OAAO,EAAEC,OAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD;AAAA,GANH,CADF,EAUIC,KAAK,CAACM,IAAN,IACF,oBAAC,cAAD;AACE,IAAA,MAAM,EAAC,gBADT;AAEE,IAAA,KAAK,EAAER,IAFT;AAGE,IAAA,IAAI,EAAE,MAHR;AAIE,IAAA,OAAO,EAAC,SAJV;AAKE,IAAA,QAAQ,EAAEc,QALZ;AAME,IAAA,WAAW,EAAE,IAAIH,IAAJ,CAAS,IAAT,EAAe,EAAf,EAAmB,EAAnB,CANf;AAOE,IAAA,WAAW,EAAE,IAAIA,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,CAAlB,CAPf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXF,CADF;AAyBD,CA/CD;;AAiDA,eAAeF,cAAf","sourcesContent":["import React, { useState, useContext } from 'react';\nimport {\n  View, StyleSheet, Text, TouchableWithoutFeedback,\n} from 'react-native';\nimport { Button } from 'react-native-paper';\nimport { Formik } from 'formik';\nimport { useHistory } from 'react-router-native';\nimport * as yup from 'yup';\nimport DateTimePicker from '@react-native-community/datetimepicker';\nimport Moment from 'moment';\nimport FormikTextInput from './FormikTextInput';\nimport theme from '../theme';\nimport { uploadUserInfo } from '../firebase/uploads';\nimport { StateContext } from '../state';\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'column',\n    justifyContent: 'center',\n    height: '100%',\n    width: '100%',\n    position: 'absolute',\n    flex: 1,\n    zIndex: 1,\n  },\n  fieldContainer: {\n    marginBottom: 15,\n  },\n  buttonContainer: {\n    zIndex: 10,\n    paddingVertical: 10,\n    paddingHorizontal: 15,\n    borderWidth: 1,\n    borderStyle: 'solid',\n    borderRadius: 5,\n    borderColor: '#aab2bb',\n    marginBottom: 15,\n  },\n  textContainer: {\n    fontSize: theme.fontSizes.body,\n    fontFamily: theme.fonts.main,\n    color: '#A6ACAF',\n  },\n});\n\nconst initialValues = {\n  firstName: '',\n  lastName: '',\n  bio: '',\n\n};\n\nconst validationSchema = yup.object().shape({\n  firstName: yup\n    .string()\n    .min(1, 'First name must be at least 1 charaters long')\n    .required('First name is required'),\n  lastName: yup\n    .string()\n    .min(1, 'Last name must be at least 1 characters long')\n    .required('Last name is required'),\n  bio: yup\n    .string()\n    .max(150, 'Bio can be at most 150 characters long'),\n});\n\nconst UserinfoForm = ({ onSubmit, date, pressed }) => {\n  const { state, dispatch } = useContext(StateContext);\n  const text = pressed ? Moment(date).format('DD-MM-YYYY') : 'Birthdate';\n\n  return (\n    <View style={styles.container}>\n\n      <View style={styles.fieldContainer}>\n        <FormikTextInput\n          name=\"firstName\"\n          placeholder=\"First name\"\n        />\n      </View>\n\n      <View style={styles.fieldContainer}>\n        <FormikTextInput\n          name=\"lastName\"\n          placeholder=\"Last name\"\n        />\n      </View>\n\n      <TouchableWithoutFeedback onPress={() => dispatch({ type: 'SET_SHOW', payload: !state.show })}>\n        <View style={styles.buttonContainer}>\n          <Text style={styles.textContainer}>{text}</Text>\n        </View>\n      </TouchableWithoutFeedback>\n\n      <View style={styles.fieldContainer}>\n        <FormikTextInput\n          name=\"bio\"\n          placeholder=\"Bio\"\n          multiline\n          numberOfLines={1}\n        />\n      </View>\n\n      <Button mode={'outlined'} onPress={onSubmit}>\n        Submit\n      </Button>\n\n    </View>\n  );\n};\n\nconst UploadUserInfo = () => {\n  const history = useHistory();\n  const { state, dispatch } = useContext(StateContext);\n\n  const [date, setDate] = useState(new Date());\n  const [pressed, setPressed] = useState(false);\n\n  const onChange = (event, selectedDate) => {\n    const currentDate = selectedDate || date;\n    dispatch({ type: 'SET_SHOW', payload: false });\n    setDate(currentDate);\n    setPressed(true);\n  };\n\n  const onSubmit = async (values) => {\n    const { firstName, lastName, bio } = values;\n\n    uploadUserInfo(firstName, lastName, Moment(date).format('DD-MM-YYYY'), bio);\n\n    history.push('/');\n  };\n\n  return (\n    <>\n      <Formik\n        style={styles.container}\n        initialValues={initialValues}\n        onSubmit={onSubmit}\n        validationSchema={validationSchema}\n      >\n        {({ handleSubmit }) =>\n          <UserinfoForm onSubmit={handleSubmit} date={date} pressed={pressed} />}\n      </Formik>\n      { state.show && (\n      <DateTimePicker\n        testID=\"dateTimePicker\"\n        value={date}\n        mode={'date'}\n        display=\"default\"\n        onChange={onChange}\n        maximumDate={new Date(2020, 12, 31)}\n        minimumDate={new Date(1900, 1, 1)}\n      />\n\n      )}\n    </>\n  );\n};\n\nexport default UploadUserInfo;\n"]},"metadata":{},"sourceType":"module"}