{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/home/hejoel/fullstack/fullstack-ht/fullstack-ht/fullstack-ht-app/src/components/UploadUserInfo.jsx\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { Button } from 'react-native-paper';\nimport { Formik, yupToFormErrors } from 'formik';\nimport * as yup from 'yup';\nimport FormikTextInput from \"./FormikTextInput\";\nvar styles = StyleSheet.create({\n  container: {\n    zIndex: 1,\n    height: '100%',\n    width: '100%',\n    position: 'absolute',\n    flexDirection: 'column',\n    justifyContent: 'center'\n  },\n  button: {},\n  textInput: {\n    height: 100\n  }\n});\nvar initialValues = {};\nvar validationSchema = yup.object().shape({\n  firstName: yup.string().min(1, 'First name must be at least 1 charaters long').required('First name is required'),\n  lastName: yup.string().min(1, 'Last name must be at least 1 characters long'),\n  birthdate: yup.date().required('Birtdate is required'),\n  password: yup.string().min(5, 'Password must be at least 6 characters long').max(50, 'Password must be at most 50 characters long').required('Password is required'),\n  passwordConfirmation: yup.string().oneOf([yup.ref('password'), null], 'Password confirmation must match the password').required('Password confirmation is required')\n});\n\nvar UserInfoForm = function UserInfoForm(_ref) {\n  var onSubmit = _ref.onSubmit;\n  return React.createElement(View, {\n    style: styles.container\n  }, React.createElement(View, {\n    style: styles.fieldContainer\n  }, React.createElement(FormikTextInput, {\n    name: \"email\",\n    placeholder: \"Email\"\n  })), React.createElement(View, {\n    style: styles.fieldContainer\n  }, React.createElement(FormikTextInput, {\n    name: \"password\",\n    placeholder: \"Password\",\n    secureTextEntry: true\n  })), React.createElement(View, {\n    style: styles.fieldContainer\n  }, React.createElement(FormikTextInput, {\n    name: \"passwordConfirmation\",\n    placeholder: \"Password confirmation\",\n    secureTextEntry: true\n  })), React.createElement(CustomButton, {\n    onPress: onSubmit,\n    testID: \"submitButton\"\n  }, \"Sign up\"));\n};\n\nvar UploadUserInfo = function UploadUserInfo() {\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      text = _useState2[0],\n      setText = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      date = _useState4[0],\n      setDate = _useState4[1];\n\n  return React.createElement(Formik, {\n    style: styles.container,\n    initialValues: initialValues,\n    onSubmit: onSubmit,\n    validationSchema: validationSchema\n  }, function (_ref2) {\n    var handleSubmit = _ref2.handleSubmit;\n    return React.createElement(SignUpForm, {\n      onSubmit: handleSubmit\n    });\n  }), {};\n};\n\nexport default UploadUserInfo;","map":{"version":3,"sources":["/home/hejoel/fullstack/fullstack-ht/fullstack-ht/fullstack-ht-app/src/components/UploadUserInfo.jsx"],"names":["React","useState","Button","Formik","yupToFormErrors","yup","FormikTextInput","styles","StyleSheet","create","container","zIndex","height","width","position","flexDirection","justifyContent","button","textInput","initialValues","validationSchema","object","shape","firstName","string","min","required","lastName","birthdate","date","password","max","passwordConfirmation","oneOf","ref","UserInfoForm","onSubmit","fieldContainer","UploadUserInfo","text","setText","setDate","handleSubmit"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { Button } from 'react-native-paper';\nimport { Formik, yupToFormErrors } from 'formik';\nimport * as yup from 'yup';\nimport FormikTextInput from './FormikTextInput';\n\nconst styles = StyleSheet.create({\n    container: {\n        zIndex: 1,\n        height: '100%',\n        width: '100%',\n        position: 'absolute',\n        flexDirection: 'column',\n        justifyContent: 'center',\n    },\n    button: {\n\n    },\n    textInput: {\n        height: 100\n    }\n});\n\nconst initialValues = {\n\n};\n\nconst validationSchema = yup.object().shape({\n    firstName: yup\n        .string()\n        .min(1, 'First name must be at least 1 charaters long')\n        .required('First name is required'),\n    lastName: yup\n        .string()\n        .min(1, 'Last name must be at least 1 characters long'),\n    birthdate: yup\n        .date()\n        .required('Birtdate is required'),\n    password: yup\n        .string()\n        .min(5, 'Password must be at least 6 characters long')\n        .max(50, 'Password must be at most 50 characters long')\n        .required('Password is required'),\n    passwordConfirmation: yup\n        .string()\n        .oneOf(\n            [yup.ref('password'), null],\n            'Password confirmation must match the password',\n        )\n        .required('Password confirmation is required'),\n});\n\nconst UserInfoForm = ({ onSubmit }) => {\n    return (\n        <View style={styles.container}>\n\n            <View style={styles.fieldContainer}>\n                <FormikTextInput\n                    name=\"email\"\n                    placeholder=\"Email\" />\n            </View>\n\n            <View style={styles.fieldContainer}>\n                <FormikTextInput\n                    name=\"password\"\n                    placeholder=\"Password\"\n                    secureTextEntry\n                />\n            </View>\n\n            <View style={styles.fieldContainer}>\n                <FormikTextInput\n                    name=\"passwordConfirmation\"\n                    placeholder=\"Password confirmation\"\n                    secureTextEntry\n                />\n            </View>\n\n            <CustomButton onPress={onSubmit} testID=\"submitButton\">\n                Sign up\n        </CustomButton>\n        </View>\n    );\n};\n\nconst UploadUserInfo = () => {\n\n    const [text, setText] = useState('');\n    // kaikissa sama stata, siksi oma component\n    const [date, setDate] = useState('');\n    // make text input change row\n    // use formik\n\n    return (\n\n        // <View style={styles.container}>\n\n\n            <Formik\n                style={styles.container}\n                initialValues={initialValues}\n                onSubmit={onSubmit}\n                validationSchema={validationSchema}\n            >\n                {({ handleSubmit }) => <SignUpForm onSubmit={handleSubmit} />}\n            </Formik>,\n\n\n\n            {\n                // First name\n                // Last name\n                // Birthday\n                // Country\n                // Age\n                // age\n                // interests\n            }\n\n        // </View>\n\n    );\n};\n\nexport default UploadUserInfo;"]},"metadata":{},"sourceType":"module"}